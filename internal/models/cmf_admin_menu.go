// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFAdminMenu is an object representing the database table.
type CMFAdminMenu struct {
	ID         uint    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ParentID   uint    `boil:"parent_id" json:"parent_id" toml:"parent_id" yaml:"parent_id"`
	Type       uint8   `boil:"type" json:"type" toml:"type" yaml:"type"`
	Status     uint8   `boil:"status" json:"status" toml:"status" yaml:"status"`
	ListOrder  float32 `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`
	App        string  `boil:"app" json:"app" toml:"app" yaml:"app"`
	Controller string  `boil:"controller" json:"controller" toml:"controller" yaml:"controller"`
	Action     string  `boil:"action" json:"action" toml:"action" yaml:"action"`
	Param      string  `boil:"param" json:"param" toml:"param" yaml:"param"`
	Name       string  `boil:"name" json:"name" toml:"name" yaml:"name"`
	Icon       string  `boil:"icon" json:"icon" toml:"icon" yaml:"icon"`
	Remark     string  `boil:"remark" json:"remark" toml:"remark" yaml:"remark"`

	R *cmfAdminMenuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfAdminMenuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFAdminMenuColumns = struct {
	ID         string
	ParentID   string
	Type       string
	Status     string
	ListOrder  string
	App        string
	Controller string
	Action     string
	Param      string
	Name       string
	Icon       string
	Remark     string
}{
	ID:         "id",
	ParentID:   "parent_id",
	Type:       "type",
	Status:     "status",
	ListOrder:  "list_order",
	App:        "app",
	Controller: "controller",
	Action:     "action",
	Param:      "param",
	Name:       "name",
	Icon:       "icon",
	Remark:     "remark",
}

// Generated where

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperuint8 struct{ field string }

func (w whereHelperuint8) EQ(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint8) NEQ(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint8) LT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint8) LTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint8) GT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint8) GTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint8) IN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint8) NIN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CMFAdminMenuWhere = struct {
	ID         whereHelperuint
	ParentID   whereHelperuint
	Type       whereHelperuint8
	Status     whereHelperuint8
	ListOrder  whereHelperfloat32
	App        whereHelperstring
	Controller whereHelperstring
	Action     whereHelperstring
	Param      whereHelperstring
	Name       whereHelperstring
	Icon       whereHelperstring
	Remark     whereHelperstring
}{
	ID:         whereHelperuint{field: "`cmf_admin_menu`.`id`"},
	ParentID:   whereHelperuint{field: "`cmf_admin_menu`.`parent_id`"},
	Type:       whereHelperuint8{field: "`cmf_admin_menu`.`type`"},
	Status:     whereHelperuint8{field: "`cmf_admin_menu`.`status`"},
	ListOrder:  whereHelperfloat32{field: "`cmf_admin_menu`.`list_order`"},
	App:        whereHelperstring{field: "`cmf_admin_menu`.`app`"},
	Controller: whereHelperstring{field: "`cmf_admin_menu`.`controller`"},
	Action:     whereHelperstring{field: "`cmf_admin_menu`.`action`"},
	Param:      whereHelperstring{field: "`cmf_admin_menu`.`param`"},
	Name:       whereHelperstring{field: "`cmf_admin_menu`.`name`"},
	Icon:       whereHelperstring{field: "`cmf_admin_menu`.`icon`"},
	Remark:     whereHelperstring{field: "`cmf_admin_menu`.`remark`"},
}

// CMFAdminMenuRels is where relationship names are stored.
var CMFAdminMenuRels = struct {
}{}

// cmfAdminMenuR is where relationships are stored.
type cmfAdminMenuR struct {
}

// NewStruct creates a new relationship struct
func (*cmfAdminMenuR) NewStruct() *cmfAdminMenuR {
	return &cmfAdminMenuR{}
}

// cmfAdminMenuL is where Load methods for each relationship are stored.
type cmfAdminMenuL struct{}

var (
	cmfAdminMenuAllColumns            = []string{"id", "parent_id", "type", "status", "list_order", "app", "controller", "action", "param", "name", "icon", "remark"}
	cmfAdminMenuColumnsWithoutDefault = []string{"app", "controller", "action", "param", "name", "icon", "remark"}
	cmfAdminMenuColumnsWithDefault    = []string{"id", "parent_id", "type", "status", "list_order"}
	cmfAdminMenuPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFAdminMenuSlice is an alias for a slice of pointers to CMFAdminMenu.
	// This should generally be used opposed to []CMFAdminMenu.
	CMFAdminMenuSlice []*CMFAdminMenu
	// CMFAdminMenuHook is the signature for custom CMFAdminMenu hook methods
	CMFAdminMenuHook func(context.Context, boil.ContextExecutor, *CMFAdminMenu) error

	cmfAdminMenuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfAdminMenuType                 = reflect.TypeOf(&CMFAdminMenu{})
	cmfAdminMenuMapping              = queries.MakeStructMapping(cmfAdminMenuType)
	cmfAdminMenuPrimaryKeyMapping, _ = queries.BindMapping(cmfAdminMenuType, cmfAdminMenuMapping, cmfAdminMenuPrimaryKeyColumns)
	cmfAdminMenuInsertCacheMut       sync.RWMutex
	cmfAdminMenuInsertCache          = make(map[string]insertCache)
	cmfAdminMenuUpdateCacheMut       sync.RWMutex
	cmfAdminMenuUpdateCache          = make(map[string]updateCache)
	cmfAdminMenuUpsertCacheMut       sync.RWMutex
	cmfAdminMenuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfAdminMenuBeforeInsertHooks []CMFAdminMenuHook
var cmfAdminMenuBeforeUpdateHooks []CMFAdminMenuHook
var cmfAdminMenuBeforeDeleteHooks []CMFAdminMenuHook
var cmfAdminMenuBeforeUpsertHooks []CMFAdminMenuHook

var cmfAdminMenuAfterInsertHooks []CMFAdminMenuHook
var cmfAdminMenuAfterSelectHooks []CMFAdminMenuHook
var cmfAdminMenuAfterUpdateHooks []CMFAdminMenuHook
var cmfAdminMenuAfterDeleteHooks []CMFAdminMenuHook
var cmfAdminMenuAfterUpsertHooks []CMFAdminMenuHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFAdminMenu) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAdminMenuBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFAdminMenu) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAdminMenuBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFAdminMenu) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAdminMenuBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFAdminMenu) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAdminMenuBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFAdminMenu) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAdminMenuAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFAdminMenu) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAdminMenuAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFAdminMenu) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAdminMenuAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFAdminMenu) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAdminMenuAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFAdminMenu) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAdminMenuAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFAdminMenuHook registers your hook function for all future operations.
func AddCMFAdminMenuHook(hookPoint boil.HookPoint, cmfAdminMenuHook CMFAdminMenuHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfAdminMenuBeforeInsertHooks = append(cmfAdminMenuBeforeInsertHooks, cmfAdminMenuHook)
	case boil.BeforeUpdateHook:
		cmfAdminMenuBeforeUpdateHooks = append(cmfAdminMenuBeforeUpdateHooks, cmfAdminMenuHook)
	case boil.BeforeDeleteHook:
		cmfAdminMenuBeforeDeleteHooks = append(cmfAdminMenuBeforeDeleteHooks, cmfAdminMenuHook)
	case boil.BeforeUpsertHook:
		cmfAdminMenuBeforeUpsertHooks = append(cmfAdminMenuBeforeUpsertHooks, cmfAdminMenuHook)
	case boil.AfterInsertHook:
		cmfAdminMenuAfterInsertHooks = append(cmfAdminMenuAfterInsertHooks, cmfAdminMenuHook)
	case boil.AfterSelectHook:
		cmfAdminMenuAfterSelectHooks = append(cmfAdminMenuAfterSelectHooks, cmfAdminMenuHook)
	case boil.AfterUpdateHook:
		cmfAdminMenuAfterUpdateHooks = append(cmfAdminMenuAfterUpdateHooks, cmfAdminMenuHook)
	case boil.AfterDeleteHook:
		cmfAdminMenuAfterDeleteHooks = append(cmfAdminMenuAfterDeleteHooks, cmfAdminMenuHook)
	case boil.AfterUpsertHook:
		cmfAdminMenuAfterUpsertHooks = append(cmfAdminMenuAfterUpsertHooks, cmfAdminMenuHook)
	}
}

// One returns a single cmfAdminMenu record from the query.
func (q cmfAdminMenuQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFAdminMenu, error) {
	o := &CMFAdminMenu{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_admin_menu")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFAdminMenu records from the query.
func (q cmfAdminMenuQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFAdminMenuSlice, error) {
	var o []*CMFAdminMenu

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFAdminMenu slice")
	}

	if len(cmfAdminMenuAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFAdminMenu records in the query.
func (q cmfAdminMenuQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_admin_menu rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfAdminMenuQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_admin_menu exists")
	}

	return count > 0, nil
}

// CMFAdminMenus retrieves all the records using an executor.
func CMFAdminMenus(mods ...qm.QueryMod) cmfAdminMenuQuery {
	mods = append(mods, qm.From("`cmf_admin_menu`"))
	return cmfAdminMenuQuery{NewQuery(mods...)}
}

// FindCMFAdminMenu retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFAdminMenu(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFAdminMenu, error) {
	cmfAdminMenuObj := &CMFAdminMenu{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_admin_menu` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfAdminMenuObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_admin_menu")
	}

	return cmfAdminMenuObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFAdminMenu) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_admin_menu provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfAdminMenuColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfAdminMenuInsertCacheMut.RLock()
	cache, cached := cmfAdminMenuInsertCache[key]
	cmfAdminMenuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfAdminMenuAllColumns,
			cmfAdminMenuColumnsWithDefault,
			cmfAdminMenuColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfAdminMenuType, cmfAdminMenuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfAdminMenuType, cmfAdminMenuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_admin_menu` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_admin_menu` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_admin_menu` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfAdminMenuPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_admin_menu")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfAdminMenuMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_admin_menu")
	}

CacheNoHooks:
	if !cached {
		cmfAdminMenuInsertCacheMut.Lock()
		cmfAdminMenuInsertCache[key] = cache
		cmfAdminMenuInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFAdminMenu.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFAdminMenu) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfAdminMenuUpdateCacheMut.RLock()
	cache, cached := cmfAdminMenuUpdateCache[key]
	cmfAdminMenuUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfAdminMenuAllColumns,
			cmfAdminMenuPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_admin_menu, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_admin_menu` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfAdminMenuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfAdminMenuType, cmfAdminMenuMapping, append(wl, cmfAdminMenuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_admin_menu row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_admin_menu")
	}

	if !cached {
		cmfAdminMenuUpdateCacheMut.Lock()
		cmfAdminMenuUpdateCache[key] = cache
		cmfAdminMenuUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfAdminMenuQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_admin_menu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_admin_menu")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFAdminMenuSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfAdminMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_admin_menu` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfAdminMenuPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfAdminMenu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfAdminMenu")
	}
	return rowsAff, nil
}

var mySQLCMFAdminMenuUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFAdminMenu) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_admin_menu provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfAdminMenuColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFAdminMenuUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfAdminMenuUpsertCacheMut.RLock()
	cache, cached := cmfAdminMenuUpsertCache[key]
	cmfAdminMenuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfAdminMenuAllColumns,
			cmfAdminMenuColumnsWithDefault,
			cmfAdminMenuColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfAdminMenuAllColumns,
			cmfAdminMenuPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_admin_menu, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_admin_menu`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_admin_menu` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfAdminMenuType, cmfAdminMenuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfAdminMenuType, cmfAdminMenuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_admin_menu")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfAdminMenuMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfAdminMenuType, cmfAdminMenuMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_admin_menu")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_admin_menu")
	}

CacheNoHooks:
	if !cached {
		cmfAdminMenuUpsertCacheMut.Lock()
		cmfAdminMenuUpsertCache[key] = cache
		cmfAdminMenuUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFAdminMenu record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFAdminMenu) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFAdminMenu provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfAdminMenuPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_admin_menu` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_admin_menu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_admin_menu")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfAdminMenuQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfAdminMenuQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_admin_menu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_admin_menu")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFAdminMenuSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfAdminMenuBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfAdminMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_admin_menu` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfAdminMenuPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfAdminMenu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_admin_menu")
	}

	if len(cmfAdminMenuAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFAdminMenu) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFAdminMenu(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFAdminMenuSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFAdminMenuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfAdminMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_admin_menu`.* FROM `cmf_admin_menu` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfAdminMenuPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFAdminMenuSlice")
	}

	*o = slice

	return nil
}

// CMFAdminMenuExists checks if the CMFAdminMenu row exists.
func CMFAdminMenuExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_admin_menu` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_admin_menu exists")
	}

	return exists, nil
}
