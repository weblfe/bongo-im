// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFAppUserPermission is an object representing the database table.
type CMFAppUserPermission struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID         int64       `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Permission  string      `boil:"permission" json:"permission" toml:"permission" yaml:"permission"`
	Reason      null.String `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	Status      bool        `boil:"status" json:"status" toml:"status" yaml:"status"`
	Extras      null.String `boil:"extras" json:"extras,omitempty" toml:"extras" yaml:"extras,omitempty"`
	Version     int         `boil:"version" json:"version" toml:"version" yaml:"version"`
	CreateTime  time.Time   `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdatedTime time.Time   `boil:"updated_time" json:"updated_time" toml:"updated_time" yaml:"updated_time"`
	DeletedTime null.Time   `boil:"deleted_time" json:"deleted_time,omitempty" toml:"deleted_time" yaml:"deleted_time,omitempty"`

	R *cmfAppUserPermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfAppUserPermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFAppUserPermissionColumns = struct {
	ID          string
	UID         string
	Permission  string
	Reason      string
	Status      string
	Extras      string
	Version     string
	CreateTime  string
	UpdatedTime string
	DeletedTime string
}{
	ID:          "id",
	UID:         "uid",
	Permission:  "permission",
	Reason:      "reason",
	Status:      "status",
	Extras:      "extras",
	Version:     "version",
	CreateTime:  "create_time",
	UpdatedTime: "updated_time",
	DeletedTime: "deleted_time",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CMFAppUserPermissionWhere = struct {
	ID          whereHelperint64
	UID         whereHelperint64
	Permission  whereHelperstring
	Reason      whereHelpernull_String
	Status      whereHelperbool
	Extras      whereHelpernull_String
	Version     whereHelperint
	CreateTime  whereHelpertime_Time
	UpdatedTime whereHelpertime_Time
	DeletedTime whereHelpernull_Time
}{
	ID:          whereHelperint64{field: "`cmf_app_user_permission`.`id`"},
	UID:         whereHelperint64{field: "`cmf_app_user_permission`.`uid`"},
	Permission:  whereHelperstring{field: "`cmf_app_user_permission`.`permission`"},
	Reason:      whereHelpernull_String{field: "`cmf_app_user_permission`.`reason`"},
	Status:      whereHelperbool{field: "`cmf_app_user_permission`.`status`"},
	Extras:      whereHelpernull_String{field: "`cmf_app_user_permission`.`extras`"},
	Version:     whereHelperint{field: "`cmf_app_user_permission`.`version`"},
	CreateTime:  whereHelpertime_Time{field: "`cmf_app_user_permission`.`create_time`"},
	UpdatedTime: whereHelpertime_Time{field: "`cmf_app_user_permission`.`updated_time`"},
	DeletedTime: whereHelpernull_Time{field: "`cmf_app_user_permission`.`deleted_time`"},
}

// CMFAppUserPermissionRels is where relationship names are stored.
var CMFAppUserPermissionRels = struct {
}{}

// cmfAppUserPermissionR is where relationships are stored.
type cmfAppUserPermissionR struct {
}

// NewStruct creates a new relationship struct
func (*cmfAppUserPermissionR) NewStruct() *cmfAppUserPermissionR {
	return &cmfAppUserPermissionR{}
}

// cmfAppUserPermissionL is where Load methods for each relationship are stored.
type cmfAppUserPermissionL struct{}

var (
	cmfAppUserPermissionAllColumns            = []string{"id", "uid", "permission", "reason", "status", "extras", "version", "create_time", "updated_time", "deleted_time"}
	cmfAppUserPermissionColumnsWithoutDefault = []string{"uid", "permission", "reason", "extras", "create_time", "updated_time", "deleted_time"}
	cmfAppUserPermissionColumnsWithDefault    = []string{"id", "status", "version"}
	cmfAppUserPermissionPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFAppUserPermissionSlice is an alias for a slice of pointers to CMFAppUserPermission.
	// This should generally be used opposed to []CMFAppUserPermission.
	CMFAppUserPermissionSlice []*CMFAppUserPermission
	// CMFAppUserPermissionHook is the signature for custom CMFAppUserPermission hook methods
	CMFAppUserPermissionHook func(context.Context, boil.ContextExecutor, *CMFAppUserPermission) error

	cmfAppUserPermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfAppUserPermissionType                 = reflect.TypeOf(&CMFAppUserPermission{})
	cmfAppUserPermissionMapping              = queries.MakeStructMapping(cmfAppUserPermissionType)
	cmfAppUserPermissionPrimaryKeyMapping, _ = queries.BindMapping(cmfAppUserPermissionType, cmfAppUserPermissionMapping, cmfAppUserPermissionPrimaryKeyColumns)
	cmfAppUserPermissionInsertCacheMut       sync.RWMutex
	cmfAppUserPermissionInsertCache          = make(map[string]insertCache)
	cmfAppUserPermissionUpdateCacheMut       sync.RWMutex
	cmfAppUserPermissionUpdateCache          = make(map[string]updateCache)
	cmfAppUserPermissionUpsertCacheMut       sync.RWMutex
	cmfAppUserPermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfAppUserPermissionBeforeInsertHooks []CMFAppUserPermissionHook
var cmfAppUserPermissionBeforeUpdateHooks []CMFAppUserPermissionHook
var cmfAppUserPermissionBeforeDeleteHooks []CMFAppUserPermissionHook
var cmfAppUserPermissionBeforeUpsertHooks []CMFAppUserPermissionHook

var cmfAppUserPermissionAfterInsertHooks []CMFAppUserPermissionHook
var cmfAppUserPermissionAfterSelectHooks []CMFAppUserPermissionHook
var cmfAppUserPermissionAfterUpdateHooks []CMFAppUserPermissionHook
var cmfAppUserPermissionAfterDeleteHooks []CMFAppUserPermissionHook
var cmfAppUserPermissionAfterUpsertHooks []CMFAppUserPermissionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFAppUserPermission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAppUserPermissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFAppUserPermission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAppUserPermissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFAppUserPermission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAppUserPermissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFAppUserPermission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAppUserPermissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFAppUserPermission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAppUserPermissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFAppUserPermission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAppUserPermissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFAppUserPermission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAppUserPermissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFAppUserPermission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAppUserPermissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFAppUserPermission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAppUserPermissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFAppUserPermissionHook registers your hook function for all future operations.
func AddCMFAppUserPermissionHook(hookPoint boil.HookPoint, cmfAppUserPermissionHook CMFAppUserPermissionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfAppUserPermissionBeforeInsertHooks = append(cmfAppUserPermissionBeforeInsertHooks, cmfAppUserPermissionHook)
	case boil.BeforeUpdateHook:
		cmfAppUserPermissionBeforeUpdateHooks = append(cmfAppUserPermissionBeforeUpdateHooks, cmfAppUserPermissionHook)
	case boil.BeforeDeleteHook:
		cmfAppUserPermissionBeforeDeleteHooks = append(cmfAppUserPermissionBeforeDeleteHooks, cmfAppUserPermissionHook)
	case boil.BeforeUpsertHook:
		cmfAppUserPermissionBeforeUpsertHooks = append(cmfAppUserPermissionBeforeUpsertHooks, cmfAppUserPermissionHook)
	case boil.AfterInsertHook:
		cmfAppUserPermissionAfterInsertHooks = append(cmfAppUserPermissionAfterInsertHooks, cmfAppUserPermissionHook)
	case boil.AfterSelectHook:
		cmfAppUserPermissionAfterSelectHooks = append(cmfAppUserPermissionAfterSelectHooks, cmfAppUserPermissionHook)
	case boil.AfterUpdateHook:
		cmfAppUserPermissionAfterUpdateHooks = append(cmfAppUserPermissionAfterUpdateHooks, cmfAppUserPermissionHook)
	case boil.AfterDeleteHook:
		cmfAppUserPermissionAfterDeleteHooks = append(cmfAppUserPermissionAfterDeleteHooks, cmfAppUserPermissionHook)
	case boil.AfterUpsertHook:
		cmfAppUserPermissionAfterUpsertHooks = append(cmfAppUserPermissionAfterUpsertHooks, cmfAppUserPermissionHook)
	}
}

// One returns a single cmfAppUserPermission record from the query.
func (q cmfAppUserPermissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFAppUserPermission, error) {
	o := &CMFAppUserPermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_app_user_permission")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFAppUserPermission records from the query.
func (q cmfAppUserPermissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFAppUserPermissionSlice, error) {
	var o []*CMFAppUserPermission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFAppUserPermission slice")
	}

	if len(cmfAppUserPermissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFAppUserPermission records in the query.
func (q cmfAppUserPermissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_app_user_permission rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfAppUserPermissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_app_user_permission exists")
	}

	return count > 0, nil
}

// CMFAppUserPermissions retrieves all the records using an executor.
func CMFAppUserPermissions(mods ...qm.QueryMod) cmfAppUserPermissionQuery {
	mods = append(mods, qm.From("`cmf_app_user_permission`"))
	return cmfAppUserPermissionQuery{NewQuery(mods...)}
}

// FindCMFAppUserPermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFAppUserPermission(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFAppUserPermission, error) {
	cmfAppUserPermissionObj := &CMFAppUserPermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_app_user_permission` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfAppUserPermissionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_app_user_permission")
	}

	return cmfAppUserPermissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFAppUserPermission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_app_user_permission provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfAppUserPermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfAppUserPermissionInsertCacheMut.RLock()
	cache, cached := cmfAppUserPermissionInsertCache[key]
	cmfAppUserPermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfAppUserPermissionAllColumns,
			cmfAppUserPermissionColumnsWithDefault,
			cmfAppUserPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfAppUserPermissionType, cmfAppUserPermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfAppUserPermissionType, cmfAppUserPermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_app_user_permission` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_app_user_permission` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_app_user_permission` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfAppUserPermissionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_app_user_permission")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfAppUserPermissionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_app_user_permission")
	}

CacheNoHooks:
	if !cached {
		cmfAppUserPermissionInsertCacheMut.Lock()
		cmfAppUserPermissionInsertCache[key] = cache
		cmfAppUserPermissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFAppUserPermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFAppUserPermission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfAppUserPermissionUpdateCacheMut.RLock()
	cache, cached := cmfAppUserPermissionUpdateCache[key]
	cmfAppUserPermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfAppUserPermissionAllColumns,
			cmfAppUserPermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_app_user_permission, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_app_user_permission` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfAppUserPermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfAppUserPermissionType, cmfAppUserPermissionMapping, append(wl, cmfAppUserPermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_app_user_permission row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_app_user_permission")
	}

	if !cached {
		cmfAppUserPermissionUpdateCacheMut.Lock()
		cmfAppUserPermissionUpdateCache[key] = cache
		cmfAppUserPermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfAppUserPermissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_app_user_permission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_app_user_permission")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFAppUserPermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfAppUserPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_app_user_permission` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfAppUserPermissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfAppUserPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfAppUserPermission")
	}
	return rowsAff, nil
}

var mySQLCMFAppUserPermissionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFAppUserPermission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_app_user_permission provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfAppUserPermissionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFAppUserPermissionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfAppUserPermissionUpsertCacheMut.RLock()
	cache, cached := cmfAppUserPermissionUpsertCache[key]
	cmfAppUserPermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfAppUserPermissionAllColumns,
			cmfAppUserPermissionColumnsWithDefault,
			cmfAppUserPermissionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfAppUserPermissionAllColumns,
			cmfAppUserPermissionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_app_user_permission, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_app_user_permission`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_app_user_permission` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfAppUserPermissionType, cmfAppUserPermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfAppUserPermissionType, cmfAppUserPermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_app_user_permission")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfAppUserPermissionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfAppUserPermissionType, cmfAppUserPermissionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_app_user_permission")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_app_user_permission")
	}

CacheNoHooks:
	if !cached {
		cmfAppUserPermissionUpsertCacheMut.Lock()
		cmfAppUserPermissionUpsertCache[key] = cache
		cmfAppUserPermissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFAppUserPermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFAppUserPermission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFAppUserPermission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfAppUserPermissionPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_app_user_permission` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_app_user_permission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_app_user_permission")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfAppUserPermissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfAppUserPermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_app_user_permission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_app_user_permission")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFAppUserPermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfAppUserPermissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfAppUserPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_app_user_permission` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfAppUserPermissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfAppUserPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_app_user_permission")
	}

	if len(cmfAppUserPermissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFAppUserPermission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFAppUserPermission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFAppUserPermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFAppUserPermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfAppUserPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_app_user_permission`.* FROM `cmf_app_user_permission` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfAppUserPermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFAppUserPermissionSlice")
	}

	*o = slice

	return nil
}

// CMFAppUserPermissionExists checks if the CMFAppUserPermission row exists.
func CMFAppUserPermissionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_app_user_permission` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_app_user_permission exists")
	}

	return exists, nil
}
