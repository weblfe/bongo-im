// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFApplyGoodsClass is an object representing the database table.
type CMFApplyGoodsClass struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID          int         `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	GoodsClassid string      `boil:"goods_classid" json:"goods_classid" toml:"goods_classid" yaml:"goods_classid"`
	Reason       null.String `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	Addtime      int         `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Uptime       int         `boil:"uptime" json:"uptime" toml:"uptime" yaml:"uptime"`
	Status       bool        `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *cmfApplyGoodsClassR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfApplyGoodsClassL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFApplyGoodsClassColumns = struct {
	ID           string
	UID          string
	GoodsClassid string
	Reason       string
	Addtime      string
	Uptime       string
	Status       string
}{
	ID:           "id",
	UID:          "uid",
	GoodsClassid: "goods_classid",
	Reason:       "reason",
	Addtime:      "addtime",
	Uptime:       "uptime",
	Status:       "status",
}

// Generated where

var CMFApplyGoodsClassWhere = struct {
	ID           whereHelperint
	UID          whereHelperint
	GoodsClassid whereHelperstring
	Reason       whereHelpernull_String
	Addtime      whereHelperint
	Uptime       whereHelperint
	Status       whereHelperbool
}{
	ID:           whereHelperint{field: "`cmf_apply_goods_class`.`id`"},
	UID:          whereHelperint{field: "`cmf_apply_goods_class`.`uid`"},
	GoodsClassid: whereHelperstring{field: "`cmf_apply_goods_class`.`goods_classid`"},
	Reason:       whereHelpernull_String{field: "`cmf_apply_goods_class`.`reason`"},
	Addtime:      whereHelperint{field: "`cmf_apply_goods_class`.`addtime`"},
	Uptime:       whereHelperint{field: "`cmf_apply_goods_class`.`uptime`"},
	Status:       whereHelperbool{field: "`cmf_apply_goods_class`.`status`"},
}

// CMFApplyGoodsClassRels is where relationship names are stored.
var CMFApplyGoodsClassRels = struct {
}{}

// cmfApplyGoodsClassR is where relationships are stored.
type cmfApplyGoodsClassR struct {
}

// NewStruct creates a new relationship struct
func (*cmfApplyGoodsClassR) NewStruct() *cmfApplyGoodsClassR {
	return &cmfApplyGoodsClassR{}
}

// cmfApplyGoodsClassL is where Load methods for each relationship are stored.
type cmfApplyGoodsClassL struct{}

var (
	cmfApplyGoodsClassAllColumns            = []string{"id", "uid", "goods_classid", "reason", "addtime", "uptime", "status"}
	cmfApplyGoodsClassColumnsWithoutDefault = []string{"goods_classid", "reason"}
	cmfApplyGoodsClassColumnsWithDefault    = []string{"id", "uid", "addtime", "uptime", "status"}
	cmfApplyGoodsClassPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFApplyGoodsClassSlice is an alias for a slice of pointers to CMFApplyGoodsClass.
	// This should generally be used opposed to []CMFApplyGoodsClass.
	CMFApplyGoodsClassSlice []*CMFApplyGoodsClass
	// CMFApplyGoodsClassHook is the signature for custom CMFApplyGoodsClass hook methods
	CMFApplyGoodsClassHook func(context.Context, boil.ContextExecutor, *CMFApplyGoodsClass) error

	cmfApplyGoodsClassQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfApplyGoodsClassType                 = reflect.TypeOf(&CMFApplyGoodsClass{})
	cmfApplyGoodsClassMapping              = queries.MakeStructMapping(cmfApplyGoodsClassType)
	cmfApplyGoodsClassPrimaryKeyMapping, _ = queries.BindMapping(cmfApplyGoodsClassType, cmfApplyGoodsClassMapping, cmfApplyGoodsClassPrimaryKeyColumns)
	cmfApplyGoodsClassInsertCacheMut       sync.RWMutex
	cmfApplyGoodsClassInsertCache          = make(map[string]insertCache)
	cmfApplyGoodsClassUpdateCacheMut       sync.RWMutex
	cmfApplyGoodsClassUpdateCache          = make(map[string]updateCache)
	cmfApplyGoodsClassUpsertCacheMut       sync.RWMutex
	cmfApplyGoodsClassUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfApplyGoodsClassBeforeInsertHooks []CMFApplyGoodsClassHook
var cmfApplyGoodsClassBeforeUpdateHooks []CMFApplyGoodsClassHook
var cmfApplyGoodsClassBeforeDeleteHooks []CMFApplyGoodsClassHook
var cmfApplyGoodsClassBeforeUpsertHooks []CMFApplyGoodsClassHook

var cmfApplyGoodsClassAfterInsertHooks []CMFApplyGoodsClassHook
var cmfApplyGoodsClassAfterSelectHooks []CMFApplyGoodsClassHook
var cmfApplyGoodsClassAfterUpdateHooks []CMFApplyGoodsClassHook
var cmfApplyGoodsClassAfterDeleteHooks []CMFApplyGoodsClassHook
var cmfApplyGoodsClassAfterUpsertHooks []CMFApplyGoodsClassHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFApplyGoodsClass) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfApplyGoodsClassBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFApplyGoodsClass) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfApplyGoodsClassBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFApplyGoodsClass) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfApplyGoodsClassBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFApplyGoodsClass) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfApplyGoodsClassBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFApplyGoodsClass) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfApplyGoodsClassAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFApplyGoodsClass) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfApplyGoodsClassAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFApplyGoodsClass) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfApplyGoodsClassAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFApplyGoodsClass) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfApplyGoodsClassAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFApplyGoodsClass) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfApplyGoodsClassAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFApplyGoodsClassHook registers your hook function for all future operations.
func AddCMFApplyGoodsClassHook(hookPoint boil.HookPoint, cmfApplyGoodsClassHook CMFApplyGoodsClassHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfApplyGoodsClassBeforeInsertHooks = append(cmfApplyGoodsClassBeforeInsertHooks, cmfApplyGoodsClassHook)
	case boil.BeforeUpdateHook:
		cmfApplyGoodsClassBeforeUpdateHooks = append(cmfApplyGoodsClassBeforeUpdateHooks, cmfApplyGoodsClassHook)
	case boil.BeforeDeleteHook:
		cmfApplyGoodsClassBeforeDeleteHooks = append(cmfApplyGoodsClassBeforeDeleteHooks, cmfApplyGoodsClassHook)
	case boil.BeforeUpsertHook:
		cmfApplyGoodsClassBeforeUpsertHooks = append(cmfApplyGoodsClassBeforeUpsertHooks, cmfApplyGoodsClassHook)
	case boil.AfterInsertHook:
		cmfApplyGoodsClassAfterInsertHooks = append(cmfApplyGoodsClassAfterInsertHooks, cmfApplyGoodsClassHook)
	case boil.AfterSelectHook:
		cmfApplyGoodsClassAfterSelectHooks = append(cmfApplyGoodsClassAfterSelectHooks, cmfApplyGoodsClassHook)
	case boil.AfterUpdateHook:
		cmfApplyGoodsClassAfterUpdateHooks = append(cmfApplyGoodsClassAfterUpdateHooks, cmfApplyGoodsClassHook)
	case boil.AfterDeleteHook:
		cmfApplyGoodsClassAfterDeleteHooks = append(cmfApplyGoodsClassAfterDeleteHooks, cmfApplyGoodsClassHook)
	case boil.AfterUpsertHook:
		cmfApplyGoodsClassAfterUpsertHooks = append(cmfApplyGoodsClassAfterUpsertHooks, cmfApplyGoodsClassHook)
	}
}

// One returns a single cmfApplyGoodsClass record from the query.
func (q cmfApplyGoodsClassQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFApplyGoodsClass, error) {
	o := &CMFApplyGoodsClass{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_apply_goods_class")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFApplyGoodsClass records from the query.
func (q cmfApplyGoodsClassQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFApplyGoodsClassSlice, error) {
	var o []*CMFApplyGoodsClass

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFApplyGoodsClass slice")
	}

	if len(cmfApplyGoodsClassAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFApplyGoodsClass records in the query.
func (q cmfApplyGoodsClassQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_apply_goods_class rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfApplyGoodsClassQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_apply_goods_class exists")
	}

	return count > 0, nil
}

// CMFApplyGoodsClasses retrieves all the records using an executor.
func CMFApplyGoodsClasses(mods ...qm.QueryMod) cmfApplyGoodsClassQuery {
	mods = append(mods, qm.From("`cmf_apply_goods_class`"))
	return cmfApplyGoodsClassQuery{NewQuery(mods...)}
}

// FindCMFApplyGoodsClass retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFApplyGoodsClass(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CMFApplyGoodsClass, error) {
	cmfApplyGoodsClassObj := &CMFApplyGoodsClass{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_apply_goods_class` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfApplyGoodsClassObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_apply_goods_class")
	}

	return cmfApplyGoodsClassObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFApplyGoodsClass) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_apply_goods_class provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfApplyGoodsClassColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfApplyGoodsClassInsertCacheMut.RLock()
	cache, cached := cmfApplyGoodsClassInsertCache[key]
	cmfApplyGoodsClassInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfApplyGoodsClassAllColumns,
			cmfApplyGoodsClassColumnsWithDefault,
			cmfApplyGoodsClassColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfApplyGoodsClassType, cmfApplyGoodsClassMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfApplyGoodsClassType, cmfApplyGoodsClassMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_apply_goods_class` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_apply_goods_class` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_apply_goods_class` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfApplyGoodsClassPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_apply_goods_class")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfApplyGoodsClassMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_apply_goods_class")
	}

CacheNoHooks:
	if !cached {
		cmfApplyGoodsClassInsertCacheMut.Lock()
		cmfApplyGoodsClassInsertCache[key] = cache
		cmfApplyGoodsClassInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFApplyGoodsClass.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFApplyGoodsClass) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfApplyGoodsClassUpdateCacheMut.RLock()
	cache, cached := cmfApplyGoodsClassUpdateCache[key]
	cmfApplyGoodsClassUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfApplyGoodsClassAllColumns,
			cmfApplyGoodsClassPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_apply_goods_class, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_apply_goods_class` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfApplyGoodsClassPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfApplyGoodsClassType, cmfApplyGoodsClassMapping, append(wl, cmfApplyGoodsClassPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_apply_goods_class row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_apply_goods_class")
	}

	if !cached {
		cmfApplyGoodsClassUpdateCacheMut.Lock()
		cmfApplyGoodsClassUpdateCache[key] = cache
		cmfApplyGoodsClassUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfApplyGoodsClassQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_apply_goods_class")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_apply_goods_class")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFApplyGoodsClassSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfApplyGoodsClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_apply_goods_class` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfApplyGoodsClassPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfApplyGoodsClass slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfApplyGoodsClass")
	}
	return rowsAff, nil
}

var mySQLCMFApplyGoodsClassUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFApplyGoodsClass) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_apply_goods_class provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfApplyGoodsClassColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFApplyGoodsClassUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfApplyGoodsClassUpsertCacheMut.RLock()
	cache, cached := cmfApplyGoodsClassUpsertCache[key]
	cmfApplyGoodsClassUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfApplyGoodsClassAllColumns,
			cmfApplyGoodsClassColumnsWithDefault,
			cmfApplyGoodsClassColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfApplyGoodsClassAllColumns,
			cmfApplyGoodsClassPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_apply_goods_class, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_apply_goods_class`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_apply_goods_class` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfApplyGoodsClassType, cmfApplyGoodsClassMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfApplyGoodsClassType, cmfApplyGoodsClassMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_apply_goods_class")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfApplyGoodsClassMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfApplyGoodsClassType, cmfApplyGoodsClassMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_apply_goods_class")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_apply_goods_class")
	}

CacheNoHooks:
	if !cached {
		cmfApplyGoodsClassUpsertCacheMut.Lock()
		cmfApplyGoodsClassUpsertCache[key] = cache
		cmfApplyGoodsClassUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFApplyGoodsClass record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFApplyGoodsClass) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFApplyGoodsClass provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfApplyGoodsClassPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_apply_goods_class` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_apply_goods_class")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_apply_goods_class")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfApplyGoodsClassQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfApplyGoodsClassQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_apply_goods_class")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_apply_goods_class")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFApplyGoodsClassSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfApplyGoodsClassBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfApplyGoodsClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_apply_goods_class` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfApplyGoodsClassPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfApplyGoodsClass slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_apply_goods_class")
	}

	if len(cmfApplyGoodsClassAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFApplyGoodsClass) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFApplyGoodsClass(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFApplyGoodsClassSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFApplyGoodsClassSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfApplyGoodsClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_apply_goods_class`.* FROM `cmf_apply_goods_class` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfApplyGoodsClassPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFApplyGoodsClassSlice")
	}

	*o = slice

	return nil
}

// CMFApplyGoodsClassExists checks if the CMFApplyGoodsClass row exists.
func CMFApplyGoodsClassExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_apply_goods_class` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_apply_goods_class exists")
	}

	return exists, nil
}
