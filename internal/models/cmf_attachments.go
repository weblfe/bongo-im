// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFAttachment is an object representing the database table.
type CMFAttachment struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UploaderID  int64       `boil:"uploader_id" json:"uploader_id" toml:"uploader_id" yaml:"uploader_id"`
	UploadType  int16       `boil:"upload_type" json:"upload_type" toml:"upload_type" yaml:"upload_type"`
	Type        string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Size        int64       `boil:"size" json:"size" toml:"size" yaml:"size"`
	Filename    string      `boil:"filename" json:"filename" toml:"filename" yaml:"filename"`
	Hash        null.String `boil:"hash" json:"hash,omitempty" toml:"hash" yaml:"hash,omitempty"`
	Path        null.String `boil:"path" json:"path,omitempty" toml:"path" yaml:"path,omitempty"`
	URL         null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	Tag         null.String `boil:"tag" json:"tag,omitempty" toml:"tag" yaml:"tag,omitempty"`
	StorageType string      `boil:"storage_type" json:"storage_type" toml:"storage_type" yaml:"storage_type"`
	Module      string      `boil:"module" json:"module" toml:"module" yaml:"module"`
	CreateTime  time.Time   `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`

	R *cmfAttachmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfAttachmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFAttachmentColumns = struct {
	ID          string
	UploaderID  string
	UploadType  string
	Type        string
	Size        string
	Filename    string
	Hash        string
	Path        string
	URL         string
	Tag         string
	StorageType string
	Module      string
	CreateTime  string
}{
	ID:          "id",
	UploaderID:  "uploader_id",
	UploadType:  "upload_type",
	Type:        "type",
	Size:        "size",
	Filename:    "filename",
	Hash:        "hash",
	Path:        "path",
	URL:         "url",
	Tag:         "tag",
	StorageType: "storage_type",
	Module:      "module",
	CreateTime:  "create_time",
}

// Generated where

var CMFAttachmentWhere = struct {
	ID          whereHelperint64
	UploaderID  whereHelperint64
	UploadType  whereHelperint16
	Type        whereHelperstring
	Size        whereHelperint64
	Filename    whereHelperstring
	Hash        whereHelpernull_String
	Path        whereHelpernull_String
	URL         whereHelpernull_String
	Tag         whereHelpernull_String
	StorageType whereHelperstring
	Module      whereHelperstring
	CreateTime  whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "`cmf_attachments`.`id`"},
	UploaderID:  whereHelperint64{field: "`cmf_attachments`.`uploader_id`"},
	UploadType:  whereHelperint16{field: "`cmf_attachments`.`upload_type`"},
	Type:        whereHelperstring{field: "`cmf_attachments`.`type`"},
	Size:        whereHelperint64{field: "`cmf_attachments`.`size`"},
	Filename:    whereHelperstring{field: "`cmf_attachments`.`filename`"},
	Hash:        whereHelpernull_String{field: "`cmf_attachments`.`hash`"},
	Path:        whereHelpernull_String{field: "`cmf_attachments`.`path`"},
	URL:         whereHelpernull_String{field: "`cmf_attachments`.`url`"},
	Tag:         whereHelpernull_String{field: "`cmf_attachments`.`tag`"},
	StorageType: whereHelperstring{field: "`cmf_attachments`.`storage_type`"},
	Module:      whereHelperstring{field: "`cmf_attachments`.`module`"},
	CreateTime:  whereHelpertime_Time{field: "`cmf_attachments`.`create_time`"},
}

// CMFAttachmentRels is where relationship names are stored.
var CMFAttachmentRels = struct {
}{}

// cmfAttachmentR is where relationships are stored.
type cmfAttachmentR struct {
}

// NewStruct creates a new relationship struct
func (*cmfAttachmentR) NewStruct() *cmfAttachmentR {
	return &cmfAttachmentR{}
}

// cmfAttachmentL is where Load methods for each relationship are stored.
type cmfAttachmentL struct{}

var (
	cmfAttachmentAllColumns            = []string{"id", "uploader_id", "upload_type", "type", "size", "filename", "hash", "path", "url", "tag", "storage_type", "module", "create_time"}
	cmfAttachmentColumnsWithoutDefault = []string{"uploader_id", "upload_type", "type", "size", "filename", "hash", "path", "url", "tag", "storage_type", "module", "create_time"}
	cmfAttachmentColumnsWithDefault    = []string{"id"}
	cmfAttachmentPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFAttachmentSlice is an alias for a slice of pointers to CMFAttachment.
	// This should generally be used opposed to []CMFAttachment.
	CMFAttachmentSlice []*CMFAttachment
	// CMFAttachmentHook is the signature for custom CMFAttachment hook methods
	CMFAttachmentHook func(context.Context, boil.ContextExecutor, *CMFAttachment) error

	cmfAttachmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfAttachmentType                 = reflect.TypeOf(&CMFAttachment{})
	cmfAttachmentMapping              = queries.MakeStructMapping(cmfAttachmentType)
	cmfAttachmentPrimaryKeyMapping, _ = queries.BindMapping(cmfAttachmentType, cmfAttachmentMapping, cmfAttachmentPrimaryKeyColumns)
	cmfAttachmentInsertCacheMut       sync.RWMutex
	cmfAttachmentInsertCache          = make(map[string]insertCache)
	cmfAttachmentUpdateCacheMut       sync.RWMutex
	cmfAttachmentUpdateCache          = make(map[string]updateCache)
	cmfAttachmentUpsertCacheMut       sync.RWMutex
	cmfAttachmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfAttachmentBeforeInsertHooks []CMFAttachmentHook
var cmfAttachmentBeforeUpdateHooks []CMFAttachmentHook
var cmfAttachmentBeforeDeleteHooks []CMFAttachmentHook
var cmfAttachmentBeforeUpsertHooks []CMFAttachmentHook

var cmfAttachmentAfterInsertHooks []CMFAttachmentHook
var cmfAttachmentAfterSelectHooks []CMFAttachmentHook
var cmfAttachmentAfterUpdateHooks []CMFAttachmentHook
var cmfAttachmentAfterDeleteHooks []CMFAttachmentHook
var cmfAttachmentAfterUpsertHooks []CMFAttachmentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFAttachment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAttachmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFAttachment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAttachmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFAttachment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAttachmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFAttachment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAttachmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFAttachment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAttachmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFAttachment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAttachmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFAttachment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAttachmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFAttachment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAttachmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFAttachment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfAttachmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFAttachmentHook registers your hook function for all future operations.
func AddCMFAttachmentHook(hookPoint boil.HookPoint, cmfAttachmentHook CMFAttachmentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfAttachmentBeforeInsertHooks = append(cmfAttachmentBeforeInsertHooks, cmfAttachmentHook)
	case boil.BeforeUpdateHook:
		cmfAttachmentBeforeUpdateHooks = append(cmfAttachmentBeforeUpdateHooks, cmfAttachmentHook)
	case boil.BeforeDeleteHook:
		cmfAttachmentBeforeDeleteHooks = append(cmfAttachmentBeforeDeleteHooks, cmfAttachmentHook)
	case boil.BeforeUpsertHook:
		cmfAttachmentBeforeUpsertHooks = append(cmfAttachmentBeforeUpsertHooks, cmfAttachmentHook)
	case boil.AfterInsertHook:
		cmfAttachmentAfterInsertHooks = append(cmfAttachmentAfterInsertHooks, cmfAttachmentHook)
	case boil.AfterSelectHook:
		cmfAttachmentAfterSelectHooks = append(cmfAttachmentAfterSelectHooks, cmfAttachmentHook)
	case boil.AfterUpdateHook:
		cmfAttachmentAfterUpdateHooks = append(cmfAttachmentAfterUpdateHooks, cmfAttachmentHook)
	case boil.AfterDeleteHook:
		cmfAttachmentAfterDeleteHooks = append(cmfAttachmentAfterDeleteHooks, cmfAttachmentHook)
	case boil.AfterUpsertHook:
		cmfAttachmentAfterUpsertHooks = append(cmfAttachmentAfterUpsertHooks, cmfAttachmentHook)
	}
}

// One returns a single cmfAttachment record from the query.
func (q cmfAttachmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFAttachment, error) {
	o := &CMFAttachment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_attachments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFAttachment records from the query.
func (q cmfAttachmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFAttachmentSlice, error) {
	var o []*CMFAttachment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFAttachment slice")
	}

	if len(cmfAttachmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFAttachment records in the query.
func (q cmfAttachmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_attachments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfAttachmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_attachments exists")
	}

	return count > 0, nil
}

// CMFAttachments retrieves all the records using an executor.
func CMFAttachments(mods ...qm.QueryMod) cmfAttachmentQuery {
	mods = append(mods, qm.From("`cmf_attachments`"))
	return cmfAttachmentQuery{NewQuery(mods...)}
}

// FindCMFAttachment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFAttachment(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFAttachment, error) {
	cmfAttachmentObj := &CMFAttachment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_attachments` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfAttachmentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_attachments")
	}

	return cmfAttachmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFAttachment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_attachments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfAttachmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfAttachmentInsertCacheMut.RLock()
	cache, cached := cmfAttachmentInsertCache[key]
	cmfAttachmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfAttachmentAllColumns,
			cmfAttachmentColumnsWithDefault,
			cmfAttachmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfAttachmentType, cmfAttachmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfAttachmentType, cmfAttachmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_attachments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_attachments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_attachments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfAttachmentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_attachments")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfAttachmentMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_attachments")
	}

CacheNoHooks:
	if !cached {
		cmfAttachmentInsertCacheMut.Lock()
		cmfAttachmentInsertCache[key] = cache
		cmfAttachmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFAttachment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFAttachment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfAttachmentUpdateCacheMut.RLock()
	cache, cached := cmfAttachmentUpdateCache[key]
	cmfAttachmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfAttachmentAllColumns,
			cmfAttachmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_attachments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_attachments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfAttachmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfAttachmentType, cmfAttachmentMapping, append(wl, cmfAttachmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_attachments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_attachments")
	}

	if !cached {
		cmfAttachmentUpdateCacheMut.Lock()
		cmfAttachmentUpdateCache[key] = cache
		cmfAttachmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfAttachmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_attachments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_attachments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFAttachmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfAttachmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_attachments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfAttachmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfAttachment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfAttachment")
	}
	return rowsAff, nil
}

var mySQLCMFAttachmentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFAttachment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_attachments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfAttachmentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFAttachmentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfAttachmentUpsertCacheMut.RLock()
	cache, cached := cmfAttachmentUpsertCache[key]
	cmfAttachmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfAttachmentAllColumns,
			cmfAttachmentColumnsWithDefault,
			cmfAttachmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfAttachmentAllColumns,
			cmfAttachmentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_attachments, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_attachments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_attachments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfAttachmentType, cmfAttachmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfAttachmentType, cmfAttachmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_attachments")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfAttachmentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfAttachmentType, cmfAttachmentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_attachments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_attachments")
	}

CacheNoHooks:
	if !cached {
		cmfAttachmentUpsertCacheMut.Lock()
		cmfAttachmentUpsertCache[key] = cache
		cmfAttachmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFAttachment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFAttachment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFAttachment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfAttachmentPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_attachments` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_attachments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_attachments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfAttachmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfAttachmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_attachments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_attachments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFAttachmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfAttachmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfAttachmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_attachments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfAttachmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfAttachment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_attachments")
	}

	if len(cmfAttachmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFAttachment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFAttachment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFAttachmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFAttachmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfAttachmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_attachments`.* FROM `cmf_attachments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfAttachmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFAttachmentSlice")
	}

	*o = slice

	return nil
}

// CMFAttachmentExists checks if the CMFAttachment row exists.
func CMFAttachmentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_attachments` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_attachments exists")
	}

	return exists, nil
}
