// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFCarPrice is an object representing the database table.
type CMFCarPrice struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CarID      int       `boil:"car_id" json:"car_id" toml:"car_id" yaml:"car_id"`
	Sku        string    `boil:"sku" json:"sku" toml:"sku" yaml:"sku"`
	Name       string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Day        int       `boil:"day" json:"day" toml:"day" yaml:"day"`
	Discount   string    `boil:"discount" json:"discount" toml:"discount" yaml:"discount"`
	Status     int16     `boil:"status" json:"status" toml:"status" yaml:"status"`
	CoinPrice  int       `boil:"coin_price" json:"coin_price" toml:"coin_price" yaml:"coin_price"`
	ScorePrice int       `boil:"score_price" json:"score_price" toml:"score_price" yaml:"score_price"`
	CreateTime time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`

	R *cmfCarPriceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfCarPriceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFCarPriceColumns = struct {
	ID         string
	CarID      string
	Sku        string
	Name       string
	Day        string
	Discount   string
	Status     string
	CoinPrice  string
	ScorePrice string
	CreateTime string
}{
	ID:         "id",
	CarID:      "car_id",
	Sku:        "sku",
	Name:       "name",
	Day:        "day",
	Discount:   "discount",
	Status:     "status",
	CoinPrice:  "coin_price",
	ScorePrice: "score_price",
	CreateTime: "create_time",
}

// Generated where

var CMFCarPriceWhere = struct {
	ID         whereHelperint64
	CarID      whereHelperint
	Sku        whereHelperstring
	Name       whereHelperstring
	Day        whereHelperint
	Discount   whereHelperstring
	Status     whereHelperint16
	CoinPrice  whereHelperint
	ScorePrice whereHelperint
	CreateTime whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "`cmf_car_prices`.`id`"},
	CarID:      whereHelperint{field: "`cmf_car_prices`.`car_id`"},
	Sku:        whereHelperstring{field: "`cmf_car_prices`.`sku`"},
	Name:       whereHelperstring{field: "`cmf_car_prices`.`name`"},
	Day:        whereHelperint{field: "`cmf_car_prices`.`day`"},
	Discount:   whereHelperstring{field: "`cmf_car_prices`.`discount`"},
	Status:     whereHelperint16{field: "`cmf_car_prices`.`status`"},
	CoinPrice:  whereHelperint{field: "`cmf_car_prices`.`coin_price`"},
	ScorePrice: whereHelperint{field: "`cmf_car_prices`.`score_price`"},
	CreateTime: whereHelpertime_Time{field: "`cmf_car_prices`.`create_time`"},
}

// CMFCarPriceRels is where relationship names are stored.
var CMFCarPriceRels = struct {
}{}

// cmfCarPriceR is where relationships are stored.
type cmfCarPriceR struct {
}

// NewStruct creates a new relationship struct
func (*cmfCarPriceR) NewStruct() *cmfCarPriceR {
	return &cmfCarPriceR{}
}

// cmfCarPriceL is where Load methods for each relationship are stored.
type cmfCarPriceL struct{}

var (
	cmfCarPriceAllColumns            = []string{"id", "car_id", "sku", "name", "day", "discount", "status", "coin_price", "score_price", "create_time"}
	cmfCarPriceColumnsWithoutDefault = []string{"car_id", "sku", "name", "day", "discount", "coin_price", "score_price", "create_time"}
	cmfCarPriceColumnsWithDefault    = []string{"id", "status"}
	cmfCarPricePrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFCarPriceSlice is an alias for a slice of pointers to CMFCarPrice.
	// This should generally be used opposed to []CMFCarPrice.
	CMFCarPriceSlice []*CMFCarPrice
	// CMFCarPriceHook is the signature for custom CMFCarPrice hook methods
	CMFCarPriceHook func(context.Context, boil.ContextExecutor, *CMFCarPrice) error

	cmfCarPriceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfCarPriceType                 = reflect.TypeOf(&CMFCarPrice{})
	cmfCarPriceMapping              = queries.MakeStructMapping(cmfCarPriceType)
	cmfCarPricePrimaryKeyMapping, _ = queries.BindMapping(cmfCarPriceType, cmfCarPriceMapping, cmfCarPricePrimaryKeyColumns)
	cmfCarPriceInsertCacheMut       sync.RWMutex
	cmfCarPriceInsertCache          = make(map[string]insertCache)
	cmfCarPriceUpdateCacheMut       sync.RWMutex
	cmfCarPriceUpdateCache          = make(map[string]updateCache)
	cmfCarPriceUpsertCacheMut       sync.RWMutex
	cmfCarPriceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfCarPriceBeforeInsertHooks []CMFCarPriceHook
var cmfCarPriceBeforeUpdateHooks []CMFCarPriceHook
var cmfCarPriceBeforeDeleteHooks []CMFCarPriceHook
var cmfCarPriceBeforeUpsertHooks []CMFCarPriceHook

var cmfCarPriceAfterInsertHooks []CMFCarPriceHook
var cmfCarPriceAfterSelectHooks []CMFCarPriceHook
var cmfCarPriceAfterUpdateHooks []CMFCarPriceHook
var cmfCarPriceAfterDeleteHooks []CMFCarPriceHook
var cmfCarPriceAfterUpsertHooks []CMFCarPriceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFCarPrice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCarPriceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFCarPrice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCarPriceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFCarPrice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCarPriceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFCarPrice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCarPriceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFCarPrice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCarPriceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFCarPrice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCarPriceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFCarPrice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCarPriceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFCarPrice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCarPriceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFCarPrice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCarPriceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFCarPriceHook registers your hook function for all future operations.
func AddCMFCarPriceHook(hookPoint boil.HookPoint, cmfCarPriceHook CMFCarPriceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfCarPriceBeforeInsertHooks = append(cmfCarPriceBeforeInsertHooks, cmfCarPriceHook)
	case boil.BeforeUpdateHook:
		cmfCarPriceBeforeUpdateHooks = append(cmfCarPriceBeforeUpdateHooks, cmfCarPriceHook)
	case boil.BeforeDeleteHook:
		cmfCarPriceBeforeDeleteHooks = append(cmfCarPriceBeforeDeleteHooks, cmfCarPriceHook)
	case boil.BeforeUpsertHook:
		cmfCarPriceBeforeUpsertHooks = append(cmfCarPriceBeforeUpsertHooks, cmfCarPriceHook)
	case boil.AfterInsertHook:
		cmfCarPriceAfterInsertHooks = append(cmfCarPriceAfterInsertHooks, cmfCarPriceHook)
	case boil.AfterSelectHook:
		cmfCarPriceAfterSelectHooks = append(cmfCarPriceAfterSelectHooks, cmfCarPriceHook)
	case boil.AfterUpdateHook:
		cmfCarPriceAfterUpdateHooks = append(cmfCarPriceAfterUpdateHooks, cmfCarPriceHook)
	case boil.AfterDeleteHook:
		cmfCarPriceAfterDeleteHooks = append(cmfCarPriceAfterDeleteHooks, cmfCarPriceHook)
	case boil.AfterUpsertHook:
		cmfCarPriceAfterUpsertHooks = append(cmfCarPriceAfterUpsertHooks, cmfCarPriceHook)
	}
}

// One returns a single cmfCarPrice record from the query.
func (q cmfCarPriceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFCarPrice, error) {
	o := &CMFCarPrice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_car_prices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFCarPrice records from the query.
func (q cmfCarPriceQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFCarPriceSlice, error) {
	var o []*CMFCarPrice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFCarPrice slice")
	}

	if len(cmfCarPriceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFCarPrice records in the query.
func (q cmfCarPriceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_car_prices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfCarPriceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_car_prices exists")
	}

	return count > 0, nil
}

// CMFCarPrices retrieves all the records using an executor.
func CMFCarPrices(mods ...qm.QueryMod) cmfCarPriceQuery {
	mods = append(mods, qm.From("`cmf_car_prices`"))
	return cmfCarPriceQuery{NewQuery(mods...)}
}

// FindCMFCarPrice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFCarPrice(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFCarPrice, error) {
	cmfCarPriceObj := &CMFCarPrice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_car_prices` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfCarPriceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_car_prices")
	}

	return cmfCarPriceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFCarPrice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_car_prices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfCarPriceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfCarPriceInsertCacheMut.RLock()
	cache, cached := cmfCarPriceInsertCache[key]
	cmfCarPriceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfCarPriceAllColumns,
			cmfCarPriceColumnsWithDefault,
			cmfCarPriceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfCarPriceType, cmfCarPriceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfCarPriceType, cmfCarPriceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_car_prices` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_car_prices` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_car_prices` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfCarPricePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_car_prices")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfCarPriceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_car_prices")
	}

CacheNoHooks:
	if !cached {
		cmfCarPriceInsertCacheMut.Lock()
		cmfCarPriceInsertCache[key] = cache
		cmfCarPriceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFCarPrice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFCarPrice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfCarPriceUpdateCacheMut.RLock()
	cache, cached := cmfCarPriceUpdateCache[key]
	cmfCarPriceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfCarPriceAllColumns,
			cmfCarPricePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_car_prices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_car_prices` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfCarPricePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfCarPriceType, cmfCarPriceMapping, append(wl, cmfCarPricePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_car_prices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_car_prices")
	}

	if !cached {
		cmfCarPriceUpdateCacheMut.Lock()
		cmfCarPriceUpdateCache[key] = cache
		cmfCarPriceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfCarPriceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_car_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_car_prices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFCarPriceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfCarPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_car_prices` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfCarPricePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfCarPrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfCarPrice")
	}
	return rowsAff, nil
}

var mySQLCMFCarPriceUniqueColumns = []string{
	"id",
	"sku",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFCarPrice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_car_prices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfCarPriceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFCarPriceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfCarPriceUpsertCacheMut.RLock()
	cache, cached := cmfCarPriceUpsertCache[key]
	cmfCarPriceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfCarPriceAllColumns,
			cmfCarPriceColumnsWithDefault,
			cmfCarPriceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfCarPriceAllColumns,
			cmfCarPricePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_car_prices, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_car_prices`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_car_prices` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfCarPriceType, cmfCarPriceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfCarPriceType, cmfCarPriceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_car_prices")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfCarPriceMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfCarPriceType, cmfCarPriceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_car_prices")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_car_prices")
	}

CacheNoHooks:
	if !cached {
		cmfCarPriceUpsertCacheMut.Lock()
		cmfCarPriceUpsertCache[key] = cache
		cmfCarPriceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFCarPrice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFCarPrice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFCarPrice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfCarPricePrimaryKeyMapping)
	sql := "DELETE FROM `cmf_car_prices` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_car_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_car_prices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfCarPriceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfCarPriceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_car_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_car_prices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFCarPriceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfCarPriceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfCarPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_car_prices` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfCarPricePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfCarPrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_car_prices")
	}

	if len(cmfCarPriceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFCarPrice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFCarPrice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFCarPriceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFCarPriceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfCarPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_car_prices`.* FROM `cmf_car_prices` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfCarPricePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFCarPriceSlice")
	}

	*o = slice

	return nil
}

// CMFCarPriceExists checks if the CMFCarPrice row exists.
func CMFCarPriceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_car_prices` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_car_prices exists")
	}

	return exists, nil
}
