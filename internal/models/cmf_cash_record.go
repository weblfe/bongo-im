// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CMFCashRecord is an object representing the database table.
type CMFCashRecord struct {
	ID          uint          `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID         int           `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Money       types.Decimal `boil:"money" json:"money" toml:"money" yaml:"money"`
	Votes       int           `boil:"votes" json:"votes" toml:"votes" yaml:"votes"`
	Orderno     string        `boil:"orderno" json:"orderno" toml:"orderno" yaml:"orderno"`
	TradeNo     string        `boil:"trade_no" json:"trade_no" toml:"trade_no" yaml:"trade_no"`
	Status      bool          `boil:"status" json:"status" toml:"status" yaml:"status"`
	Addtime     int           `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Uptime      int           `boil:"uptime" json:"uptime" toml:"uptime" yaml:"uptime"`
	Type        bool          `boil:"type" json:"type" toml:"type" yaml:"type"`
	AccountBank string        `boil:"account_bank" json:"account_bank" toml:"account_bank" yaml:"account_bank"`
	Account     string        `boil:"account" json:"account" toml:"account" yaml:"account"`
	Name        string        `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *cmfCashRecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfCashRecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFCashRecordColumns = struct {
	ID          string
	UID         string
	Money       string
	Votes       string
	Orderno     string
	TradeNo     string
	Status      string
	Addtime     string
	Uptime      string
	Type        string
	AccountBank string
	Account     string
	Name        string
}{
	ID:          "id",
	UID:         "uid",
	Money:       "money",
	Votes:       "votes",
	Orderno:     "orderno",
	TradeNo:     "trade_no",
	Status:      "status",
	Addtime:     "addtime",
	Uptime:      "uptime",
	Type:        "type",
	AccountBank: "account_bank",
	Account:     "account",
	Name:        "name",
}

// Generated where

var CMFCashRecordWhere = struct {
	ID          whereHelperuint
	UID         whereHelperint
	Money       whereHelpertypes_Decimal
	Votes       whereHelperint
	Orderno     whereHelperstring
	TradeNo     whereHelperstring
	Status      whereHelperbool
	Addtime     whereHelperint
	Uptime      whereHelperint
	Type        whereHelperbool
	AccountBank whereHelperstring
	Account     whereHelperstring
	Name        whereHelperstring
}{
	ID:          whereHelperuint{field: "`cmf_cash_record`.`id`"},
	UID:         whereHelperint{field: "`cmf_cash_record`.`uid`"},
	Money:       whereHelpertypes_Decimal{field: "`cmf_cash_record`.`money`"},
	Votes:       whereHelperint{field: "`cmf_cash_record`.`votes`"},
	Orderno:     whereHelperstring{field: "`cmf_cash_record`.`orderno`"},
	TradeNo:     whereHelperstring{field: "`cmf_cash_record`.`trade_no`"},
	Status:      whereHelperbool{field: "`cmf_cash_record`.`status`"},
	Addtime:     whereHelperint{field: "`cmf_cash_record`.`addtime`"},
	Uptime:      whereHelperint{field: "`cmf_cash_record`.`uptime`"},
	Type:        whereHelperbool{field: "`cmf_cash_record`.`type`"},
	AccountBank: whereHelperstring{field: "`cmf_cash_record`.`account_bank`"},
	Account:     whereHelperstring{field: "`cmf_cash_record`.`account`"},
	Name:        whereHelperstring{field: "`cmf_cash_record`.`name`"},
}

// CMFCashRecordRels is where relationship names are stored.
var CMFCashRecordRels = struct {
}{}

// cmfCashRecordR is where relationships are stored.
type cmfCashRecordR struct {
}

// NewStruct creates a new relationship struct
func (*cmfCashRecordR) NewStruct() *cmfCashRecordR {
	return &cmfCashRecordR{}
}

// cmfCashRecordL is where Load methods for each relationship are stored.
type cmfCashRecordL struct{}

var (
	cmfCashRecordAllColumns            = []string{"id", "uid", "money", "votes", "orderno", "trade_no", "status", "addtime", "uptime", "type", "account_bank", "account", "name"}
	cmfCashRecordColumnsWithoutDefault = []string{"orderno", "trade_no", "account_bank", "account", "name"}
	cmfCashRecordColumnsWithDefault    = []string{"id", "uid", "money", "votes", "status", "addtime", "uptime", "type"}
	cmfCashRecordPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFCashRecordSlice is an alias for a slice of pointers to CMFCashRecord.
	// This should generally be used opposed to []CMFCashRecord.
	CMFCashRecordSlice []*CMFCashRecord
	// CMFCashRecordHook is the signature for custom CMFCashRecord hook methods
	CMFCashRecordHook func(context.Context, boil.ContextExecutor, *CMFCashRecord) error

	cmfCashRecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfCashRecordType                 = reflect.TypeOf(&CMFCashRecord{})
	cmfCashRecordMapping              = queries.MakeStructMapping(cmfCashRecordType)
	cmfCashRecordPrimaryKeyMapping, _ = queries.BindMapping(cmfCashRecordType, cmfCashRecordMapping, cmfCashRecordPrimaryKeyColumns)
	cmfCashRecordInsertCacheMut       sync.RWMutex
	cmfCashRecordInsertCache          = make(map[string]insertCache)
	cmfCashRecordUpdateCacheMut       sync.RWMutex
	cmfCashRecordUpdateCache          = make(map[string]updateCache)
	cmfCashRecordUpsertCacheMut       sync.RWMutex
	cmfCashRecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfCashRecordBeforeInsertHooks []CMFCashRecordHook
var cmfCashRecordBeforeUpdateHooks []CMFCashRecordHook
var cmfCashRecordBeforeDeleteHooks []CMFCashRecordHook
var cmfCashRecordBeforeUpsertHooks []CMFCashRecordHook

var cmfCashRecordAfterInsertHooks []CMFCashRecordHook
var cmfCashRecordAfterSelectHooks []CMFCashRecordHook
var cmfCashRecordAfterUpdateHooks []CMFCashRecordHook
var cmfCashRecordAfterDeleteHooks []CMFCashRecordHook
var cmfCashRecordAfterUpsertHooks []CMFCashRecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFCashRecord) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCashRecordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFCashRecord) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCashRecordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFCashRecord) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCashRecordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFCashRecord) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCashRecordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFCashRecord) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCashRecordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFCashRecord) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCashRecordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFCashRecord) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCashRecordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFCashRecord) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCashRecordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFCashRecord) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfCashRecordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFCashRecordHook registers your hook function for all future operations.
func AddCMFCashRecordHook(hookPoint boil.HookPoint, cmfCashRecordHook CMFCashRecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfCashRecordBeforeInsertHooks = append(cmfCashRecordBeforeInsertHooks, cmfCashRecordHook)
	case boil.BeforeUpdateHook:
		cmfCashRecordBeforeUpdateHooks = append(cmfCashRecordBeforeUpdateHooks, cmfCashRecordHook)
	case boil.BeforeDeleteHook:
		cmfCashRecordBeforeDeleteHooks = append(cmfCashRecordBeforeDeleteHooks, cmfCashRecordHook)
	case boil.BeforeUpsertHook:
		cmfCashRecordBeforeUpsertHooks = append(cmfCashRecordBeforeUpsertHooks, cmfCashRecordHook)
	case boil.AfterInsertHook:
		cmfCashRecordAfterInsertHooks = append(cmfCashRecordAfterInsertHooks, cmfCashRecordHook)
	case boil.AfterSelectHook:
		cmfCashRecordAfterSelectHooks = append(cmfCashRecordAfterSelectHooks, cmfCashRecordHook)
	case boil.AfterUpdateHook:
		cmfCashRecordAfterUpdateHooks = append(cmfCashRecordAfterUpdateHooks, cmfCashRecordHook)
	case boil.AfterDeleteHook:
		cmfCashRecordAfterDeleteHooks = append(cmfCashRecordAfterDeleteHooks, cmfCashRecordHook)
	case boil.AfterUpsertHook:
		cmfCashRecordAfterUpsertHooks = append(cmfCashRecordAfterUpsertHooks, cmfCashRecordHook)
	}
}

// One returns a single cmfCashRecord record from the query.
func (q cmfCashRecordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFCashRecord, error) {
	o := &CMFCashRecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_cash_record")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFCashRecord records from the query.
func (q cmfCashRecordQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFCashRecordSlice, error) {
	var o []*CMFCashRecord

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFCashRecord slice")
	}

	if len(cmfCashRecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFCashRecord records in the query.
func (q cmfCashRecordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_cash_record rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfCashRecordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_cash_record exists")
	}

	return count > 0, nil
}

// CMFCashRecords retrieves all the records using an executor.
func CMFCashRecords(mods ...qm.QueryMod) cmfCashRecordQuery {
	mods = append(mods, qm.From("`cmf_cash_record`"))
	return cmfCashRecordQuery{NewQuery(mods...)}
}

// FindCMFCashRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFCashRecord(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFCashRecord, error) {
	cmfCashRecordObj := &CMFCashRecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_cash_record` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfCashRecordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_cash_record")
	}

	return cmfCashRecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFCashRecord) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_cash_record provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfCashRecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfCashRecordInsertCacheMut.RLock()
	cache, cached := cmfCashRecordInsertCache[key]
	cmfCashRecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfCashRecordAllColumns,
			cmfCashRecordColumnsWithDefault,
			cmfCashRecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfCashRecordType, cmfCashRecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfCashRecordType, cmfCashRecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_cash_record` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_cash_record` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_cash_record` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfCashRecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_cash_record")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfCashRecordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_cash_record")
	}

CacheNoHooks:
	if !cached {
		cmfCashRecordInsertCacheMut.Lock()
		cmfCashRecordInsertCache[key] = cache
		cmfCashRecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFCashRecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFCashRecord) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfCashRecordUpdateCacheMut.RLock()
	cache, cached := cmfCashRecordUpdateCache[key]
	cmfCashRecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfCashRecordAllColumns,
			cmfCashRecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_cash_record, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_cash_record` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfCashRecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfCashRecordType, cmfCashRecordMapping, append(wl, cmfCashRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_cash_record row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_cash_record")
	}

	if !cached {
		cmfCashRecordUpdateCacheMut.Lock()
		cmfCashRecordUpdateCache[key] = cache
		cmfCashRecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfCashRecordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_cash_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_cash_record")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFCashRecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfCashRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_cash_record` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfCashRecordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfCashRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfCashRecord")
	}
	return rowsAff, nil
}

var mySQLCMFCashRecordUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFCashRecord) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_cash_record provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfCashRecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFCashRecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfCashRecordUpsertCacheMut.RLock()
	cache, cached := cmfCashRecordUpsertCache[key]
	cmfCashRecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfCashRecordAllColumns,
			cmfCashRecordColumnsWithDefault,
			cmfCashRecordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfCashRecordAllColumns,
			cmfCashRecordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_cash_record, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_cash_record`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_cash_record` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfCashRecordType, cmfCashRecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfCashRecordType, cmfCashRecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_cash_record")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfCashRecordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfCashRecordType, cmfCashRecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_cash_record")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_cash_record")
	}

CacheNoHooks:
	if !cached {
		cmfCashRecordUpsertCacheMut.Lock()
		cmfCashRecordUpsertCache[key] = cache
		cmfCashRecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFCashRecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFCashRecord) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFCashRecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfCashRecordPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_cash_record` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_cash_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_cash_record")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfCashRecordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfCashRecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_cash_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_cash_record")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFCashRecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfCashRecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfCashRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_cash_record` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfCashRecordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfCashRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_cash_record")
	}

	if len(cmfCashRecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFCashRecord) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFCashRecord(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFCashRecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFCashRecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfCashRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_cash_record`.* FROM `cmf_cash_record` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfCashRecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFCashRecordSlice")
	}

	*o = slice

	return nil
}

// CMFCashRecordExists checks if the CMFCashRecord row exists.
func CMFCashRecordExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_cash_record` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_cash_record exists")
	}

	return exists, nil
}
