// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CMFChargeRule is an object representing the database table.
type CMFChargeRule struct {
	ID          uint          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	Coin        int           `boil:"coin" json:"coin" toml:"coin" yaml:"coin"`
	CoinIos     int           `boil:"coin_ios" json:"coin_ios" toml:"coin_ios" yaml:"coin_ios"`
	Money       types.Decimal `boil:"money" json:"money" toml:"money" yaml:"money"`
	ProductID   string        `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	IDR         types.Decimal `boil:"IDR" json:"IDR" toml:"IDR" yaml:"IDR"`
	CNY         types.Decimal `boil:"CNY" json:"CNY" toml:"CNY" yaml:"CNY"`
	USD         types.Decimal `boil:"USD" json:"USD" toml:"USD" yaml:"USD"`
	HKD         types.Decimal `boil:"HKD" json:"HKD" toml:"HKD" yaml:"HKD"`
	Currency    string        `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Give        int           `boil:"give" json:"give" toml:"give" yaml:"give"`
	ListOrder   int           `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`
	Addtime     int           `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	ChannelName string        `boil:"channel_name" json:"channel_name" toml:"channel_name" yaml:"channel_name"`

	R *cmfChargeRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfChargeRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFChargeRuleColumns = struct {
	ID          string
	Name        string
	Coin        string
	CoinIos     string
	Money       string
	ProductID   string
	IDR         string
	CNY         string
	USD         string
	HKD         string
	Currency    string
	Give        string
	ListOrder   string
	Addtime     string
	ChannelName string
}{
	ID:          "id",
	Name:        "name",
	Coin:        "coin",
	CoinIos:     "coin_ios",
	Money:       "money",
	ProductID:   "product_id",
	IDR:         "IDR",
	CNY:         "CNY",
	USD:         "USD",
	HKD:         "HKD",
	Currency:    "currency",
	Give:        "give",
	ListOrder:   "list_order",
	Addtime:     "addtime",
	ChannelName: "channel_name",
}

// Generated where

var CMFChargeRuleWhere = struct {
	ID          whereHelperuint
	Name        whereHelperstring
	Coin        whereHelperint
	CoinIos     whereHelperint
	Money       whereHelpertypes_Decimal
	ProductID   whereHelperstring
	IDR         whereHelpertypes_Decimal
	CNY         whereHelpertypes_Decimal
	USD         whereHelpertypes_Decimal
	HKD         whereHelpertypes_Decimal
	Currency    whereHelperstring
	Give        whereHelperint
	ListOrder   whereHelperint
	Addtime     whereHelperint
	ChannelName whereHelperstring
}{
	ID:          whereHelperuint{field: "`cmf_charge_rules`.`id`"},
	Name:        whereHelperstring{field: "`cmf_charge_rules`.`name`"},
	Coin:        whereHelperint{field: "`cmf_charge_rules`.`coin`"},
	CoinIos:     whereHelperint{field: "`cmf_charge_rules`.`coin_ios`"},
	Money:       whereHelpertypes_Decimal{field: "`cmf_charge_rules`.`money`"},
	ProductID:   whereHelperstring{field: "`cmf_charge_rules`.`product_id`"},
	IDR:         whereHelpertypes_Decimal{field: "`cmf_charge_rules`.`IDR`"},
	CNY:         whereHelpertypes_Decimal{field: "`cmf_charge_rules`.`CNY`"},
	USD:         whereHelpertypes_Decimal{field: "`cmf_charge_rules`.`USD`"},
	HKD:         whereHelpertypes_Decimal{field: "`cmf_charge_rules`.`HKD`"},
	Currency:    whereHelperstring{field: "`cmf_charge_rules`.`currency`"},
	Give:        whereHelperint{field: "`cmf_charge_rules`.`give`"},
	ListOrder:   whereHelperint{field: "`cmf_charge_rules`.`list_order`"},
	Addtime:     whereHelperint{field: "`cmf_charge_rules`.`addtime`"},
	ChannelName: whereHelperstring{field: "`cmf_charge_rules`.`channel_name`"},
}

// CMFChargeRuleRels is where relationship names are stored.
var CMFChargeRuleRels = struct {
}{}

// cmfChargeRuleR is where relationships are stored.
type cmfChargeRuleR struct {
}

// NewStruct creates a new relationship struct
func (*cmfChargeRuleR) NewStruct() *cmfChargeRuleR {
	return &cmfChargeRuleR{}
}

// cmfChargeRuleL is where Load methods for each relationship are stored.
type cmfChargeRuleL struct{}

var (
	cmfChargeRuleAllColumns            = []string{"id", "name", "coin", "coin_ios", "money", "product_id", "IDR", "CNY", "USD", "HKD", "currency", "give", "list_order", "addtime", "channel_name"}
	cmfChargeRuleColumnsWithoutDefault = []string{"name", "product_id", "channel_name"}
	cmfChargeRuleColumnsWithDefault    = []string{"id", "coin", "coin_ios", "money", "IDR", "CNY", "USD", "HKD", "currency", "give", "list_order", "addtime"}
	cmfChargeRulePrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFChargeRuleSlice is an alias for a slice of pointers to CMFChargeRule.
	// This should generally be used opposed to []CMFChargeRule.
	CMFChargeRuleSlice []*CMFChargeRule
	// CMFChargeRuleHook is the signature for custom CMFChargeRule hook methods
	CMFChargeRuleHook func(context.Context, boil.ContextExecutor, *CMFChargeRule) error

	cmfChargeRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfChargeRuleType                 = reflect.TypeOf(&CMFChargeRule{})
	cmfChargeRuleMapping              = queries.MakeStructMapping(cmfChargeRuleType)
	cmfChargeRulePrimaryKeyMapping, _ = queries.BindMapping(cmfChargeRuleType, cmfChargeRuleMapping, cmfChargeRulePrimaryKeyColumns)
	cmfChargeRuleInsertCacheMut       sync.RWMutex
	cmfChargeRuleInsertCache          = make(map[string]insertCache)
	cmfChargeRuleUpdateCacheMut       sync.RWMutex
	cmfChargeRuleUpdateCache          = make(map[string]updateCache)
	cmfChargeRuleUpsertCacheMut       sync.RWMutex
	cmfChargeRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfChargeRuleBeforeInsertHooks []CMFChargeRuleHook
var cmfChargeRuleBeforeUpdateHooks []CMFChargeRuleHook
var cmfChargeRuleBeforeDeleteHooks []CMFChargeRuleHook
var cmfChargeRuleBeforeUpsertHooks []CMFChargeRuleHook

var cmfChargeRuleAfterInsertHooks []CMFChargeRuleHook
var cmfChargeRuleAfterSelectHooks []CMFChargeRuleHook
var cmfChargeRuleAfterUpdateHooks []CMFChargeRuleHook
var cmfChargeRuleAfterDeleteHooks []CMFChargeRuleHook
var cmfChargeRuleAfterUpsertHooks []CMFChargeRuleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFChargeRule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeRuleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFChargeRule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeRuleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFChargeRule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeRuleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFChargeRule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeRuleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFChargeRule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeRuleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFChargeRule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeRuleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFChargeRule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeRuleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFChargeRule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeRuleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFChargeRule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeRuleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFChargeRuleHook registers your hook function for all future operations.
func AddCMFChargeRuleHook(hookPoint boil.HookPoint, cmfChargeRuleHook CMFChargeRuleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfChargeRuleBeforeInsertHooks = append(cmfChargeRuleBeforeInsertHooks, cmfChargeRuleHook)
	case boil.BeforeUpdateHook:
		cmfChargeRuleBeforeUpdateHooks = append(cmfChargeRuleBeforeUpdateHooks, cmfChargeRuleHook)
	case boil.BeforeDeleteHook:
		cmfChargeRuleBeforeDeleteHooks = append(cmfChargeRuleBeforeDeleteHooks, cmfChargeRuleHook)
	case boil.BeforeUpsertHook:
		cmfChargeRuleBeforeUpsertHooks = append(cmfChargeRuleBeforeUpsertHooks, cmfChargeRuleHook)
	case boil.AfterInsertHook:
		cmfChargeRuleAfterInsertHooks = append(cmfChargeRuleAfterInsertHooks, cmfChargeRuleHook)
	case boil.AfterSelectHook:
		cmfChargeRuleAfterSelectHooks = append(cmfChargeRuleAfterSelectHooks, cmfChargeRuleHook)
	case boil.AfterUpdateHook:
		cmfChargeRuleAfterUpdateHooks = append(cmfChargeRuleAfterUpdateHooks, cmfChargeRuleHook)
	case boil.AfterDeleteHook:
		cmfChargeRuleAfterDeleteHooks = append(cmfChargeRuleAfterDeleteHooks, cmfChargeRuleHook)
	case boil.AfterUpsertHook:
		cmfChargeRuleAfterUpsertHooks = append(cmfChargeRuleAfterUpsertHooks, cmfChargeRuleHook)
	}
}

// One returns a single cmfChargeRule record from the query.
func (q cmfChargeRuleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFChargeRule, error) {
	o := &CMFChargeRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_charge_rules")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFChargeRule records from the query.
func (q cmfChargeRuleQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFChargeRuleSlice, error) {
	var o []*CMFChargeRule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFChargeRule slice")
	}

	if len(cmfChargeRuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFChargeRule records in the query.
func (q cmfChargeRuleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_charge_rules rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfChargeRuleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_charge_rules exists")
	}

	return count > 0, nil
}

// CMFChargeRules retrieves all the records using an executor.
func CMFChargeRules(mods ...qm.QueryMod) cmfChargeRuleQuery {
	mods = append(mods, qm.From("`cmf_charge_rules`"))
	return cmfChargeRuleQuery{NewQuery(mods...)}
}

// FindCMFChargeRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFChargeRule(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFChargeRule, error) {
	cmfChargeRuleObj := &CMFChargeRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_charge_rules` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfChargeRuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_charge_rules")
	}

	return cmfChargeRuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFChargeRule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_charge_rules provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfChargeRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfChargeRuleInsertCacheMut.RLock()
	cache, cached := cmfChargeRuleInsertCache[key]
	cmfChargeRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfChargeRuleAllColumns,
			cmfChargeRuleColumnsWithDefault,
			cmfChargeRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfChargeRuleType, cmfChargeRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfChargeRuleType, cmfChargeRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_charge_rules` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_charge_rules` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_charge_rules` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfChargeRulePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_charge_rules")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfChargeRuleMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_charge_rules")
	}

CacheNoHooks:
	if !cached {
		cmfChargeRuleInsertCacheMut.Lock()
		cmfChargeRuleInsertCache[key] = cache
		cmfChargeRuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFChargeRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFChargeRule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfChargeRuleUpdateCacheMut.RLock()
	cache, cached := cmfChargeRuleUpdateCache[key]
	cmfChargeRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfChargeRuleAllColumns,
			cmfChargeRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_charge_rules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_charge_rules` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfChargeRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfChargeRuleType, cmfChargeRuleMapping, append(wl, cmfChargeRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_charge_rules row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_charge_rules")
	}

	if !cached {
		cmfChargeRuleUpdateCacheMut.Lock()
		cmfChargeRuleUpdateCache[key] = cache
		cmfChargeRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfChargeRuleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_charge_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_charge_rules")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFChargeRuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfChargeRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_charge_rules` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfChargeRulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfChargeRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfChargeRule")
	}
	return rowsAff, nil
}

var mySQLCMFChargeRuleUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFChargeRule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_charge_rules provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfChargeRuleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFChargeRuleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfChargeRuleUpsertCacheMut.RLock()
	cache, cached := cmfChargeRuleUpsertCache[key]
	cmfChargeRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfChargeRuleAllColumns,
			cmfChargeRuleColumnsWithDefault,
			cmfChargeRuleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfChargeRuleAllColumns,
			cmfChargeRulePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_charge_rules, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_charge_rules`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_charge_rules` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfChargeRuleType, cmfChargeRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfChargeRuleType, cmfChargeRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_charge_rules")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfChargeRuleMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfChargeRuleType, cmfChargeRuleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_charge_rules")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_charge_rules")
	}

CacheNoHooks:
	if !cached {
		cmfChargeRuleUpsertCacheMut.Lock()
		cmfChargeRuleUpsertCache[key] = cache
		cmfChargeRuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFChargeRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFChargeRule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFChargeRule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfChargeRulePrimaryKeyMapping)
	sql := "DELETE FROM `cmf_charge_rules` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_charge_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_charge_rules")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfChargeRuleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfChargeRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_charge_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_charge_rules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFChargeRuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfChargeRuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfChargeRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_charge_rules` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfChargeRulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfChargeRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_charge_rules")
	}

	if len(cmfChargeRuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFChargeRule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFChargeRule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFChargeRuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFChargeRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfChargeRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_charge_rules`.* FROM `cmf_charge_rules` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfChargeRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFChargeRuleSlice")
	}

	*o = slice

	return nil
}

// CMFChargeRuleExists checks if the CMFChargeRule row exists.
func CMFChargeRuleExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_charge_rules` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_charge_rules exists")
	}

	return exists, nil
}
