// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CMFChargeUser is an object representing the database table.
type CMFChargeUser struct {
	ID             uint              `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID            int               `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Touid          int               `boil:"touid" json:"touid" toml:"touid" yaml:"touid"`
	Money          types.Decimal     `boil:"money" json:"money" toml:"money" yaml:"money"`
	Coin           int               `boil:"coin" json:"coin" toml:"coin" yaml:"coin"`
	CoinGive       int               `boil:"coin_give" json:"coin_give" toml:"coin_give" yaml:"coin_give"`
	Orderno        string            `boil:"orderno" json:"orderno" toml:"orderno" yaml:"orderno"`
	TradeNo        string            `boil:"trade_no" json:"trade_no" toml:"trade_no" yaml:"trade_no"`
	Status         bool              `boil:"status" json:"status" toml:"status" yaml:"status"`
	ExchangeIdr    types.Decimal     `boil:"exchange_idr" json:"exchange_idr" toml:"exchange_idr" yaml:"exchange_idr"`
	ExchangeUnit   null.String       `boil:"exchange_unit" json:"exchange_unit,omitempty" toml:"exchange_unit" yaml:"exchange_unit,omitempty"`
	RateOfExchange types.NullDecimal `boil:"rate_of_exchange" json:"rate_of_exchange,omitempty" toml:"rate_of_exchange" yaml:"rate_of_exchange,omitempty"`
	IP             string            `boil:"ip" json:"ip" toml:"ip" yaml:"ip"`
	Addtime        int               `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Type           bool              `boil:"type" json:"type" toml:"type" yaml:"type"`
	Ambient        bool              `boil:"ambient" json:"ambient" toml:"ambient" yaml:"ambient"`
	UpdateTime     int               `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`
	SuccessTime    int               `boil:"success_time" json:"success_time" toml:"success_time" yaml:"success_time"`
	UserChannel    null.String       `boil:"user_channel" json:"user_channel,omitempty" toml:"user_channel" yaml:"user_channel,omitempty"`
	ChannelID      int               `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	From           int               `boil:"from" json:"from" toml:"from" yaml:"from"`

	R *cmfChargeUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfChargeUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFChargeUserColumns = struct {
	ID             string
	UID            string
	Touid          string
	Money          string
	Coin           string
	CoinGive       string
	Orderno        string
	TradeNo        string
	Status         string
	ExchangeIdr    string
	ExchangeUnit   string
	RateOfExchange string
	IP             string
	Addtime        string
	Type           string
	Ambient        string
	UpdateTime     string
	SuccessTime    string
	UserChannel    string
	ChannelID      string
	From           string
}{
	ID:             "id",
	UID:            "uid",
	Touid:          "touid",
	Money:          "money",
	Coin:           "coin",
	CoinGive:       "coin_give",
	Orderno:        "orderno",
	TradeNo:        "trade_no",
	Status:         "status",
	ExchangeIdr:    "exchange_idr",
	ExchangeUnit:   "exchange_unit",
	RateOfExchange: "rate_of_exchange",
	IP:             "ip",
	Addtime:        "addtime",
	Type:           "type",
	Ambient:        "ambient",
	UpdateTime:     "update_time",
	SuccessTime:    "success_time",
	UserChannel:    "user_channel",
	ChannelID:      "channel_id",
	From:           "from",
}

// Generated where

var CMFChargeUserWhere = struct {
	ID             whereHelperuint
	UID            whereHelperint
	Touid          whereHelperint
	Money          whereHelpertypes_Decimal
	Coin           whereHelperint
	CoinGive       whereHelperint
	Orderno        whereHelperstring
	TradeNo        whereHelperstring
	Status         whereHelperbool
	ExchangeIdr    whereHelpertypes_Decimal
	ExchangeUnit   whereHelpernull_String
	RateOfExchange whereHelpertypes_NullDecimal
	IP             whereHelperstring
	Addtime        whereHelperint
	Type           whereHelperbool
	Ambient        whereHelperbool
	UpdateTime     whereHelperint
	SuccessTime    whereHelperint
	UserChannel    whereHelpernull_String
	ChannelID      whereHelperint
	From           whereHelperint
}{
	ID:             whereHelperuint{field: "`cmf_charge_user`.`id`"},
	UID:            whereHelperint{field: "`cmf_charge_user`.`uid`"},
	Touid:          whereHelperint{field: "`cmf_charge_user`.`touid`"},
	Money:          whereHelpertypes_Decimal{field: "`cmf_charge_user`.`money`"},
	Coin:           whereHelperint{field: "`cmf_charge_user`.`coin`"},
	CoinGive:       whereHelperint{field: "`cmf_charge_user`.`coin_give`"},
	Orderno:        whereHelperstring{field: "`cmf_charge_user`.`orderno`"},
	TradeNo:        whereHelperstring{field: "`cmf_charge_user`.`trade_no`"},
	Status:         whereHelperbool{field: "`cmf_charge_user`.`status`"},
	ExchangeIdr:    whereHelpertypes_Decimal{field: "`cmf_charge_user`.`exchange_idr`"},
	ExchangeUnit:   whereHelpernull_String{field: "`cmf_charge_user`.`exchange_unit`"},
	RateOfExchange: whereHelpertypes_NullDecimal{field: "`cmf_charge_user`.`rate_of_exchange`"},
	IP:             whereHelperstring{field: "`cmf_charge_user`.`ip`"},
	Addtime:        whereHelperint{field: "`cmf_charge_user`.`addtime`"},
	Type:           whereHelperbool{field: "`cmf_charge_user`.`type`"},
	Ambient:        whereHelperbool{field: "`cmf_charge_user`.`ambient`"},
	UpdateTime:     whereHelperint{field: "`cmf_charge_user`.`update_time`"},
	SuccessTime:    whereHelperint{field: "`cmf_charge_user`.`success_time`"},
	UserChannel:    whereHelpernull_String{field: "`cmf_charge_user`.`user_channel`"},
	ChannelID:      whereHelperint{field: "`cmf_charge_user`.`channel_id`"},
	From:           whereHelperint{field: "`cmf_charge_user`.`from`"},
}

// CMFChargeUserRels is where relationship names are stored.
var CMFChargeUserRels = struct {
}{}

// cmfChargeUserR is where relationships are stored.
type cmfChargeUserR struct {
}

// NewStruct creates a new relationship struct
func (*cmfChargeUserR) NewStruct() *cmfChargeUserR {
	return &cmfChargeUserR{}
}

// cmfChargeUserL is where Load methods for each relationship are stored.
type cmfChargeUserL struct{}

var (
	cmfChargeUserAllColumns            = []string{"id", "uid", "touid", "money", "coin", "coin_give", "orderno", "trade_no", "status", "exchange_idr", "exchange_unit", "rate_of_exchange", "ip", "addtime", "type", "ambient", "update_time", "success_time", "user_channel", "channel_id", "from"}
	cmfChargeUserColumnsWithoutDefault = []string{"orderno", "trade_no", "exchange_idr", "ip", "user_channel"}
	cmfChargeUserColumnsWithDefault    = []string{"id", "uid", "touid", "money", "coin", "coin_give", "status", "exchange_unit", "rate_of_exchange", "addtime", "type", "ambient", "update_time", "success_time", "channel_id", "from"}
	cmfChargeUserPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFChargeUserSlice is an alias for a slice of pointers to CMFChargeUser.
	// This should generally be used opposed to []CMFChargeUser.
	CMFChargeUserSlice []*CMFChargeUser
	// CMFChargeUserHook is the signature for custom CMFChargeUser hook methods
	CMFChargeUserHook func(context.Context, boil.ContextExecutor, *CMFChargeUser) error

	cmfChargeUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfChargeUserType                 = reflect.TypeOf(&CMFChargeUser{})
	cmfChargeUserMapping              = queries.MakeStructMapping(cmfChargeUserType)
	cmfChargeUserPrimaryKeyMapping, _ = queries.BindMapping(cmfChargeUserType, cmfChargeUserMapping, cmfChargeUserPrimaryKeyColumns)
	cmfChargeUserInsertCacheMut       sync.RWMutex
	cmfChargeUserInsertCache          = make(map[string]insertCache)
	cmfChargeUserUpdateCacheMut       sync.RWMutex
	cmfChargeUserUpdateCache          = make(map[string]updateCache)
	cmfChargeUserUpsertCacheMut       sync.RWMutex
	cmfChargeUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfChargeUserBeforeInsertHooks []CMFChargeUserHook
var cmfChargeUserBeforeUpdateHooks []CMFChargeUserHook
var cmfChargeUserBeforeDeleteHooks []CMFChargeUserHook
var cmfChargeUserBeforeUpsertHooks []CMFChargeUserHook

var cmfChargeUserAfterInsertHooks []CMFChargeUserHook
var cmfChargeUserAfterSelectHooks []CMFChargeUserHook
var cmfChargeUserAfterUpdateHooks []CMFChargeUserHook
var cmfChargeUserAfterDeleteHooks []CMFChargeUserHook
var cmfChargeUserAfterUpsertHooks []CMFChargeUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFChargeUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFChargeUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFChargeUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFChargeUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFChargeUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFChargeUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFChargeUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFChargeUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFChargeUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFChargeUserHook registers your hook function for all future operations.
func AddCMFChargeUserHook(hookPoint boil.HookPoint, cmfChargeUserHook CMFChargeUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfChargeUserBeforeInsertHooks = append(cmfChargeUserBeforeInsertHooks, cmfChargeUserHook)
	case boil.BeforeUpdateHook:
		cmfChargeUserBeforeUpdateHooks = append(cmfChargeUserBeforeUpdateHooks, cmfChargeUserHook)
	case boil.BeforeDeleteHook:
		cmfChargeUserBeforeDeleteHooks = append(cmfChargeUserBeforeDeleteHooks, cmfChargeUserHook)
	case boil.BeforeUpsertHook:
		cmfChargeUserBeforeUpsertHooks = append(cmfChargeUserBeforeUpsertHooks, cmfChargeUserHook)
	case boil.AfterInsertHook:
		cmfChargeUserAfterInsertHooks = append(cmfChargeUserAfterInsertHooks, cmfChargeUserHook)
	case boil.AfterSelectHook:
		cmfChargeUserAfterSelectHooks = append(cmfChargeUserAfterSelectHooks, cmfChargeUserHook)
	case boil.AfterUpdateHook:
		cmfChargeUserAfterUpdateHooks = append(cmfChargeUserAfterUpdateHooks, cmfChargeUserHook)
	case boil.AfterDeleteHook:
		cmfChargeUserAfterDeleteHooks = append(cmfChargeUserAfterDeleteHooks, cmfChargeUserHook)
	case boil.AfterUpsertHook:
		cmfChargeUserAfterUpsertHooks = append(cmfChargeUserAfterUpsertHooks, cmfChargeUserHook)
	}
}

// One returns a single cmfChargeUser record from the query.
func (q cmfChargeUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFChargeUser, error) {
	o := &CMFChargeUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_charge_user")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFChargeUser records from the query.
func (q cmfChargeUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFChargeUserSlice, error) {
	var o []*CMFChargeUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFChargeUser slice")
	}

	if len(cmfChargeUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFChargeUser records in the query.
func (q cmfChargeUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_charge_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfChargeUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_charge_user exists")
	}

	return count > 0, nil
}

// CMFChargeUsers retrieves all the records using an executor.
func CMFChargeUsers(mods ...qm.QueryMod) cmfChargeUserQuery {
	mods = append(mods, qm.From("`cmf_charge_user`"))
	return cmfChargeUserQuery{NewQuery(mods...)}
}

// FindCMFChargeUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFChargeUser(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFChargeUser, error) {
	cmfChargeUserObj := &CMFChargeUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_charge_user` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfChargeUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_charge_user")
	}

	return cmfChargeUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFChargeUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_charge_user provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfChargeUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfChargeUserInsertCacheMut.RLock()
	cache, cached := cmfChargeUserInsertCache[key]
	cmfChargeUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfChargeUserAllColumns,
			cmfChargeUserColumnsWithDefault,
			cmfChargeUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfChargeUserType, cmfChargeUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfChargeUserType, cmfChargeUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_charge_user` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_charge_user` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_charge_user` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfChargeUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_charge_user")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfChargeUserMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_charge_user")
	}

CacheNoHooks:
	if !cached {
		cmfChargeUserInsertCacheMut.Lock()
		cmfChargeUserInsertCache[key] = cache
		cmfChargeUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFChargeUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFChargeUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfChargeUserUpdateCacheMut.RLock()
	cache, cached := cmfChargeUserUpdateCache[key]
	cmfChargeUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfChargeUserAllColumns,
			cmfChargeUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_charge_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_charge_user` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfChargeUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfChargeUserType, cmfChargeUserMapping, append(wl, cmfChargeUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_charge_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_charge_user")
	}

	if !cached {
		cmfChargeUserUpdateCacheMut.Lock()
		cmfChargeUserUpdateCache[key] = cache
		cmfChargeUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfChargeUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_charge_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_charge_user")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFChargeUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfChargeUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_charge_user` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfChargeUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfChargeUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfChargeUser")
	}
	return rowsAff, nil
}

var mySQLCMFChargeUserUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFChargeUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_charge_user provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfChargeUserColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFChargeUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfChargeUserUpsertCacheMut.RLock()
	cache, cached := cmfChargeUserUpsertCache[key]
	cmfChargeUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfChargeUserAllColumns,
			cmfChargeUserColumnsWithDefault,
			cmfChargeUserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfChargeUserAllColumns,
			cmfChargeUserPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_charge_user, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_charge_user`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_charge_user` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfChargeUserType, cmfChargeUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfChargeUserType, cmfChargeUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_charge_user")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfChargeUserMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfChargeUserType, cmfChargeUserMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_charge_user")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_charge_user")
	}

CacheNoHooks:
	if !cached {
		cmfChargeUserUpsertCacheMut.Lock()
		cmfChargeUserUpsertCache[key] = cache
		cmfChargeUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFChargeUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFChargeUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFChargeUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfChargeUserPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_charge_user` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_charge_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_charge_user")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfChargeUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfChargeUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_charge_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_charge_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFChargeUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfChargeUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfChargeUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_charge_user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfChargeUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfChargeUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_charge_user")
	}

	if len(cmfChargeUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFChargeUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFChargeUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFChargeUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFChargeUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfChargeUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_charge_user`.* FROM `cmf_charge_user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfChargeUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFChargeUserSlice")
	}

	*o = slice

	return nil
}

// CMFChargeUserExists checks if the CMFChargeUser row exists.
func CMFChargeUserExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_charge_user` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_charge_user exists")
	}

	return exists, nil
}
