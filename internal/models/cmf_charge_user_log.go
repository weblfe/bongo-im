// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFChargeUserLog is an object representing the database table.
type CMFChargeUserLog struct {
	ID            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Orderno       string      `boil:"orderno" json:"orderno" toml:"orderno" yaml:"orderno"`
	TradeNo       string      `boil:"trade_no" json:"trade_no" toml:"trade_no" yaml:"trade_no"`
	Action        int         `boil:"action" json:"action" toml:"action" yaml:"action"`
	TriggerType   int16       `boil:"trigger_type" json:"trigger_type" toml:"trigger_type" yaml:"trigger_type"`
	OrderUID      int         `boil:"order_uid" json:"order_uid" toml:"order_uid" yaml:"order_uid"`
	UserChannel   string      `boil:"user_channel" json:"user_channel" toml:"user_channel" yaml:"user_channel"`
	ActionContent string      `boil:"action_content" json:"action_content" toml:"action_content" yaml:"action_content"`
	ReferTable    null.String `boil:"refer_table" json:"refer_table,omitempty" toml:"refer_table" yaml:"refer_table,omitempty"`
	ReferID       null.String `boil:"refer_id" json:"refer_id,omitempty" toml:"refer_id" yaml:"refer_id,omitempty"`
	Status        null.Int16  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *cmfChargeUserLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfChargeUserLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFChargeUserLogColumns = struct {
	ID            string
	Orderno       string
	TradeNo       string
	Action        string
	TriggerType   string
	OrderUID      string
	UserChannel   string
	ActionContent string
	ReferTable    string
	ReferID       string
	Status        string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	Orderno:       "orderno",
	TradeNo:       "trade_no",
	Action:        "action",
	TriggerType:   "trigger_type",
	OrderUID:      "order_uid",
	UserChannel:   "user_channel",
	ActionContent: "action_content",
	ReferTable:    "refer_table",
	ReferID:       "refer_id",
	Status:        "status",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

// Generated where

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CMFChargeUserLogWhere = struct {
	ID            whereHelperint64
	Orderno       whereHelperstring
	TradeNo       whereHelperstring
	Action        whereHelperint
	TriggerType   whereHelperint16
	OrderUID      whereHelperint
	UserChannel   whereHelperstring
	ActionContent whereHelperstring
	ReferTable    whereHelpernull_String
	ReferID       whereHelpernull_String
	Status        whereHelpernull_Int16
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "`cmf_charge_user_log`.`id`"},
	Orderno:       whereHelperstring{field: "`cmf_charge_user_log`.`orderno`"},
	TradeNo:       whereHelperstring{field: "`cmf_charge_user_log`.`trade_no`"},
	Action:        whereHelperint{field: "`cmf_charge_user_log`.`action`"},
	TriggerType:   whereHelperint16{field: "`cmf_charge_user_log`.`trigger_type`"},
	OrderUID:      whereHelperint{field: "`cmf_charge_user_log`.`order_uid`"},
	UserChannel:   whereHelperstring{field: "`cmf_charge_user_log`.`user_channel`"},
	ActionContent: whereHelperstring{field: "`cmf_charge_user_log`.`action_content`"},
	ReferTable:    whereHelpernull_String{field: "`cmf_charge_user_log`.`refer_table`"},
	ReferID:       whereHelpernull_String{field: "`cmf_charge_user_log`.`refer_id`"},
	Status:        whereHelpernull_Int16{field: "`cmf_charge_user_log`.`status`"},
	CreatedAt:     whereHelpertime_Time{field: "`cmf_charge_user_log`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`cmf_charge_user_log`.`updated_at`"},
}

// CMFChargeUserLogRels is where relationship names are stored.
var CMFChargeUserLogRels = struct {
}{}

// cmfChargeUserLogR is where relationships are stored.
type cmfChargeUserLogR struct {
}

// NewStruct creates a new relationship struct
func (*cmfChargeUserLogR) NewStruct() *cmfChargeUserLogR {
	return &cmfChargeUserLogR{}
}

// cmfChargeUserLogL is where Load methods for each relationship are stored.
type cmfChargeUserLogL struct{}

var (
	cmfChargeUserLogAllColumns            = []string{"id", "orderno", "trade_no", "action", "trigger_type", "order_uid", "user_channel", "action_content", "refer_table", "refer_id", "status", "created_at", "updated_at"}
	cmfChargeUserLogColumnsWithoutDefault = []string{"orderno", "trade_no", "action", "trigger_type", "order_uid", "user_channel", "action_content", "refer_table", "refer_id"}
	cmfChargeUserLogColumnsWithDefault    = []string{"id", "status", "created_at", "updated_at"}
	cmfChargeUserLogPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFChargeUserLogSlice is an alias for a slice of pointers to CMFChargeUserLog.
	// This should generally be used opposed to []CMFChargeUserLog.
	CMFChargeUserLogSlice []*CMFChargeUserLog
	// CMFChargeUserLogHook is the signature for custom CMFChargeUserLog hook methods
	CMFChargeUserLogHook func(context.Context, boil.ContextExecutor, *CMFChargeUserLog) error

	cmfChargeUserLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfChargeUserLogType                 = reflect.TypeOf(&CMFChargeUserLog{})
	cmfChargeUserLogMapping              = queries.MakeStructMapping(cmfChargeUserLogType)
	cmfChargeUserLogPrimaryKeyMapping, _ = queries.BindMapping(cmfChargeUserLogType, cmfChargeUserLogMapping, cmfChargeUserLogPrimaryKeyColumns)
	cmfChargeUserLogInsertCacheMut       sync.RWMutex
	cmfChargeUserLogInsertCache          = make(map[string]insertCache)
	cmfChargeUserLogUpdateCacheMut       sync.RWMutex
	cmfChargeUserLogUpdateCache          = make(map[string]updateCache)
	cmfChargeUserLogUpsertCacheMut       sync.RWMutex
	cmfChargeUserLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfChargeUserLogBeforeInsertHooks []CMFChargeUserLogHook
var cmfChargeUserLogBeforeUpdateHooks []CMFChargeUserLogHook
var cmfChargeUserLogBeforeDeleteHooks []CMFChargeUserLogHook
var cmfChargeUserLogBeforeUpsertHooks []CMFChargeUserLogHook

var cmfChargeUserLogAfterInsertHooks []CMFChargeUserLogHook
var cmfChargeUserLogAfterSelectHooks []CMFChargeUserLogHook
var cmfChargeUserLogAfterUpdateHooks []CMFChargeUserLogHook
var cmfChargeUserLogAfterDeleteHooks []CMFChargeUserLogHook
var cmfChargeUserLogAfterUpsertHooks []CMFChargeUserLogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFChargeUserLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFChargeUserLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFChargeUserLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFChargeUserLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFChargeUserLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFChargeUserLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFChargeUserLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFChargeUserLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFChargeUserLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfChargeUserLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFChargeUserLogHook registers your hook function for all future operations.
func AddCMFChargeUserLogHook(hookPoint boil.HookPoint, cmfChargeUserLogHook CMFChargeUserLogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfChargeUserLogBeforeInsertHooks = append(cmfChargeUserLogBeforeInsertHooks, cmfChargeUserLogHook)
	case boil.BeforeUpdateHook:
		cmfChargeUserLogBeforeUpdateHooks = append(cmfChargeUserLogBeforeUpdateHooks, cmfChargeUserLogHook)
	case boil.BeforeDeleteHook:
		cmfChargeUserLogBeforeDeleteHooks = append(cmfChargeUserLogBeforeDeleteHooks, cmfChargeUserLogHook)
	case boil.BeforeUpsertHook:
		cmfChargeUserLogBeforeUpsertHooks = append(cmfChargeUserLogBeforeUpsertHooks, cmfChargeUserLogHook)
	case boil.AfterInsertHook:
		cmfChargeUserLogAfterInsertHooks = append(cmfChargeUserLogAfterInsertHooks, cmfChargeUserLogHook)
	case boil.AfterSelectHook:
		cmfChargeUserLogAfterSelectHooks = append(cmfChargeUserLogAfterSelectHooks, cmfChargeUserLogHook)
	case boil.AfterUpdateHook:
		cmfChargeUserLogAfterUpdateHooks = append(cmfChargeUserLogAfterUpdateHooks, cmfChargeUserLogHook)
	case boil.AfterDeleteHook:
		cmfChargeUserLogAfterDeleteHooks = append(cmfChargeUserLogAfterDeleteHooks, cmfChargeUserLogHook)
	case boil.AfterUpsertHook:
		cmfChargeUserLogAfterUpsertHooks = append(cmfChargeUserLogAfterUpsertHooks, cmfChargeUserLogHook)
	}
}

// One returns a single cmfChargeUserLog record from the query.
func (q cmfChargeUserLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFChargeUserLog, error) {
	o := &CMFChargeUserLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_charge_user_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFChargeUserLog records from the query.
func (q cmfChargeUserLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFChargeUserLogSlice, error) {
	var o []*CMFChargeUserLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFChargeUserLog slice")
	}

	if len(cmfChargeUserLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFChargeUserLog records in the query.
func (q cmfChargeUserLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_charge_user_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfChargeUserLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_charge_user_log exists")
	}

	return count > 0, nil
}

// CMFChargeUserLogs retrieves all the records using an executor.
func CMFChargeUserLogs(mods ...qm.QueryMod) cmfChargeUserLogQuery {
	mods = append(mods, qm.From("`cmf_charge_user_log`"))
	return cmfChargeUserLogQuery{NewQuery(mods...)}
}

// FindCMFChargeUserLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFChargeUserLog(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFChargeUserLog, error) {
	cmfChargeUserLogObj := &CMFChargeUserLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_charge_user_log` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfChargeUserLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_charge_user_log")
	}

	return cmfChargeUserLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFChargeUserLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_charge_user_log provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfChargeUserLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfChargeUserLogInsertCacheMut.RLock()
	cache, cached := cmfChargeUserLogInsertCache[key]
	cmfChargeUserLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfChargeUserLogAllColumns,
			cmfChargeUserLogColumnsWithDefault,
			cmfChargeUserLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfChargeUserLogType, cmfChargeUserLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfChargeUserLogType, cmfChargeUserLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_charge_user_log` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_charge_user_log` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_charge_user_log` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfChargeUserLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_charge_user_log")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfChargeUserLogMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_charge_user_log")
	}

CacheNoHooks:
	if !cached {
		cmfChargeUserLogInsertCacheMut.Lock()
		cmfChargeUserLogInsertCache[key] = cache
		cmfChargeUserLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFChargeUserLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFChargeUserLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfChargeUserLogUpdateCacheMut.RLock()
	cache, cached := cmfChargeUserLogUpdateCache[key]
	cmfChargeUserLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfChargeUserLogAllColumns,
			cmfChargeUserLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_charge_user_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_charge_user_log` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfChargeUserLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfChargeUserLogType, cmfChargeUserLogMapping, append(wl, cmfChargeUserLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_charge_user_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_charge_user_log")
	}

	if !cached {
		cmfChargeUserLogUpdateCacheMut.Lock()
		cmfChargeUserLogUpdateCache[key] = cache
		cmfChargeUserLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfChargeUserLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_charge_user_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_charge_user_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFChargeUserLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfChargeUserLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_charge_user_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfChargeUserLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfChargeUserLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfChargeUserLog")
	}
	return rowsAff, nil
}

var mySQLCMFChargeUserLogUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFChargeUserLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_charge_user_log provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfChargeUserLogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFChargeUserLogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfChargeUserLogUpsertCacheMut.RLock()
	cache, cached := cmfChargeUserLogUpsertCache[key]
	cmfChargeUserLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfChargeUserLogAllColumns,
			cmfChargeUserLogColumnsWithDefault,
			cmfChargeUserLogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfChargeUserLogAllColumns,
			cmfChargeUserLogPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_charge_user_log, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_charge_user_log`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_charge_user_log` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfChargeUserLogType, cmfChargeUserLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfChargeUserLogType, cmfChargeUserLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_charge_user_log")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfChargeUserLogMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfChargeUserLogType, cmfChargeUserLogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_charge_user_log")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_charge_user_log")
	}

CacheNoHooks:
	if !cached {
		cmfChargeUserLogUpsertCacheMut.Lock()
		cmfChargeUserLogUpsertCache[key] = cache
		cmfChargeUserLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFChargeUserLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFChargeUserLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFChargeUserLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfChargeUserLogPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_charge_user_log` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_charge_user_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_charge_user_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfChargeUserLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfChargeUserLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_charge_user_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_charge_user_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFChargeUserLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfChargeUserLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfChargeUserLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_charge_user_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfChargeUserLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfChargeUserLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_charge_user_log")
	}

	if len(cmfChargeUserLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFChargeUserLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFChargeUserLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFChargeUserLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFChargeUserLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfChargeUserLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_charge_user_log`.* FROM `cmf_charge_user_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfChargeUserLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFChargeUserLogSlice")
	}

	*o = slice

	return nil
}

// CMFChargeUserLogExists checks if the CMFChargeUserLog row exists.
func CMFChargeUserLogExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_charge_user_log` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_charge_user_log exists")
	}

	return exists, nil
}
