// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFDynamic is an object representing the database table.
type CMFDynamic struct {
	ID           uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID          int         `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Title        null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Thumb        null.String `boil:"thumb" json:"thumb,omitempty" toml:"thumb" yaml:"thumb,omitempty"`
	VideoThumb   null.String `boil:"video_thumb" json:"video_thumb,omitempty" toml:"video_thumb" yaml:"video_thumb,omitempty"`
	Href         null.String `boil:"href" json:"href,omitempty" toml:"href" yaml:"href,omitempty"`
	Voice        null.String `boil:"voice" json:"voice,omitempty" toml:"voice" yaml:"voice,omitempty"`
	Length       null.Int    `boil:"length" json:"length,omitempty" toml:"length" yaml:"length,omitempty"`
	Likes        int         `boil:"likes" json:"likes" toml:"likes" yaml:"likes"`
	Comments     int         `boil:"comments" json:"comments" toml:"comments" yaml:"comments"`
	Type         int         `boil:"type" json:"type" toml:"type" yaml:"type"`
	Isdel        bool        `boil:"isdel" json:"isdel" toml:"isdel" yaml:"isdel"`
	Status       bool        `boil:"status" json:"status" toml:"status" yaml:"status"`
	Uptime       null.Int    `boil:"uptime" json:"uptime,omitempty" toml:"uptime" yaml:"uptime,omitempty"`
	XiajiaReason null.String `boil:"xiajia_reason" json:"xiajia_reason,omitempty" toml:"xiajia_reason" yaml:"xiajia_reason,omitempty"`
	Lat          null.String `boil:"lat" json:"lat,omitempty" toml:"lat" yaml:"lat,omitempty"`
	LNG          null.String `boil:"lng" json:"lng,omitempty" toml:"lng" yaml:"lng,omitempty"`
	City         null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	Address      null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	Addtime      int         `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	FailReason   null.String `boil:"fail_reason" json:"fail_reason,omitempty" toml:"fail_reason" yaml:"fail_reason,omitempty"`
	ShowVal      int         `boil:"show_val" json:"show_val" toml:"show_val" yaml:"show_val"`
	RecommendVal null.Int    `boil:"recommend_val" json:"recommend_val,omitempty" toml:"recommend_val" yaml:"recommend_val,omitempty"`
	Labelid      int         `boil:"labelid" json:"labelid" toml:"labelid" yaml:"labelid"`

	R *cmfDynamicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfDynamicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFDynamicColumns = struct {
	ID           string
	UID          string
	Title        string
	Thumb        string
	VideoThumb   string
	Href         string
	Voice        string
	Length       string
	Likes        string
	Comments     string
	Type         string
	Isdel        string
	Status       string
	Uptime       string
	XiajiaReason string
	Lat          string
	LNG          string
	City         string
	Address      string
	Addtime      string
	FailReason   string
	ShowVal      string
	RecommendVal string
	Labelid      string
}{
	ID:           "id",
	UID:          "uid",
	Title:        "title",
	Thumb:        "thumb",
	VideoThumb:   "video_thumb",
	Href:         "href",
	Voice:        "voice",
	Length:       "length",
	Likes:        "likes",
	Comments:     "comments",
	Type:         "type",
	Isdel:        "isdel",
	Status:       "status",
	Uptime:       "uptime",
	XiajiaReason: "xiajia_reason",
	Lat:          "lat",
	LNG:          "lng",
	City:         "city",
	Address:      "address",
	Addtime:      "addtime",
	FailReason:   "fail_reason",
	ShowVal:      "show_val",
	RecommendVal: "recommend_val",
	Labelid:      "labelid",
}

// Generated where

var CMFDynamicWhere = struct {
	ID           whereHelperuint
	UID          whereHelperint
	Title        whereHelpernull_String
	Thumb        whereHelpernull_String
	VideoThumb   whereHelpernull_String
	Href         whereHelpernull_String
	Voice        whereHelpernull_String
	Length       whereHelpernull_Int
	Likes        whereHelperint
	Comments     whereHelperint
	Type         whereHelperint
	Isdel        whereHelperbool
	Status       whereHelperbool
	Uptime       whereHelpernull_Int
	XiajiaReason whereHelpernull_String
	Lat          whereHelpernull_String
	LNG          whereHelpernull_String
	City         whereHelpernull_String
	Address      whereHelpernull_String
	Addtime      whereHelperint
	FailReason   whereHelpernull_String
	ShowVal      whereHelperint
	RecommendVal whereHelpernull_Int
	Labelid      whereHelperint
}{
	ID:           whereHelperuint{field: "`cmf_dynamic`.`id`"},
	UID:          whereHelperint{field: "`cmf_dynamic`.`uid`"},
	Title:        whereHelpernull_String{field: "`cmf_dynamic`.`title`"},
	Thumb:        whereHelpernull_String{field: "`cmf_dynamic`.`thumb`"},
	VideoThumb:   whereHelpernull_String{field: "`cmf_dynamic`.`video_thumb`"},
	Href:         whereHelpernull_String{field: "`cmf_dynamic`.`href`"},
	Voice:        whereHelpernull_String{field: "`cmf_dynamic`.`voice`"},
	Length:       whereHelpernull_Int{field: "`cmf_dynamic`.`length`"},
	Likes:        whereHelperint{field: "`cmf_dynamic`.`likes`"},
	Comments:     whereHelperint{field: "`cmf_dynamic`.`comments`"},
	Type:         whereHelperint{field: "`cmf_dynamic`.`type`"},
	Isdel:        whereHelperbool{field: "`cmf_dynamic`.`isdel`"},
	Status:       whereHelperbool{field: "`cmf_dynamic`.`status`"},
	Uptime:       whereHelpernull_Int{field: "`cmf_dynamic`.`uptime`"},
	XiajiaReason: whereHelpernull_String{field: "`cmf_dynamic`.`xiajia_reason`"},
	Lat:          whereHelpernull_String{field: "`cmf_dynamic`.`lat`"},
	LNG:          whereHelpernull_String{field: "`cmf_dynamic`.`lng`"},
	City:         whereHelpernull_String{field: "`cmf_dynamic`.`city`"},
	Address:      whereHelpernull_String{field: "`cmf_dynamic`.`address`"},
	Addtime:      whereHelperint{field: "`cmf_dynamic`.`addtime`"},
	FailReason:   whereHelpernull_String{field: "`cmf_dynamic`.`fail_reason`"},
	ShowVal:      whereHelperint{field: "`cmf_dynamic`.`show_val`"},
	RecommendVal: whereHelpernull_Int{field: "`cmf_dynamic`.`recommend_val`"},
	Labelid:      whereHelperint{field: "`cmf_dynamic`.`labelid`"},
}

// CMFDynamicRels is where relationship names are stored.
var CMFDynamicRels = struct {
}{}

// cmfDynamicR is where relationships are stored.
type cmfDynamicR struct {
}

// NewStruct creates a new relationship struct
func (*cmfDynamicR) NewStruct() *cmfDynamicR {
	return &cmfDynamicR{}
}

// cmfDynamicL is where Load methods for each relationship are stored.
type cmfDynamicL struct{}

var (
	cmfDynamicAllColumns            = []string{"id", "uid", "title", "thumb", "video_thumb", "href", "voice", "length", "likes", "comments", "type", "isdel", "status", "uptime", "xiajia_reason", "lat", "lng", "city", "address", "addtime", "fail_reason", "show_val", "recommend_val", "labelid"}
	cmfDynamicColumnsWithoutDefault = []string{"title", "thumb", "video_thumb", "href", "voice", "xiajia_reason", "lat", "lng", "city", "address", "fail_reason"}
	cmfDynamicColumnsWithDefault    = []string{"id", "uid", "length", "likes", "comments", "type", "isdel", "status", "uptime", "addtime", "show_val", "recommend_val", "labelid"}
	cmfDynamicPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFDynamicSlice is an alias for a slice of pointers to CMFDynamic.
	// This should generally be used opposed to []CMFDynamic.
	CMFDynamicSlice []*CMFDynamic
	// CMFDynamicHook is the signature for custom CMFDynamic hook methods
	CMFDynamicHook func(context.Context, boil.ContextExecutor, *CMFDynamic) error

	cmfDynamicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfDynamicType                 = reflect.TypeOf(&CMFDynamic{})
	cmfDynamicMapping              = queries.MakeStructMapping(cmfDynamicType)
	cmfDynamicPrimaryKeyMapping, _ = queries.BindMapping(cmfDynamicType, cmfDynamicMapping, cmfDynamicPrimaryKeyColumns)
	cmfDynamicInsertCacheMut       sync.RWMutex
	cmfDynamicInsertCache          = make(map[string]insertCache)
	cmfDynamicUpdateCacheMut       sync.RWMutex
	cmfDynamicUpdateCache          = make(map[string]updateCache)
	cmfDynamicUpsertCacheMut       sync.RWMutex
	cmfDynamicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfDynamicBeforeInsertHooks []CMFDynamicHook
var cmfDynamicBeforeUpdateHooks []CMFDynamicHook
var cmfDynamicBeforeDeleteHooks []CMFDynamicHook
var cmfDynamicBeforeUpsertHooks []CMFDynamicHook

var cmfDynamicAfterInsertHooks []CMFDynamicHook
var cmfDynamicAfterSelectHooks []CMFDynamicHook
var cmfDynamicAfterUpdateHooks []CMFDynamicHook
var cmfDynamicAfterDeleteHooks []CMFDynamicHook
var cmfDynamicAfterUpsertHooks []CMFDynamicHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFDynamic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFDynamic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFDynamic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFDynamic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFDynamic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFDynamic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFDynamic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFDynamic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFDynamic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFDynamicHook registers your hook function for all future operations.
func AddCMFDynamicHook(hookPoint boil.HookPoint, cmfDynamicHook CMFDynamicHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfDynamicBeforeInsertHooks = append(cmfDynamicBeforeInsertHooks, cmfDynamicHook)
	case boil.BeforeUpdateHook:
		cmfDynamicBeforeUpdateHooks = append(cmfDynamicBeforeUpdateHooks, cmfDynamicHook)
	case boil.BeforeDeleteHook:
		cmfDynamicBeforeDeleteHooks = append(cmfDynamicBeforeDeleteHooks, cmfDynamicHook)
	case boil.BeforeUpsertHook:
		cmfDynamicBeforeUpsertHooks = append(cmfDynamicBeforeUpsertHooks, cmfDynamicHook)
	case boil.AfterInsertHook:
		cmfDynamicAfterInsertHooks = append(cmfDynamicAfterInsertHooks, cmfDynamicHook)
	case boil.AfterSelectHook:
		cmfDynamicAfterSelectHooks = append(cmfDynamicAfterSelectHooks, cmfDynamicHook)
	case boil.AfterUpdateHook:
		cmfDynamicAfterUpdateHooks = append(cmfDynamicAfterUpdateHooks, cmfDynamicHook)
	case boil.AfterDeleteHook:
		cmfDynamicAfterDeleteHooks = append(cmfDynamicAfterDeleteHooks, cmfDynamicHook)
	case boil.AfterUpsertHook:
		cmfDynamicAfterUpsertHooks = append(cmfDynamicAfterUpsertHooks, cmfDynamicHook)
	}
}

// One returns a single cmfDynamic record from the query.
func (q cmfDynamicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFDynamic, error) {
	o := &CMFDynamic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_dynamic")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFDynamic records from the query.
func (q cmfDynamicQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFDynamicSlice, error) {
	var o []*CMFDynamic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFDynamic slice")
	}

	if len(cmfDynamicAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFDynamic records in the query.
func (q cmfDynamicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_dynamic rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfDynamicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_dynamic exists")
	}

	return count > 0, nil
}

// CMFDynamics retrieves all the records using an executor.
func CMFDynamics(mods ...qm.QueryMod) cmfDynamicQuery {
	mods = append(mods, qm.From("`cmf_dynamic`"))
	return cmfDynamicQuery{NewQuery(mods...)}
}

// FindCMFDynamic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFDynamic(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFDynamic, error) {
	cmfDynamicObj := &CMFDynamic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_dynamic` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfDynamicObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_dynamic")
	}

	return cmfDynamicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFDynamic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_dynamic provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfDynamicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfDynamicInsertCacheMut.RLock()
	cache, cached := cmfDynamicInsertCache[key]
	cmfDynamicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfDynamicAllColumns,
			cmfDynamicColumnsWithDefault,
			cmfDynamicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfDynamicType, cmfDynamicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfDynamicType, cmfDynamicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_dynamic` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_dynamic` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_dynamic` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfDynamicPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_dynamic")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfDynamicMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_dynamic")
	}

CacheNoHooks:
	if !cached {
		cmfDynamicInsertCacheMut.Lock()
		cmfDynamicInsertCache[key] = cache
		cmfDynamicInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFDynamic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFDynamic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfDynamicUpdateCacheMut.RLock()
	cache, cached := cmfDynamicUpdateCache[key]
	cmfDynamicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfDynamicAllColumns,
			cmfDynamicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_dynamic, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_dynamic` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfDynamicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfDynamicType, cmfDynamicMapping, append(wl, cmfDynamicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_dynamic row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_dynamic")
	}

	if !cached {
		cmfDynamicUpdateCacheMut.Lock()
		cmfDynamicUpdateCache[key] = cache
		cmfDynamicUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfDynamicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_dynamic")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_dynamic")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFDynamicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfDynamicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_dynamic` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfDynamicPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfDynamic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfDynamic")
	}
	return rowsAff, nil
}

var mySQLCMFDynamicUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFDynamic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_dynamic provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfDynamicColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFDynamicUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfDynamicUpsertCacheMut.RLock()
	cache, cached := cmfDynamicUpsertCache[key]
	cmfDynamicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfDynamicAllColumns,
			cmfDynamicColumnsWithDefault,
			cmfDynamicColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfDynamicAllColumns,
			cmfDynamicPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_dynamic, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_dynamic`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_dynamic` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfDynamicType, cmfDynamicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfDynamicType, cmfDynamicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_dynamic")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfDynamicMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfDynamicType, cmfDynamicMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_dynamic")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_dynamic")
	}

CacheNoHooks:
	if !cached {
		cmfDynamicUpsertCacheMut.Lock()
		cmfDynamicUpsertCache[key] = cache
		cmfDynamicUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFDynamic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFDynamic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFDynamic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfDynamicPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_dynamic` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_dynamic")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_dynamic")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfDynamicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfDynamicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_dynamic")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_dynamic")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFDynamicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfDynamicBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfDynamicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_dynamic` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfDynamicPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfDynamic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_dynamic")
	}

	if len(cmfDynamicAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFDynamic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFDynamic(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFDynamicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFDynamicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfDynamicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_dynamic`.* FROM `cmf_dynamic` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfDynamicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFDynamicSlice")
	}

	*o = slice

	return nil
}

// CMFDynamicExists checks if the CMFDynamic row exists.
func CMFDynamicExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_dynamic` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_dynamic exists")
	}

	return exists, nil
}
