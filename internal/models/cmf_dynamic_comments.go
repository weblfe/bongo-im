// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFDynamicComment is an object representing the database table.
type CMFDynamicComment struct {
	ID        uint   `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID       int    `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Touid     int    `boil:"touid" json:"touid" toml:"touid" yaml:"touid"`
	Dynamicid int    `boil:"dynamicid" json:"dynamicid" toml:"dynamicid" yaml:"dynamicid"`
	Commentid int    `boil:"commentid" json:"commentid" toml:"commentid" yaml:"commentid"`
	Parentid  int    `boil:"parentid" json:"parentid" toml:"parentid" yaml:"parentid"`
	Content   string `boil:"content" json:"content" toml:"content" yaml:"content"`
	Likes     int    `boil:"likes" json:"likes" toml:"likes" yaml:"likes"`
	Addtime   int    `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Type      bool   `boil:"type" json:"type" toml:"type" yaml:"type"`
	Voice     string `boil:"voice" json:"voice" toml:"voice" yaml:"voice"`
	Length    int    `boil:"length" json:"length" toml:"length" yaml:"length"`

	R *cmfDynamicCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfDynamicCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFDynamicCommentColumns = struct {
	ID        string
	UID       string
	Touid     string
	Dynamicid string
	Commentid string
	Parentid  string
	Content   string
	Likes     string
	Addtime   string
	Type      string
	Voice     string
	Length    string
}{
	ID:        "id",
	UID:       "uid",
	Touid:     "touid",
	Dynamicid: "dynamicid",
	Commentid: "commentid",
	Parentid:  "parentid",
	Content:   "content",
	Likes:     "likes",
	Addtime:   "addtime",
	Type:      "type",
	Voice:     "voice",
	Length:    "length",
}

// Generated where

var CMFDynamicCommentWhere = struct {
	ID        whereHelperuint
	UID       whereHelperint
	Touid     whereHelperint
	Dynamicid whereHelperint
	Commentid whereHelperint
	Parentid  whereHelperint
	Content   whereHelperstring
	Likes     whereHelperint
	Addtime   whereHelperint
	Type      whereHelperbool
	Voice     whereHelperstring
	Length    whereHelperint
}{
	ID:        whereHelperuint{field: "`cmf_dynamic_comments`.`id`"},
	UID:       whereHelperint{field: "`cmf_dynamic_comments`.`uid`"},
	Touid:     whereHelperint{field: "`cmf_dynamic_comments`.`touid`"},
	Dynamicid: whereHelperint{field: "`cmf_dynamic_comments`.`dynamicid`"},
	Commentid: whereHelperint{field: "`cmf_dynamic_comments`.`commentid`"},
	Parentid:  whereHelperint{field: "`cmf_dynamic_comments`.`parentid`"},
	Content:   whereHelperstring{field: "`cmf_dynamic_comments`.`content`"},
	Likes:     whereHelperint{field: "`cmf_dynamic_comments`.`likes`"},
	Addtime:   whereHelperint{field: "`cmf_dynamic_comments`.`addtime`"},
	Type:      whereHelperbool{field: "`cmf_dynamic_comments`.`type`"},
	Voice:     whereHelperstring{field: "`cmf_dynamic_comments`.`voice`"},
	Length:    whereHelperint{field: "`cmf_dynamic_comments`.`length`"},
}

// CMFDynamicCommentRels is where relationship names are stored.
var CMFDynamicCommentRels = struct {
}{}

// cmfDynamicCommentR is where relationships are stored.
type cmfDynamicCommentR struct {
}

// NewStruct creates a new relationship struct
func (*cmfDynamicCommentR) NewStruct() *cmfDynamicCommentR {
	return &cmfDynamicCommentR{}
}

// cmfDynamicCommentL is where Load methods for each relationship are stored.
type cmfDynamicCommentL struct{}

var (
	cmfDynamicCommentAllColumns            = []string{"id", "uid", "touid", "dynamicid", "commentid", "parentid", "content", "likes", "addtime", "type", "voice", "length"}
	cmfDynamicCommentColumnsWithoutDefault = []string{"content", "voice"}
	cmfDynamicCommentColumnsWithDefault    = []string{"id", "uid", "touid", "dynamicid", "commentid", "parentid", "likes", "addtime", "type", "length"}
	cmfDynamicCommentPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFDynamicCommentSlice is an alias for a slice of pointers to CMFDynamicComment.
	// This should generally be used opposed to []CMFDynamicComment.
	CMFDynamicCommentSlice []*CMFDynamicComment
	// CMFDynamicCommentHook is the signature for custom CMFDynamicComment hook methods
	CMFDynamicCommentHook func(context.Context, boil.ContextExecutor, *CMFDynamicComment) error

	cmfDynamicCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfDynamicCommentType                 = reflect.TypeOf(&CMFDynamicComment{})
	cmfDynamicCommentMapping              = queries.MakeStructMapping(cmfDynamicCommentType)
	cmfDynamicCommentPrimaryKeyMapping, _ = queries.BindMapping(cmfDynamicCommentType, cmfDynamicCommentMapping, cmfDynamicCommentPrimaryKeyColumns)
	cmfDynamicCommentInsertCacheMut       sync.RWMutex
	cmfDynamicCommentInsertCache          = make(map[string]insertCache)
	cmfDynamicCommentUpdateCacheMut       sync.RWMutex
	cmfDynamicCommentUpdateCache          = make(map[string]updateCache)
	cmfDynamicCommentUpsertCacheMut       sync.RWMutex
	cmfDynamicCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfDynamicCommentBeforeInsertHooks []CMFDynamicCommentHook
var cmfDynamicCommentBeforeUpdateHooks []CMFDynamicCommentHook
var cmfDynamicCommentBeforeDeleteHooks []CMFDynamicCommentHook
var cmfDynamicCommentBeforeUpsertHooks []CMFDynamicCommentHook

var cmfDynamicCommentAfterInsertHooks []CMFDynamicCommentHook
var cmfDynamicCommentAfterSelectHooks []CMFDynamicCommentHook
var cmfDynamicCommentAfterUpdateHooks []CMFDynamicCommentHook
var cmfDynamicCommentAfterDeleteHooks []CMFDynamicCommentHook
var cmfDynamicCommentAfterUpsertHooks []CMFDynamicCommentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFDynamicComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFDynamicComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFDynamicComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFDynamicComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFDynamicComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFDynamicComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFDynamicComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFDynamicComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFDynamicComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFDynamicCommentHook registers your hook function for all future operations.
func AddCMFDynamicCommentHook(hookPoint boil.HookPoint, cmfDynamicCommentHook CMFDynamicCommentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfDynamicCommentBeforeInsertHooks = append(cmfDynamicCommentBeforeInsertHooks, cmfDynamicCommentHook)
	case boil.BeforeUpdateHook:
		cmfDynamicCommentBeforeUpdateHooks = append(cmfDynamicCommentBeforeUpdateHooks, cmfDynamicCommentHook)
	case boil.BeforeDeleteHook:
		cmfDynamicCommentBeforeDeleteHooks = append(cmfDynamicCommentBeforeDeleteHooks, cmfDynamicCommentHook)
	case boil.BeforeUpsertHook:
		cmfDynamicCommentBeforeUpsertHooks = append(cmfDynamicCommentBeforeUpsertHooks, cmfDynamicCommentHook)
	case boil.AfterInsertHook:
		cmfDynamicCommentAfterInsertHooks = append(cmfDynamicCommentAfterInsertHooks, cmfDynamicCommentHook)
	case boil.AfterSelectHook:
		cmfDynamicCommentAfterSelectHooks = append(cmfDynamicCommentAfterSelectHooks, cmfDynamicCommentHook)
	case boil.AfterUpdateHook:
		cmfDynamicCommentAfterUpdateHooks = append(cmfDynamicCommentAfterUpdateHooks, cmfDynamicCommentHook)
	case boil.AfterDeleteHook:
		cmfDynamicCommentAfterDeleteHooks = append(cmfDynamicCommentAfterDeleteHooks, cmfDynamicCommentHook)
	case boil.AfterUpsertHook:
		cmfDynamicCommentAfterUpsertHooks = append(cmfDynamicCommentAfterUpsertHooks, cmfDynamicCommentHook)
	}
}

// One returns a single cmfDynamicComment record from the query.
func (q cmfDynamicCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFDynamicComment, error) {
	o := &CMFDynamicComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_dynamic_comments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFDynamicComment records from the query.
func (q cmfDynamicCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFDynamicCommentSlice, error) {
	var o []*CMFDynamicComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFDynamicComment slice")
	}

	if len(cmfDynamicCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFDynamicComment records in the query.
func (q cmfDynamicCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_dynamic_comments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfDynamicCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_dynamic_comments exists")
	}

	return count > 0, nil
}

// CMFDynamicComments retrieves all the records using an executor.
func CMFDynamicComments(mods ...qm.QueryMod) cmfDynamicCommentQuery {
	mods = append(mods, qm.From("`cmf_dynamic_comments`"))
	return cmfDynamicCommentQuery{NewQuery(mods...)}
}

// FindCMFDynamicComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFDynamicComment(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFDynamicComment, error) {
	cmfDynamicCommentObj := &CMFDynamicComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_dynamic_comments` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfDynamicCommentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_dynamic_comments")
	}

	return cmfDynamicCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFDynamicComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_dynamic_comments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfDynamicCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfDynamicCommentInsertCacheMut.RLock()
	cache, cached := cmfDynamicCommentInsertCache[key]
	cmfDynamicCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfDynamicCommentAllColumns,
			cmfDynamicCommentColumnsWithDefault,
			cmfDynamicCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfDynamicCommentType, cmfDynamicCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfDynamicCommentType, cmfDynamicCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_dynamic_comments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_dynamic_comments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_dynamic_comments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfDynamicCommentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_dynamic_comments")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfDynamicCommentMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_dynamic_comments")
	}

CacheNoHooks:
	if !cached {
		cmfDynamicCommentInsertCacheMut.Lock()
		cmfDynamicCommentInsertCache[key] = cache
		cmfDynamicCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFDynamicComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFDynamicComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfDynamicCommentUpdateCacheMut.RLock()
	cache, cached := cmfDynamicCommentUpdateCache[key]
	cmfDynamicCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfDynamicCommentAllColumns,
			cmfDynamicCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_dynamic_comments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_dynamic_comments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfDynamicCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfDynamicCommentType, cmfDynamicCommentMapping, append(wl, cmfDynamicCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_dynamic_comments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_dynamic_comments")
	}

	if !cached {
		cmfDynamicCommentUpdateCacheMut.Lock()
		cmfDynamicCommentUpdateCache[key] = cache
		cmfDynamicCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfDynamicCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_dynamic_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_dynamic_comments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFDynamicCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfDynamicCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_dynamic_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfDynamicCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfDynamicComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfDynamicComment")
	}
	return rowsAff, nil
}

var mySQLCMFDynamicCommentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFDynamicComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_dynamic_comments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfDynamicCommentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFDynamicCommentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfDynamicCommentUpsertCacheMut.RLock()
	cache, cached := cmfDynamicCommentUpsertCache[key]
	cmfDynamicCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfDynamicCommentAllColumns,
			cmfDynamicCommentColumnsWithDefault,
			cmfDynamicCommentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfDynamicCommentAllColumns,
			cmfDynamicCommentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_dynamic_comments, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_dynamic_comments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_dynamic_comments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfDynamicCommentType, cmfDynamicCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfDynamicCommentType, cmfDynamicCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_dynamic_comments")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfDynamicCommentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfDynamicCommentType, cmfDynamicCommentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_dynamic_comments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_dynamic_comments")
	}

CacheNoHooks:
	if !cached {
		cmfDynamicCommentUpsertCacheMut.Lock()
		cmfDynamicCommentUpsertCache[key] = cache
		cmfDynamicCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFDynamicComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFDynamicComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFDynamicComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfDynamicCommentPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_dynamic_comments` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_dynamic_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_dynamic_comments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfDynamicCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfDynamicCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_dynamic_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_dynamic_comments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFDynamicCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfDynamicCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfDynamicCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_dynamic_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfDynamicCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfDynamicComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_dynamic_comments")
	}

	if len(cmfDynamicCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFDynamicComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFDynamicComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFDynamicCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFDynamicCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfDynamicCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_dynamic_comments`.* FROM `cmf_dynamic_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfDynamicCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFDynamicCommentSlice")
	}

	*o = slice

	return nil
}

// CMFDynamicCommentExists checks if the CMFDynamicComment row exists.
func CMFDynamicCommentExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_dynamic_comments` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_dynamic_comments exists")
	}

	return exists, nil
}
