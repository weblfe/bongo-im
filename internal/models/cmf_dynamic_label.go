// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFDynamicLabel is an object representing the database table.
type CMFDynamicLabel struct {
	ID          uint   `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Thumb       string `boil:"thumb" json:"thumb" toml:"thumb" yaml:"thumb"`
	Orderno     int    `boil:"orderno" json:"orderno" toml:"orderno" yaml:"orderno"`
	Isrecommend bool   `boil:"isrecommend" json:"isrecommend" toml:"isrecommend" yaml:"isrecommend"`
	UseNums     int    `boil:"use_nums" json:"use_nums" toml:"use_nums" yaml:"use_nums"`

	R *cmfDynamicLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfDynamicLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFDynamicLabelColumns = struct {
	ID          string
	Name        string
	Thumb       string
	Orderno     string
	Isrecommend string
	UseNums     string
}{
	ID:          "id",
	Name:        "name",
	Thumb:       "thumb",
	Orderno:     "orderno",
	Isrecommend: "isrecommend",
	UseNums:     "use_nums",
}

// Generated where

var CMFDynamicLabelWhere = struct {
	ID          whereHelperuint
	Name        whereHelperstring
	Thumb       whereHelperstring
	Orderno     whereHelperint
	Isrecommend whereHelperbool
	UseNums     whereHelperint
}{
	ID:          whereHelperuint{field: "`cmf_dynamic_label`.`id`"},
	Name:        whereHelperstring{field: "`cmf_dynamic_label`.`name`"},
	Thumb:       whereHelperstring{field: "`cmf_dynamic_label`.`thumb`"},
	Orderno:     whereHelperint{field: "`cmf_dynamic_label`.`orderno`"},
	Isrecommend: whereHelperbool{field: "`cmf_dynamic_label`.`isrecommend`"},
	UseNums:     whereHelperint{field: "`cmf_dynamic_label`.`use_nums`"},
}

// CMFDynamicLabelRels is where relationship names are stored.
var CMFDynamicLabelRels = struct {
}{}

// cmfDynamicLabelR is where relationships are stored.
type cmfDynamicLabelR struct {
}

// NewStruct creates a new relationship struct
func (*cmfDynamicLabelR) NewStruct() *cmfDynamicLabelR {
	return &cmfDynamicLabelR{}
}

// cmfDynamicLabelL is where Load methods for each relationship are stored.
type cmfDynamicLabelL struct{}

var (
	cmfDynamicLabelAllColumns            = []string{"id", "name", "thumb", "orderno", "isrecommend", "use_nums"}
	cmfDynamicLabelColumnsWithoutDefault = []string{"name", "thumb"}
	cmfDynamicLabelColumnsWithDefault    = []string{"id", "orderno", "isrecommend", "use_nums"}
	cmfDynamicLabelPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFDynamicLabelSlice is an alias for a slice of pointers to CMFDynamicLabel.
	// This should generally be used opposed to []CMFDynamicLabel.
	CMFDynamicLabelSlice []*CMFDynamicLabel
	// CMFDynamicLabelHook is the signature for custom CMFDynamicLabel hook methods
	CMFDynamicLabelHook func(context.Context, boil.ContextExecutor, *CMFDynamicLabel) error

	cmfDynamicLabelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfDynamicLabelType                 = reflect.TypeOf(&CMFDynamicLabel{})
	cmfDynamicLabelMapping              = queries.MakeStructMapping(cmfDynamicLabelType)
	cmfDynamicLabelPrimaryKeyMapping, _ = queries.BindMapping(cmfDynamicLabelType, cmfDynamicLabelMapping, cmfDynamicLabelPrimaryKeyColumns)
	cmfDynamicLabelInsertCacheMut       sync.RWMutex
	cmfDynamicLabelInsertCache          = make(map[string]insertCache)
	cmfDynamicLabelUpdateCacheMut       sync.RWMutex
	cmfDynamicLabelUpdateCache          = make(map[string]updateCache)
	cmfDynamicLabelUpsertCacheMut       sync.RWMutex
	cmfDynamicLabelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfDynamicLabelBeforeInsertHooks []CMFDynamicLabelHook
var cmfDynamicLabelBeforeUpdateHooks []CMFDynamicLabelHook
var cmfDynamicLabelBeforeDeleteHooks []CMFDynamicLabelHook
var cmfDynamicLabelBeforeUpsertHooks []CMFDynamicLabelHook

var cmfDynamicLabelAfterInsertHooks []CMFDynamicLabelHook
var cmfDynamicLabelAfterSelectHooks []CMFDynamicLabelHook
var cmfDynamicLabelAfterUpdateHooks []CMFDynamicLabelHook
var cmfDynamicLabelAfterDeleteHooks []CMFDynamicLabelHook
var cmfDynamicLabelAfterUpsertHooks []CMFDynamicLabelHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFDynamicLabel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicLabelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFDynamicLabel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicLabelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFDynamicLabel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicLabelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFDynamicLabel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicLabelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFDynamicLabel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicLabelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFDynamicLabel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicLabelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFDynamicLabel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicLabelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFDynamicLabel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicLabelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFDynamicLabel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfDynamicLabelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFDynamicLabelHook registers your hook function for all future operations.
func AddCMFDynamicLabelHook(hookPoint boil.HookPoint, cmfDynamicLabelHook CMFDynamicLabelHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfDynamicLabelBeforeInsertHooks = append(cmfDynamicLabelBeforeInsertHooks, cmfDynamicLabelHook)
	case boil.BeforeUpdateHook:
		cmfDynamicLabelBeforeUpdateHooks = append(cmfDynamicLabelBeforeUpdateHooks, cmfDynamicLabelHook)
	case boil.BeforeDeleteHook:
		cmfDynamicLabelBeforeDeleteHooks = append(cmfDynamicLabelBeforeDeleteHooks, cmfDynamicLabelHook)
	case boil.BeforeUpsertHook:
		cmfDynamicLabelBeforeUpsertHooks = append(cmfDynamicLabelBeforeUpsertHooks, cmfDynamicLabelHook)
	case boil.AfterInsertHook:
		cmfDynamicLabelAfterInsertHooks = append(cmfDynamicLabelAfterInsertHooks, cmfDynamicLabelHook)
	case boil.AfterSelectHook:
		cmfDynamicLabelAfterSelectHooks = append(cmfDynamicLabelAfterSelectHooks, cmfDynamicLabelHook)
	case boil.AfterUpdateHook:
		cmfDynamicLabelAfterUpdateHooks = append(cmfDynamicLabelAfterUpdateHooks, cmfDynamicLabelHook)
	case boil.AfterDeleteHook:
		cmfDynamicLabelAfterDeleteHooks = append(cmfDynamicLabelAfterDeleteHooks, cmfDynamicLabelHook)
	case boil.AfterUpsertHook:
		cmfDynamicLabelAfterUpsertHooks = append(cmfDynamicLabelAfterUpsertHooks, cmfDynamicLabelHook)
	}
}

// One returns a single cmfDynamicLabel record from the query.
func (q cmfDynamicLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFDynamicLabel, error) {
	o := &CMFDynamicLabel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_dynamic_label")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFDynamicLabel records from the query.
func (q cmfDynamicLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFDynamicLabelSlice, error) {
	var o []*CMFDynamicLabel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFDynamicLabel slice")
	}

	if len(cmfDynamicLabelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFDynamicLabel records in the query.
func (q cmfDynamicLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_dynamic_label rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfDynamicLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_dynamic_label exists")
	}

	return count > 0, nil
}

// CMFDynamicLabels retrieves all the records using an executor.
func CMFDynamicLabels(mods ...qm.QueryMod) cmfDynamicLabelQuery {
	mods = append(mods, qm.From("`cmf_dynamic_label`"))
	return cmfDynamicLabelQuery{NewQuery(mods...)}
}

// FindCMFDynamicLabel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFDynamicLabel(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFDynamicLabel, error) {
	cmfDynamicLabelObj := &CMFDynamicLabel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_dynamic_label` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfDynamicLabelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_dynamic_label")
	}

	return cmfDynamicLabelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFDynamicLabel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_dynamic_label provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfDynamicLabelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfDynamicLabelInsertCacheMut.RLock()
	cache, cached := cmfDynamicLabelInsertCache[key]
	cmfDynamicLabelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfDynamicLabelAllColumns,
			cmfDynamicLabelColumnsWithDefault,
			cmfDynamicLabelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfDynamicLabelType, cmfDynamicLabelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfDynamicLabelType, cmfDynamicLabelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_dynamic_label` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_dynamic_label` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_dynamic_label` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfDynamicLabelPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_dynamic_label")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfDynamicLabelMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_dynamic_label")
	}

CacheNoHooks:
	if !cached {
		cmfDynamicLabelInsertCacheMut.Lock()
		cmfDynamicLabelInsertCache[key] = cache
		cmfDynamicLabelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFDynamicLabel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFDynamicLabel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfDynamicLabelUpdateCacheMut.RLock()
	cache, cached := cmfDynamicLabelUpdateCache[key]
	cmfDynamicLabelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfDynamicLabelAllColumns,
			cmfDynamicLabelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_dynamic_label, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_dynamic_label` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfDynamicLabelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfDynamicLabelType, cmfDynamicLabelMapping, append(wl, cmfDynamicLabelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_dynamic_label row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_dynamic_label")
	}

	if !cached {
		cmfDynamicLabelUpdateCacheMut.Lock()
		cmfDynamicLabelUpdateCache[key] = cache
		cmfDynamicLabelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfDynamicLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_dynamic_label")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_dynamic_label")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFDynamicLabelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfDynamicLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_dynamic_label` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfDynamicLabelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfDynamicLabel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfDynamicLabel")
	}
	return rowsAff, nil
}

var mySQLCMFDynamicLabelUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFDynamicLabel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_dynamic_label provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfDynamicLabelColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFDynamicLabelUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfDynamicLabelUpsertCacheMut.RLock()
	cache, cached := cmfDynamicLabelUpsertCache[key]
	cmfDynamicLabelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfDynamicLabelAllColumns,
			cmfDynamicLabelColumnsWithDefault,
			cmfDynamicLabelColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfDynamicLabelAllColumns,
			cmfDynamicLabelPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_dynamic_label, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_dynamic_label`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_dynamic_label` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfDynamicLabelType, cmfDynamicLabelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfDynamicLabelType, cmfDynamicLabelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_dynamic_label")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfDynamicLabelMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfDynamicLabelType, cmfDynamicLabelMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_dynamic_label")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_dynamic_label")
	}

CacheNoHooks:
	if !cached {
		cmfDynamicLabelUpsertCacheMut.Lock()
		cmfDynamicLabelUpsertCache[key] = cache
		cmfDynamicLabelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFDynamicLabel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFDynamicLabel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFDynamicLabel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfDynamicLabelPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_dynamic_label` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_dynamic_label")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_dynamic_label")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfDynamicLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfDynamicLabelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_dynamic_label")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_dynamic_label")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFDynamicLabelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfDynamicLabelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfDynamicLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_dynamic_label` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfDynamicLabelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfDynamicLabel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_dynamic_label")
	}

	if len(cmfDynamicLabelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFDynamicLabel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFDynamicLabel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFDynamicLabelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFDynamicLabelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfDynamicLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_dynamic_label`.* FROM `cmf_dynamic_label` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfDynamicLabelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFDynamicLabelSlice")
	}

	*o = slice

	return nil
}

// CMFDynamicLabelExists checks if the CMFDynamicLabel row exists.
func CMFDynamicLabelExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_dynamic_label` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_dynamic_label exists")
	}

	return exists, nil
}
