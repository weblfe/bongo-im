// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CMFFamily is an object representing the database table.
type CMFFamily struct {
	ID               int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID           int               `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Account          string            `boil:"account" json:"account" toml:"account" yaml:"account"`
	LaborName        string            `boil:"labor_name" json:"labor_name" toml:"labor_name" yaml:"labor_name"`
	LaborStatus      int16             `boil:"labor_status" json:"labor_status" toml:"labor_status" yaml:"labor_status"`
	MasterName       string            `boil:"master_name" json:"master_name" toml:"master_name" yaml:"master_name"`
	MasterPhonefix   string            `boil:"master_phonefix" json:"master_phonefix" toml:"master_phonefix" yaml:"master_phonefix"`
	MasterPhone      string            `boil:"master_phone" json:"master_phone" toml:"master_phone" yaml:"master_phone"`
	LaborEmail       string            `boil:"labor_email" json:"labor_email" toml:"labor_email" yaml:"labor_email"`
	CompanyName      string            `boil:"company_name" json:"company_name" toml:"company_name" yaml:"company_name"`
	Address          null.String       `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	Position         null.String       `boil:"position" json:"position,omitempty" toml:"position" yaml:"position,omitempty"`
	TransferChannel  string            `boil:"transfer_channel" json:"transfer_channel" toml:"transfer_channel" yaml:"transfer_channel"`
	TransferAccounts string            `boil:"transfer_accounts" json:"transfer_accounts" toml:"transfer_accounts" yaml:"transfer_accounts"`
	BasicSchema      types.NullDecimal `boil:"basic_schema" json:"basic_schema,omitempty" toml:"basic_schema" yaml:"basic_schema,omitempty"`
	BrokerageSchema  types.NullDecimal `boil:"brokerage_schema" json:"brokerage_schema,omitempty" toml:"brokerage_schema" yaml:"brokerage_schema,omitempty"`
	LaborID          string            `boil:"labor_id" json:"labor_id" toml:"labor_id" yaml:"labor_id"`
	BusinessUID      int               `boil:"business_uid" json:"business_uid" toml:"business_uid" yaml:"business_uid"`
	CreatorUID       int               `boil:"creator_uid" json:"creator_uid" toml:"creator_uid" yaml:"creator_uid"`
	Timestamp        int               `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	State            null.Bool         `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	CreatedTime      int               `boil:"created_time" json:"created_time" toml:"created_time" yaml:"created_time"`
	UpdateTime       int               `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *cmfFamilyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfFamilyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFFamilyColumns = struct {
	ID               string
	UserID           string
	Account          string
	LaborName        string
	LaborStatus      string
	MasterName       string
	MasterPhonefix   string
	MasterPhone      string
	LaborEmail       string
	CompanyName      string
	Address          string
	Position         string
	TransferChannel  string
	TransferAccounts string
	BasicSchema      string
	BrokerageSchema  string
	LaborID          string
	BusinessUID      string
	CreatorUID       string
	Timestamp        string
	State            string
	CreatedTime      string
	UpdateTime       string
}{
	ID:               "id",
	UserID:           "user_id",
	Account:          "account",
	LaborName:        "labor_name",
	LaborStatus:      "labor_status",
	MasterName:       "master_name",
	MasterPhonefix:   "master_phonefix",
	MasterPhone:      "master_phone",
	LaborEmail:       "labor_email",
	CompanyName:      "company_name",
	Address:          "address",
	Position:         "position",
	TransferChannel:  "transfer_channel",
	TransferAccounts: "transfer_accounts",
	BasicSchema:      "basic_schema",
	BrokerageSchema:  "brokerage_schema",
	LaborID:          "labor_id",
	BusinessUID:      "business_uid",
	CreatorUID:       "creator_uid",
	Timestamp:        "timestamp",
	State:            "state",
	CreatedTime:      "created_time",
	UpdateTime:       "update_time",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CMFFamilyWhere = struct {
	ID               whereHelperint
	UserID           whereHelperint
	Account          whereHelperstring
	LaborName        whereHelperstring
	LaborStatus      whereHelperint16
	MasterName       whereHelperstring
	MasterPhonefix   whereHelperstring
	MasterPhone      whereHelperstring
	LaborEmail       whereHelperstring
	CompanyName      whereHelperstring
	Address          whereHelpernull_String
	Position         whereHelpernull_String
	TransferChannel  whereHelperstring
	TransferAccounts whereHelperstring
	BasicSchema      whereHelpertypes_NullDecimal
	BrokerageSchema  whereHelpertypes_NullDecimal
	LaborID          whereHelperstring
	BusinessUID      whereHelperint
	CreatorUID       whereHelperint
	Timestamp        whereHelperint
	State            whereHelpernull_Bool
	CreatedTime      whereHelperint
	UpdateTime       whereHelperint
}{
	ID:               whereHelperint{field: "`cmf_family`.`id`"},
	UserID:           whereHelperint{field: "`cmf_family`.`user_id`"},
	Account:          whereHelperstring{field: "`cmf_family`.`account`"},
	LaborName:        whereHelperstring{field: "`cmf_family`.`labor_name`"},
	LaborStatus:      whereHelperint16{field: "`cmf_family`.`labor_status`"},
	MasterName:       whereHelperstring{field: "`cmf_family`.`master_name`"},
	MasterPhonefix:   whereHelperstring{field: "`cmf_family`.`master_phonefix`"},
	MasterPhone:      whereHelperstring{field: "`cmf_family`.`master_phone`"},
	LaborEmail:       whereHelperstring{field: "`cmf_family`.`labor_email`"},
	CompanyName:      whereHelperstring{field: "`cmf_family`.`company_name`"},
	Address:          whereHelpernull_String{field: "`cmf_family`.`address`"},
	Position:         whereHelpernull_String{field: "`cmf_family`.`position`"},
	TransferChannel:  whereHelperstring{field: "`cmf_family`.`transfer_channel`"},
	TransferAccounts: whereHelperstring{field: "`cmf_family`.`transfer_accounts`"},
	BasicSchema:      whereHelpertypes_NullDecimal{field: "`cmf_family`.`basic_schema`"},
	BrokerageSchema:  whereHelpertypes_NullDecimal{field: "`cmf_family`.`brokerage_schema`"},
	LaborID:          whereHelperstring{field: "`cmf_family`.`labor_id`"},
	BusinessUID:      whereHelperint{field: "`cmf_family`.`business_uid`"},
	CreatorUID:       whereHelperint{field: "`cmf_family`.`creator_uid`"},
	Timestamp:        whereHelperint{field: "`cmf_family`.`timestamp`"},
	State:            whereHelpernull_Bool{field: "`cmf_family`.`state`"},
	CreatedTime:      whereHelperint{field: "`cmf_family`.`created_time`"},
	UpdateTime:       whereHelperint{field: "`cmf_family`.`update_time`"},
}

// CMFFamilyRels is where relationship names are stored.
var CMFFamilyRels = struct {
}{}

// cmfFamilyR is where relationships are stored.
type cmfFamilyR struct {
}

// NewStruct creates a new relationship struct
func (*cmfFamilyR) NewStruct() *cmfFamilyR {
	return &cmfFamilyR{}
}

// cmfFamilyL is where Load methods for each relationship are stored.
type cmfFamilyL struct{}

var (
	cmfFamilyAllColumns            = []string{"id", "user_id", "account", "labor_name", "labor_status", "master_name", "master_phonefix", "master_phone", "labor_email", "company_name", "address", "position", "transfer_channel", "transfer_accounts", "basic_schema", "brokerage_schema", "labor_id", "business_uid", "creator_uid", "timestamp", "state", "created_time", "update_time"}
	cmfFamilyColumnsWithoutDefault = []string{"user_id", "account", "labor_name", "master_name", "master_phone", "labor_email", "company_name", "address", "position", "transfer_channel", "transfer_accounts", "basic_schema", "brokerage_schema", "labor_id", "business_uid", "creator_uid"}
	cmfFamilyColumnsWithDefault    = []string{"id", "labor_status", "master_phonefix", "timestamp", "state", "created_time", "update_time"}
	cmfFamilyPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFFamilySlice is an alias for a slice of pointers to CMFFamily.
	// This should generally be used opposed to []CMFFamily.
	CMFFamilySlice []*CMFFamily
	// CMFFamilyHook is the signature for custom CMFFamily hook methods
	CMFFamilyHook func(context.Context, boil.ContextExecutor, *CMFFamily) error

	cmfFamilyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfFamilyType                 = reflect.TypeOf(&CMFFamily{})
	cmfFamilyMapping              = queries.MakeStructMapping(cmfFamilyType)
	cmfFamilyPrimaryKeyMapping, _ = queries.BindMapping(cmfFamilyType, cmfFamilyMapping, cmfFamilyPrimaryKeyColumns)
	cmfFamilyInsertCacheMut       sync.RWMutex
	cmfFamilyInsertCache          = make(map[string]insertCache)
	cmfFamilyUpdateCacheMut       sync.RWMutex
	cmfFamilyUpdateCache          = make(map[string]updateCache)
	cmfFamilyUpsertCacheMut       sync.RWMutex
	cmfFamilyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfFamilyBeforeInsertHooks []CMFFamilyHook
var cmfFamilyBeforeUpdateHooks []CMFFamilyHook
var cmfFamilyBeforeDeleteHooks []CMFFamilyHook
var cmfFamilyBeforeUpsertHooks []CMFFamilyHook

var cmfFamilyAfterInsertHooks []CMFFamilyHook
var cmfFamilyAfterSelectHooks []CMFFamilyHook
var cmfFamilyAfterUpdateHooks []CMFFamilyHook
var cmfFamilyAfterDeleteHooks []CMFFamilyHook
var cmfFamilyAfterUpsertHooks []CMFFamilyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFFamily) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFFamily) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFFamily) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFFamily) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFFamily) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFFamily) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFFamily) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFFamily) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFFamily) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFFamilyHook registers your hook function for all future operations.
func AddCMFFamilyHook(hookPoint boil.HookPoint, cmfFamilyHook CMFFamilyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfFamilyBeforeInsertHooks = append(cmfFamilyBeforeInsertHooks, cmfFamilyHook)
	case boil.BeforeUpdateHook:
		cmfFamilyBeforeUpdateHooks = append(cmfFamilyBeforeUpdateHooks, cmfFamilyHook)
	case boil.BeforeDeleteHook:
		cmfFamilyBeforeDeleteHooks = append(cmfFamilyBeforeDeleteHooks, cmfFamilyHook)
	case boil.BeforeUpsertHook:
		cmfFamilyBeforeUpsertHooks = append(cmfFamilyBeforeUpsertHooks, cmfFamilyHook)
	case boil.AfterInsertHook:
		cmfFamilyAfterInsertHooks = append(cmfFamilyAfterInsertHooks, cmfFamilyHook)
	case boil.AfterSelectHook:
		cmfFamilyAfterSelectHooks = append(cmfFamilyAfterSelectHooks, cmfFamilyHook)
	case boil.AfterUpdateHook:
		cmfFamilyAfterUpdateHooks = append(cmfFamilyAfterUpdateHooks, cmfFamilyHook)
	case boil.AfterDeleteHook:
		cmfFamilyAfterDeleteHooks = append(cmfFamilyAfterDeleteHooks, cmfFamilyHook)
	case boil.AfterUpsertHook:
		cmfFamilyAfterUpsertHooks = append(cmfFamilyAfterUpsertHooks, cmfFamilyHook)
	}
}

// One returns a single cmfFamily record from the query.
func (q cmfFamilyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFFamily, error) {
	o := &CMFFamily{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_family")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFFamily records from the query.
func (q cmfFamilyQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFFamilySlice, error) {
	var o []*CMFFamily

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFFamily slice")
	}

	if len(cmfFamilyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFFamily records in the query.
func (q cmfFamilyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_family rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfFamilyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_family exists")
	}

	return count > 0, nil
}

// CMFFamilies retrieves all the records using an executor.
func CMFFamilies(mods ...qm.QueryMod) cmfFamilyQuery {
	mods = append(mods, qm.From("`cmf_family`"))
	return cmfFamilyQuery{NewQuery(mods...)}
}

// FindCMFFamily retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFFamily(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CMFFamily, error) {
	cmfFamilyObj := &CMFFamily{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_family` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfFamilyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_family")
	}

	return cmfFamilyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFFamily) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_family provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfFamilyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfFamilyInsertCacheMut.RLock()
	cache, cached := cmfFamilyInsertCache[key]
	cmfFamilyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfFamilyAllColumns,
			cmfFamilyColumnsWithDefault,
			cmfFamilyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfFamilyType, cmfFamilyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfFamilyType, cmfFamilyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_family` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_family` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_family` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfFamilyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_family")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfFamilyMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_family")
	}

CacheNoHooks:
	if !cached {
		cmfFamilyInsertCacheMut.Lock()
		cmfFamilyInsertCache[key] = cache
		cmfFamilyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFFamily.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFFamily) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfFamilyUpdateCacheMut.RLock()
	cache, cached := cmfFamilyUpdateCache[key]
	cmfFamilyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfFamilyAllColumns,
			cmfFamilyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_family, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_family` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfFamilyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfFamilyType, cmfFamilyMapping, append(wl, cmfFamilyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_family row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_family")
	}

	if !cached {
		cmfFamilyUpdateCacheMut.Lock()
		cmfFamilyUpdateCache[key] = cache
		cmfFamilyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfFamilyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_family")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_family")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFFamilySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfFamilyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_family` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfFamilyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfFamily slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfFamily")
	}
	return rowsAff, nil
}

var mySQLCMFFamilyUniqueColumns = []string{
	"id",
	"labor_email",
	"labor_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFFamily) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_family provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfFamilyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFFamilyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfFamilyUpsertCacheMut.RLock()
	cache, cached := cmfFamilyUpsertCache[key]
	cmfFamilyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfFamilyAllColumns,
			cmfFamilyColumnsWithDefault,
			cmfFamilyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfFamilyAllColumns,
			cmfFamilyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_family, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_family`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_family` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfFamilyType, cmfFamilyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfFamilyType, cmfFamilyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_family")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfFamilyMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfFamilyType, cmfFamilyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_family")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_family")
	}

CacheNoHooks:
	if !cached {
		cmfFamilyUpsertCacheMut.Lock()
		cmfFamilyUpsertCache[key] = cache
		cmfFamilyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFFamily record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFFamily) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFFamily provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfFamilyPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_family` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_family")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_family")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfFamilyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfFamilyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_family")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_family")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFFamilySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfFamilyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfFamilyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_family` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfFamilyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfFamily slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_family")
	}

	if len(cmfFamilyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFFamily) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFFamily(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFFamilySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFFamilySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfFamilyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_family`.* FROM `cmf_family` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfFamilyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFFamilySlice")
	}

	*o = slice

	return nil
}

// CMFFamilyExists checks if the CMFFamily row exists.
func CMFFamilyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_family` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_family exists")
	}

	return exists, nil
}
