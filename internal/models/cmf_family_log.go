// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFFamilyLog is an object representing the database table.
type CMFFamilyLog struct {
	ID            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatorUID    null.Int    `boil:"creator_uid" json:"creator_uid,omitempty" toml:"creator_uid" yaml:"creator_uid,omitempty"`
	FamilyID      null.Int    `boil:"family_id" json:"family_id,omitempty" toml:"family_id" yaml:"family_id,omitempty"`
	AnchorUID     null.Int64  `boil:"anchor_uid" json:"anchor_uid,omitempty" toml:"anchor_uid" yaml:"anchor_uid,omitempty"`
	Type          null.Int16  `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Comment       null.String `boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`
	Changes       null.String `boil:"changes" json:"changes,omitempty" toml:"changes" yaml:"changes,omitempty"`
	Tag           null.String `boil:"tag" json:"tag,omitempty" toml:"tag" yaml:"tag,omitempty"`
	EffectiveTime null.Time   `boil:"effective_time" json:"effective_time,omitempty" toml:"effective_time" yaml:"effective_time,omitempty"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *cmfFamilyLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfFamilyLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFFamilyLogColumns = struct {
	ID            string
	CreatorUID    string
	FamilyID      string
	AnchorUID     string
	Type          string
	Comment       string
	Changes       string
	Tag           string
	EffectiveTime string
	CreatedAt     string
}{
	ID:            "id",
	CreatorUID:    "creator_uid",
	FamilyID:      "family_id",
	AnchorUID:     "anchor_uid",
	Type:          "type",
	Comment:       "comment",
	Changes:       "changes",
	Tag:           "tag",
	EffectiveTime: "effective_time",
	CreatedAt:     "created_at",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CMFFamilyLogWhere = struct {
	ID            whereHelperint64
	CreatorUID    whereHelpernull_Int
	FamilyID      whereHelpernull_Int
	AnchorUID     whereHelpernull_Int64
	Type          whereHelpernull_Int16
	Comment       whereHelpernull_String
	Changes       whereHelpernull_String
	Tag           whereHelpernull_String
	EffectiveTime whereHelpernull_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "`cmf_family_log`.`id`"},
	CreatorUID:    whereHelpernull_Int{field: "`cmf_family_log`.`creator_uid`"},
	FamilyID:      whereHelpernull_Int{field: "`cmf_family_log`.`family_id`"},
	AnchorUID:     whereHelpernull_Int64{field: "`cmf_family_log`.`anchor_uid`"},
	Type:          whereHelpernull_Int16{field: "`cmf_family_log`.`type`"},
	Comment:       whereHelpernull_String{field: "`cmf_family_log`.`comment`"},
	Changes:       whereHelpernull_String{field: "`cmf_family_log`.`changes`"},
	Tag:           whereHelpernull_String{field: "`cmf_family_log`.`tag`"},
	EffectiveTime: whereHelpernull_Time{field: "`cmf_family_log`.`effective_time`"},
	CreatedAt:     whereHelpertime_Time{field: "`cmf_family_log`.`created_at`"},
}

// CMFFamilyLogRels is where relationship names are stored.
var CMFFamilyLogRels = struct {
}{}

// cmfFamilyLogR is where relationships are stored.
type cmfFamilyLogR struct {
}

// NewStruct creates a new relationship struct
func (*cmfFamilyLogR) NewStruct() *cmfFamilyLogR {
	return &cmfFamilyLogR{}
}

// cmfFamilyLogL is where Load methods for each relationship are stored.
type cmfFamilyLogL struct{}

var (
	cmfFamilyLogAllColumns            = []string{"id", "creator_uid", "family_id", "anchor_uid", "type", "comment", "changes", "tag", "effective_time", "created_at"}
	cmfFamilyLogColumnsWithoutDefault = []string{"creator_uid", "family_id", "anchor_uid", "comment", "changes", "tag", "effective_time", "created_at"}
	cmfFamilyLogColumnsWithDefault    = []string{"id", "type"}
	cmfFamilyLogPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFFamilyLogSlice is an alias for a slice of pointers to CMFFamilyLog.
	// This should generally be used opposed to []CMFFamilyLog.
	CMFFamilyLogSlice []*CMFFamilyLog
	// CMFFamilyLogHook is the signature for custom CMFFamilyLog hook methods
	CMFFamilyLogHook func(context.Context, boil.ContextExecutor, *CMFFamilyLog) error

	cmfFamilyLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfFamilyLogType                 = reflect.TypeOf(&CMFFamilyLog{})
	cmfFamilyLogMapping              = queries.MakeStructMapping(cmfFamilyLogType)
	cmfFamilyLogPrimaryKeyMapping, _ = queries.BindMapping(cmfFamilyLogType, cmfFamilyLogMapping, cmfFamilyLogPrimaryKeyColumns)
	cmfFamilyLogInsertCacheMut       sync.RWMutex
	cmfFamilyLogInsertCache          = make(map[string]insertCache)
	cmfFamilyLogUpdateCacheMut       sync.RWMutex
	cmfFamilyLogUpdateCache          = make(map[string]updateCache)
	cmfFamilyLogUpsertCacheMut       sync.RWMutex
	cmfFamilyLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfFamilyLogBeforeInsertHooks []CMFFamilyLogHook
var cmfFamilyLogBeforeUpdateHooks []CMFFamilyLogHook
var cmfFamilyLogBeforeDeleteHooks []CMFFamilyLogHook
var cmfFamilyLogBeforeUpsertHooks []CMFFamilyLogHook

var cmfFamilyLogAfterInsertHooks []CMFFamilyLogHook
var cmfFamilyLogAfterSelectHooks []CMFFamilyLogHook
var cmfFamilyLogAfterUpdateHooks []CMFFamilyLogHook
var cmfFamilyLogAfterDeleteHooks []CMFFamilyLogHook
var cmfFamilyLogAfterUpsertHooks []CMFFamilyLogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFFamilyLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFFamilyLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFFamilyLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFFamilyLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFFamilyLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFFamilyLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFFamilyLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFFamilyLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFFamilyLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFFamilyLogHook registers your hook function for all future operations.
func AddCMFFamilyLogHook(hookPoint boil.HookPoint, cmfFamilyLogHook CMFFamilyLogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfFamilyLogBeforeInsertHooks = append(cmfFamilyLogBeforeInsertHooks, cmfFamilyLogHook)
	case boil.BeforeUpdateHook:
		cmfFamilyLogBeforeUpdateHooks = append(cmfFamilyLogBeforeUpdateHooks, cmfFamilyLogHook)
	case boil.BeforeDeleteHook:
		cmfFamilyLogBeforeDeleteHooks = append(cmfFamilyLogBeforeDeleteHooks, cmfFamilyLogHook)
	case boil.BeforeUpsertHook:
		cmfFamilyLogBeforeUpsertHooks = append(cmfFamilyLogBeforeUpsertHooks, cmfFamilyLogHook)
	case boil.AfterInsertHook:
		cmfFamilyLogAfterInsertHooks = append(cmfFamilyLogAfterInsertHooks, cmfFamilyLogHook)
	case boil.AfterSelectHook:
		cmfFamilyLogAfterSelectHooks = append(cmfFamilyLogAfterSelectHooks, cmfFamilyLogHook)
	case boil.AfterUpdateHook:
		cmfFamilyLogAfterUpdateHooks = append(cmfFamilyLogAfterUpdateHooks, cmfFamilyLogHook)
	case boil.AfterDeleteHook:
		cmfFamilyLogAfterDeleteHooks = append(cmfFamilyLogAfterDeleteHooks, cmfFamilyLogHook)
	case boil.AfterUpsertHook:
		cmfFamilyLogAfterUpsertHooks = append(cmfFamilyLogAfterUpsertHooks, cmfFamilyLogHook)
	}
}

// One returns a single cmfFamilyLog record from the query.
func (q cmfFamilyLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFFamilyLog, error) {
	o := &CMFFamilyLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_family_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFFamilyLog records from the query.
func (q cmfFamilyLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFFamilyLogSlice, error) {
	var o []*CMFFamilyLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFFamilyLog slice")
	}

	if len(cmfFamilyLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFFamilyLog records in the query.
func (q cmfFamilyLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_family_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfFamilyLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_family_log exists")
	}

	return count > 0, nil
}

// CMFFamilyLogs retrieves all the records using an executor.
func CMFFamilyLogs(mods ...qm.QueryMod) cmfFamilyLogQuery {
	mods = append(mods, qm.From("`cmf_family_log`"))
	return cmfFamilyLogQuery{NewQuery(mods...)}
}

// FindCMFFamilyLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFFamilyLog(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFFamilyLog, error) {
	cmfFamilyLogObj := &CMFFamilyLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_family_log` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfFamilyLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_family_log")
	}

	return cmfFamilyLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFFamilyLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_family_log provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfFamilyLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfFamilyLogInsertCacheMut.RLock()
	cache, cached := cmfFamilyLogInsertCache[key]
	cmfFamilyLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfFamilyLogAllColumns,
			cmfFamilyLogColumnsWithDefault,
			cmfFamilyLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfFamilyLogType, cmfFamilyLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfFamilyLogType, cmfFamilyLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_family_log` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_family_log` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_family_log` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfFamilyLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_family_log")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfFamilyLogMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_family_log")
	}

CacheNoHooks:
	if !cached {
		cmfFamilyLogInsertCacheMut.Lock()
		cmfFamilyLogInsertCache[key] = cache
		cmfFamilyLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFFamilyLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFFamilyLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfFamilyLogUpdateCacheMut.RLock()
	cache, cached := cmfFamilyLogUpdateCache[key]
	cmfFamilyLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfFamilyLogAllColumns,
			cmfFamilyLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_family_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_family_log` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfFamilyLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfFamilyLogType, cmfFamilyLogMapping, append(wl, cmfFamilyLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_family_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_family_log")
	}

	if !cached {
		cmfFamilyLogUpdateCacheMut.Lock()
		cmfFamilyLogUpdateCache[key] = cache
		cmfFamilyLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfFamilyLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_family_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_family_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFFamilyLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfFamilyLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_family_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfFamilyLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfFamilyLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfFamilyLog")
	}
	return rowsAff, nil
}

var mySQLCMFFamilyLogUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFFamilyLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_family_log provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfFamilyLogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFFamilyLogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfFamilyLogUpsertCacheMut.RLock()
	cache, cached := cmfFamilyLogUpsertCache[key]
	cmfFamilyLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfFamilyLogAllColumns,
			cmfFamilyLogColumnsWithDefault,
			cmfFamilyLogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfFamilyLogAllColumns,
			cmfFamilyLogPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_family_log, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_family_log`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_family_log` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfFamilyLogType, cmfFamilyLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfFamilyLogType, cmfFamilyLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_family_log")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfFamilyLogMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfFamilyLogType, cmfFamilyLogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_family_log")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_family_log")
	}

CacheNoHooks:
	if !cached {
		cmfFamilyLogUpsertCacheMut.Lock()
		cmfFamilyLogUpsertCache[key] = cache
		cmfFamilyLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFFamilyLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFFamilyLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFFamilyLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfFamilyLogPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_family_log` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_family_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_family_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfFamilyLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfFamilyLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_family_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_family_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFFamilyLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfFamilyLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfFamilyLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_family_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfFamilyLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfFamilyLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_family_log")
	}

	if len(cmfFamilyLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFFamilyLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFFamilyLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFFamilyLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFFamilyLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfFamilyLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_family_log`.* FROM `cmf_family_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfFamilyLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFFamilyLogSlice")
	}

	*o = slice

	return nil
}

// CMFFamilyLogExists checks if the CMFFamilyLog row exists.
func CMFFamilyLogExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_family_log` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_family_log exists")
	}

	return exists, nil
}
