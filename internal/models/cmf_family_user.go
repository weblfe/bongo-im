// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CMFFamilyUser is an object representing the database table.
type CMFFamilyUser struct {
	ID               int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	FamilyID         int           `boil:"family_id" json:"family_id" toml:"family_id" yaml:"family_id"`
	UserID           int           `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Reason           null.String   `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	Explain          string        `boil:"explain" json:"explain" toml:"explain" yaml:"explain"`
	RealName         string        `boil:"real_name" json:"real_name" toml:"real_name" yaml:"real_name"`
	RealSex          bool          `boil:"real_sex" json:"real_sex" toml:"real_sex" yaml:"real_sex"`
	RealCard         null.String   `boil:"real_card" json:"real_card,omitempty" toml:"real_card" yaml:"real_card,omitempty"`
	RealAddress      null.String   `boil:"real_address" json:"real_address,omitempty" toml:"real_address" yaml:"real_address,omitempty"`
	TransferChannel  string        `boil:"transfer_channel" json:"transfer_channel" toml:"transfer_channel" yaml:"transfer_channel"`
	TransferAccounts string        `boil:"transfer_accounts" json:"transfer_accounts" toml:"transfer_accounts" yaml:"transfer_accounts"`
	Policy           int16         `boil:"policy" json:"policy" toml:"policy" yaml:"policy"`
	Proportion       types.Decimal `boil:"proportion" json:"proportion" toml:"proportion" yaml:"proportion"`
	SignStatus       bool          `boil:"sign_status" json:"sign_status" toml:"sign_status" yaml:"sign_status"`
	SignTime         int           `boil:"sign_time" json:"sign_time" toml:"sign_time" yaml:"sign_time"`
	State            null.Bool     `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	CreatedTime      int           `boil:"created_time" json:"created_time" toml:"created_time" yaml:"created_time"`
	UpdateTime       int           `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *cmfFamilyUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfFamilyUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFFamilyUserColumns = struct {
	ID               string
	FamilyID         string
	UserID           string
	Reason           string
	Explain          string
	RealName         string
	RealSex          string
	RealCard         string
	RealAddress      string
	TransferChannel  string
	TransferAccounts string
	Policy           string
	Proportion       string
	SignStatus       string
	SignTime         string
	State            string
	CreatedTime      string
	UpdateTime       string
}{
	ID:               "id",
	FamilyID:         "family_id",
	UserID:           "user_id",
	Reason:           "reason",
	Explain:          "explain",
	RealName:         "real_name",
	RealSex:          "real_sex",
	RealCard:         "real_card",
	RealAddress:      "real_address",
	TransferChannel:  "transfer_channel",
	TransferAccounts: "transfer_accounts",
	Policy:           "policy",
	Proportion:       "proportion",
	SignStatus:       "sign_status",
	SignTime:         "sign_time",
	State:            "state",
	CreatedTime:      "created_time",
	UpdateTime:       "update_time",
}

// Generated where

var CMFFamilyUserWhere = struct {
	ID               whereHelperint
	FamilyID         whereHelperint
	UserID           whereHelperint
	Reason           whereHelpernull_String
	Explain          whereHelperstring
	RealName         whereHelperstring
	RealSex          whereHelperbool
	RealCard         whereHelpernull_String
	RealAddress      whereHelpernull_String
	TransferChannel  whereHelperstring
	TransferAccounts whereHelperstring
	Policy           whereHelperint16
	Proportion       whereHelpertypes_Decimal
	SignStatus       whereHelperbool
	SignTime         whereHelperint
	State            whereHelpernull_Bool
	CreatedTime      whereHelperint
	UpdateTime       whereHelperint
}{
	ID:               whereHelperint{field: "`cmf_family_user`.`id`"},
	FamilyID:         whereHelperint{field: "`cmf_family_user`.`family_id`"},
	UserID:           whereHelperint{field: "`cmf_family_user`.`user_id`"},
	Reason:           whereHelpernull_String{field: "`cmf_family_user`.`reason`"},
	Explain:          whereHelperstring{field: "`cmf_family_user`.`explain`"},
	RealName:         whereHelperstring{field: "`cmf_family_user`.`real_name`"},
	RealSex:          whereHelperbool{field: "`cmf_family_user`.`real_sex`"},
	RealCard:         whereHelpernull_String{field: "`cmf_family_user`.`real_card`"},
	RealAddress:      whereHelpernull_String{field: "`cmf_family_user`.`real_address`"},
	TransferChannel:  whereHelperstring{field: "`cmf_family_user`.`transfer_channel`"},
	TransferAccounts: whereHelperstring{field: "`cmf_family_user`.`transfer_accounts`"},
	Policy:           whereHelperint16{field: "`cmf_family_user`.`policy`"},
	Proportion:       whereHelpertypes_Decimal{field: "`cmf_family_user`.`proportion`"},
	SignStatus:       whereHelperbool{field: "`cmf_family_user`.`sign_status`"},
	SignTime:         whereHelperint{field: "`cmf_family_user`.`sign_time`"},
	State:            whereHelpernull_Bool{field: "`cmf_family_user`.`state`"},
	CreatedTime:      whereHelperint{field: "`cmf_family_user`.`created_time`"},
	UpdateTime:       whereHelperint{field: "`cmf_family_user`.`update_time`"},
}

// CMFFamilyUserRels is where relationship names are stored.
var CMFFamilyUserRels = struct {
}{}

// cmfFamilyUserR is where relationships are stored.
type cmfFamilyUserR struct {
}

// NewStruct creates a new relationship struct
func (*cmfFamilyUserR) NewStruct() *cmfFamilyUserR {
	return &cmfFamilyUserR{}
}

// cmfFamilyUserL is where Load methods for each relationship are stored.
type cmfFamilyUserL struct{}

var (
	cmfFamilyUserAllColumns            = []string{"id", "family_id", "user_id", "reason", "explain", "real_name", "real_sex", "real_card", "real_address", "transfer_channel", "transfer_accounts", "policy", "proportion", "sign_status", "sign_time", "state", "created_time", "update_time"}
	cmfFamilyUserColumnsWithoutDefault = []string{"reason", "explain", "real_name", "real_card", "real_address", "transfer_channel", "transfer_accounts"}
	cmfFamilyUserColumnsWithDefault    = []string{"id", "family_id", "user_id", "real_sex", "policy", "proportion", "sign_status", "sign_time", "state", "created_time", "update_time"}
	cmfFamilyUserPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFFamilyUserSlice is an alias for a slice of pointers to CMFFamilyUser.
	// This should generally be used opposed to []CMFFamilyUser.
	CMFFamilyUserSlice []*CMFFamilyUser
	// CMFFamilyUserHook is the signature for custom CMFFamilyUser hook methods
	CMFFamilyUserHook func(context.Context, boil.ContextExecutor, *CMFFamilyUser) error

	cmfFamilyUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfFamilyUserType                 = reflect.TypeOf(&CMFFamilyUser{})
	cmfFamilyUserMapping              = queries.MakeStructMapping(cmfFamilyUserType)
	cmfFamilyUserPrimaryKeyMapping, _ = queries.BindMapping(cmfFamilyUserType, cmfFamilyUserMapping, cmfFamilyUserPrimaryKeyColumns)
	cmfFamilyUserInsertCacheMut       sync.RWMutex
	cmfFamilyUserInsertCache          = make(map[string]insertCache)
	cmfFamilyUserUpdateCacheMut       sync.RWMutex
	cmfFamilyUserUpdateCache          = make(map[string]updateCache)
	cmfFamilyUserUpsertCacheMut       sync.RWMutex
	cmfFamilyUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfFamilyUserBeforeInsertHooks []CMFFamilyUserHook
var cmfFamilyUserBeforeUpdateHooks []CMFFamilyUserHook
var cmfFamilyUserBeforeDeleteHooks []CMFFamilyUserHook
var cmfFamilyUserBeforeUpsertHooks []CMFFamilyUserHook

var cmfFamilyUserAfterInsertHooks []CMFFamilyUserHook
var cmfFamilyUserAfterSelectHooks []CMFFamilyUserHook
var cmfFamilyUserAfterUpdateHooks []CMFFamilyUserHook
var cmfFamilyUserAfterDeleteHooks []CMFFamilyUserHook
var cmfFamilyUserAfterUpsertHooks []CMFFamilyUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFFamilyUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFFamilyUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFFamilyUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFFamilyUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFFamilyUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFFamilyUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFFamilyUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFFamilyUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFFamilyUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfFamilyUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFFamilyUserHook registers your hook function for all future operations.
func AddCMFFamilyUserHook(hookPoint boil.HookPoint, cmfFamilyUserHook CMFFamilyUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfFamilyUserBeforeInsertHooks = append(cmfFamilyUserBeforeInsertHooks, cmfFamilyUserHook)
	case boil.BeforeUpdateHook:
		cmfFamilyUserBeforeUpdateHooks = append(cmfFamilyUserBeforeUpdateHooks, cmfFamilyUserHook)
	case boil.BeforeDeleteHook:
		cmfFamilyUserBeforeDeleteHooks = append(cmfFamilyUserBeforeDeleteHooks, cmfFamilyUserHook)
	case boil.BeforeUpsertHook:
		cmfFamilyUserBeforeUpsertHooks = append(cmfFamilyUserBeforeUpsertHooks, cmfFamilyUserHook)
	case boil.AfterInsertHook:
		cmfFamilyUserAfterInsertHooks = append(cmfFamilyUserAfterInsertHooks, cmfFamilyUserHook)
	case boil.AfterSelectHook:
		cmfFamilyUserAfterSelectHooks = append(cmfFamilyUserAfterSelectHooks, cmfFamilyUserHook)
	case boil.AfterUpdateHook:
		cmfFamilyUserAfterUpdateHooks = append(cmfFamilyUserAfterUpdateHooks, cmfFamilyUserHook)
	case boil.AfterDeleteHook:
		cmfFamilyUserAfterDeleteHooks = append(cmfFamilyUserAfterDeleteHooks, cmfFamilyUserHook)
	case boil.AfterUpsertHook:
		cmfFamilyUserAfterUpsertHooks = append(cmfFamilyUserAfterUpsertHooks, cmfFamilyUserHook)
	}
}

// One returns a single cmfFamilyUser record from the query.
func (q cmfFamilyUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFFamilyUser, error) {
	o := &CMFFamilyUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_family_user")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFFamilyUser records from the query.
func (q cmfFamilyUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFFamilyUserSlice, error) {
	var o []*CMFFamilyUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFFamilyUser slice")
	}

	if len(cmfFamilyUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFFamilyUser records in the query.
func (q cmfFamilyUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_family_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfFamilyUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_family_user exists")
	}

	return count > 0, nil
}

// CMFFamilyUsers retrieves all the records using an executor.
func CMFFamilyUsers(mods ...qm.QueryMod) cmfFamilyUserQuery {
	mods = append(mods, qm.From("`cmf_family_user`"))
	return cmfFamilyUserQuery{NewQuery(mods...)}
}

// FindCMFFamilyUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFFamilyUser(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CMFFamilyUser, error) {
	cmfFamilyUserObj := &CMFFamilyUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_family_user` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfFamilyUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_family_user")
	}

	return cmfFamilyUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFFamilyUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_family_user provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfFamilyUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfFamilyUserInsertCacheMut.RLock()
	cache, cached := cmfFamilyUserInsertCache[key]
	cmfFamilyUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfFamilyUserAllColumns,
			cmfFamilyUserColumnsWithDefault,
			cmfFamilyUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfFamilyUserType, cmfFamilyUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfFamilyUserType, cmfFamilyUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_family_user` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_family_user` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_family_user` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfFamilyUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_family_user")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfFamilyUserMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_family_user")
	}

CacheNoHooks:
	if !cached {
		cmfFamilyUserInsertCacheMut.Lock()
		cmfFamilyUserInsertCache[key] = cache
		cmfFamilyUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFFamilyUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFFamilyUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfFamilyUserUpdateCacheMut.RLock()
	cache, cached := cmfFamilyUserUpdateCache[key]
	cmfFamilyUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfFamilyUserAllColumns,
			cmfFamilyUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_family_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_family_user` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfFamilyUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfFamilyUserType, cmfFamilyUserMapping, append(wl, cmfFamilyUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_family_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_family_user")
	}

	if !cached {
		cmfFamilyUserUpdateCacheMut.Lock()
		cmfFamilyUserUpdateCache[key] = cache
		cmfFamilyUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfFamilyUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_family_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_family_user")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFFamilyUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfFamilyUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_family_user` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfFamilyUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfFamilyUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfFamilyUser")
	}
	return rowsAff, nil
}

var mySQLCMFFamilyUserUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFFamilyUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_family_user provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfFamilyUserColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFFamilyUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfFamilyUserUpsertCacheMut.RLock()
	cache, cached := cmfFamilyUserUpsertCache[key]
	cmfFamilyUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfFamilyUserAllColumns,
			cmfFamilyUserColumnsWithDefault,
			cmfFamilyUserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfFamilyUserAllColumns,
			cmfFamilyUserPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_family_user, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_family_user`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_family_user` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfFamilyUserType, cmfFamilyUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfFamilyUserType, cmfFamilyUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_family_user")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfFamilyUserMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfFamilyUserType, cmfFamilyUserMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_family_user")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_family_user")
	}

CacheNoHooks:
	if !cached {
		cmfFamilyUserUpsertCacheMut.Lock()
		cmfFamilyUserUpsertCache[key] = cache
		cmfFamilyUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFFamilyUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFFamilyUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFFamilyUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfFamilyUserPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_family_user` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_family_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_family_user")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfFamilyUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfFamilyUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_family_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_family_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFFamilyUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfFamilyUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfFamilyUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_family_user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfFamilyUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfFamilyUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_family_user")
	}

	if len(cmfFamilyUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFFamilyUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFFamilyUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFFamilyUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFFamilyUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfFamilyUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_family_user`.* FROM `cmf_family_user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfFamilyUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFFamilyUserSlice")
	}

	*o = slice

	return nil
}

// CMFFamilyUserExists checks if the CMFFamilyUser row exists.
func CMFFamilyUserExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_family_user` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_family_user exists")
	}

	return exists, nil
}
