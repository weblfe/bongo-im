// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFGuide is an object representing the database table.
type CMFGuide struct {
	ID        uint   `boil:"id" json:"id" toml:"id" yaml:"id"`
	Thumb     string `boil:"thumb" json:"thumb" toml:"thumb" yaml:"thumb"`
	Href      string `boil:"href" json:"href" toml:"href" yaml:"href"`
	Type      bool   `boil:"type" json:"type" toml:"type" yaml:"type"`
	ListOrder int    `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`
	Addtime   int    `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Uptime    int    `boil:"uptime" json:"uptime" toml:"uptime" yaml:"uptime"`

	R *cmfGuideR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfGuideL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFGuideColumns = struct {
	ID        string
	Thumb     string
	Href      string
	Type      string
	ListOrder string
	Addtime   string
	Uptime    string
}{
	ID:        "id",
	Thumb:     "thumb",
	Href:      "href",
	Type:      "type",
	ListOrder: "list_order",
	Addtime:   "addtime",
	Uptime:    "uptime",
}

// Generated where

var CMFGuideWhere = struct {
	ID        whereHelperuint
	Thumb     whereHelperstring
	Href      whereHelperstring
	Type      whereHelperbool
	ListOrder whereHelperint
	Addtime   whereHelperint
	Uptime    whereHelperint
}{
	ID:        whereHelperuint{field: "`cmf_guide`.`id`"},
	Thumb:     whereHelperstring{field: "`cmf_guide`.`thumb`"},
	Href:      whereHelperstring{field: "`cmf_guide`.`href`"},
	Type:      whereHelperbool{field: "`cmf_guide`.`type`"},
	ListOrder: whereHelperint{field: "`cmf_guide`.`list_order`"},
	Addtime:   whereHelperint{field: "`cmf_guide`.`addtime`"},
	Uptime:    whereHelperint{field: "`cmf_guide`.`uptime`"},
}

// CMFGuideRels is where relationship names are stored.
var CMFGuideRels = struct {
}{}

// cmfGuideR is where relationships are stored.
type cmfGuideR struct {
}

// NewStruct creates a new relationship struct
func (*cmfGuideR) NewStruct() *cmfGuideR {
	return &cmfGuideR{}
}

// cmfGuideL is where Load methods for each relationship are stored.
type cmfGuideL struct{}

var (
	cmfGuideAllColumns            = []string{"id", "thumb", "href", "type", "list_order", "addtime", "uptime"}
	cmfGuideColumnsWithoutDefault = []string{"thumb", "href"}
	cmfGuideColumnsWithDefault    = []string{"id", "type", "list_order", "addtime", "uptime"}
	cmfGuidePrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFGuideSlice is an alias for a slice of pointers to CMFGuide.
	// This should generally be used opposed to []CMFGuide.
	CMFGuideSlice []*CMFGuide
	// CMFGuideHook is the signature for custom CMFGuide hook methods
	CMFGuideHook func(context.Context, boil.ContextExecutor, *CMFGuide) error

	cmfGuideQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfGuideType                 = reflect.TypeOf(&CMFGuide{})
	cmfGuideMapping              = queries.MakeStructMapping(cmfGuideType)
	cmfGuidePrimaryKeyMapping, _ = queries.BindMapping(cmfGuideType, cmfGuideMapping, cmfGuidePrimaryKeyColumns)
	cmfGuideInsertCacheMut       sync.RWMutex
	cmfGuideInsertCache          = make(map[string]insertCache)
	cmfGuideUpdateCacheMut       sync.RWMutex
	cmfGuideUpdateCache          = make(map[string]updateCache)
	cmfGuideUpsertCacheMut       sync.RWMutex
	cmfGuideUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfGuideBeforeInsertHooks []CMFGuideHook
var cmfGuideBeforeUpdateHooks []CMFGuideHook
var cmfGuideBeforeDeleteHooks []CMFGuideHook
var cmfGuideBeforeUpsertHooks []CMFGuideHook

var cmfGuideAfterInsertHooks []CMFGuideHook
var cmfGuideAfterSelectHooks []CMFGuideHook
var cmfGuideAfterUpdateHooks []CMFGuideHook
var cmfGuideAfterDeleteHooks []CMFGuideHook
var cmfGuideAfterUpsertHooks []CMFGuideHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFGuide) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfGuideBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFGuide) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfGuideBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFGuide) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfGuideBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFGuide) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfGuideBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFGuide) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfGuideAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFGuide) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfGuideAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFGuide) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfGuideAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFGuide) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfGuideAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFGuide) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfGuideAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFGuideHook registers your hook function for all future operations.
func AddCMFGuideHook(hookPoint boil.HookPoint, cmfGuideHook CMFGuideHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfGuideBeforeInsertHooks = append(cmfGuideBeforeInsertHooks, cmfGuideHook)
	case boil.BeforeUpdateHook:
		cmfGuideBeforeUpdateHooks = append(cmfGuideBeforeUpdateHooks, cmfGuideHook)
	case boil.BeforeDeleteHook:
		cmfGuideBeforeDeleteHooks = append(cmfGuideBeforeDeleteHooks, cmfGuideHook)
	case boil.BeforeUpsertHook:
		cmfGuideBeforeUpsertHooks = append(cmfGuideBeforeUpsertHooks, cmfGuideHook)
	case boil.AfterInsertHook:
		cmfGuideAfterInsertHooks = append(cmfGuideAfterInsertHooks, cmfGuideHook)
	case boil.AfterSelectHook:
		cmfGuideAfterSelectHooks = append(cmfGuideAfterSelectHooks, cmfGuideHook)
	case boil.AfterUpdateHook:
		cmfGuideAfterUpdateHooks = append(cmfGuideAfterUpdateHooks, cmfGuideHook)
	case boil.AfterDeleteHook:
		cmfGuideAfterDeleteHooks = append(cmfGuideAfterDeleteHooks, cmfGuideHook)
	case boil.AfterUpsertHook:
		cmfGuideAfterUpsertHooks = append(cmfGuideAfterUpsertHooks, cmfGuideHook)
	}
}

// One returns a single cmfGuide record from the query.
func (q cmfGuideQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFGuide, error) {
	o := &CMFGuide{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_guide")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFGuide records from the query.
func (q cmfGuideQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFGuideSlice, error) {
	var o []*CMFGuide

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFGuide slice")
	}

	if len(cmfGuideAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFGuide records in the query.
func (q cmfGuideQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_guide rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfGuideQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_guide exists")
	}

	return count > 0, nil
}

// CMFGuides retrieves all the records using an executor.
func CMFGuides(mods ...qm.QueryMod) cmfGuideQuery {
	mods = append(mods, qm.From("`cmf_guide`"))
	return cmfGuideQuery{NewQuery(mods...)}
}

// FindCMFGuide retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFGuide(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFGuide, error) {
	cmfGuideObj := &CMFGuide{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_guide` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfGuideObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_guide")
	}

	return cmfGuideObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFGuide) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_guide provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfGuideColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfGuideInsertCacheMut.RLock()
	cache, cached := cmfGuideInsertCache[key]
	cmfGuideInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfGuideAllColumns,
			cmfGuideColumnsWithDefault,
			cmfGuideColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfGuideType, cmfGuideMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfGuideType, cmfGuideMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_guide` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_guide` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_guide` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfGuidePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_guide")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfGuideMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_guide")
	}

CacheNoHooks:
	if !cached {
		cmfGuideInsertCacheMut.Lock()
		cmfGuideInsertCache[key] = cache
		cmfGuideInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFGuide.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFGuide) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfGuideUpdateCacheMut.RLock()
	cache, cached := cmfGuideUpdateCache[key]
	cmfGuideUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfGuideAllColumns,
			cmfGuidePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_guide, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_guide` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfGuidePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfGuideType, cmfGuideMapping, append(wl, cmfGuidePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_guide row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_guide")
	}

	if !cached {
		cmfGuideUpdateCacheMut.Lock()
		cmfGuideUpdateCache[key] = cache
		cmfGuideUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfGuideQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_guide")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_guide")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFGuideSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfGuidePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_guide` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfGuidePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfGuide slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfGuide")
	}
	return rowsAff, nil
}

var mySQLCMFGuideUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFGuide) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_guide provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfGuideColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFGuideUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfGuideUpsertCacheMut.RLock()
	cache, cached := cmfGuideUpsertCache[key]
	cmfGuideUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfGuideAllColumns,
			cmfGuideColumnsWithDefault,
			cmfGuideColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfGuideAllColumns,
			cmfGuidePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_guide, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_guide`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_guide` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfGuideType, cmfGuideMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfGuideType, cmfGuideMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_guide")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfGuideMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfGuideType, cmfGuideMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_guide")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_guide")
	}

CacheNoHooks:
	if !cached {
		cmfGuideUpsertCacheMut.Lock()
		cmfGuideUpsertCache[key] = cache
		cmfGuideUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFGuide record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFGuide) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFGuide provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfGuidePrimaryKeyMapping)
	sql := "DELETE FROM `cmf_guide` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_guide")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_guide")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfGuideQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfGuideQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_guide")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_guide")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFGuideSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfGuideBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfGuidePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_guide` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfGuidePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfGuide slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_guide")
	}

	if len(cmfGuideAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFGuide) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFGuide(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFGuideSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFGuideSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfGuidePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_guide`.* FROM `cmf_guide` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfGuidePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFGuideSlice")
	}

	*o = slice

	return nil
}

// CMFGuideExists checks if the CMFGuide row exists.
func CMFGuideExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_guide` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_guide exists")
	}

	return exists, nil
}
