// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFLevel is an object representing the database table.
type CMFLevel struct {
	Levelid   uint   `boil:"levelid" json:"levelid" toml:"levelid" yaml:"levelid"`
	Levelname string `boil:"levelname" json:"levelname" toml:"levelname" yaml:"levelname"`
	LevelUp   uint   `boil:"level_up" json:"level_up" toml:"level_up" yaml:"level_up"`
	Addtime   int    `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	ID        int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Thumb     string `boil:"thumb" json:"thumb" toml:"thumb" yaml:"thumb"`
	Colour    string `boil:"colour" json:"colour" toml:"colour" yaml:"colour"`
	ThumbMark string `boil:"thumb_mark" json:"thumb_mark" toml:"thumb_mark" yaml:"thumb_mark"`
	BG        string `boil:"bg" json:"bg" toml:"bg" yaml:"bg"`

	R *cmfLevelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfLevelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFLevelColumns = struct {
	Levelid   string
	Levelname string
	LevelUp   string
	Addtime   string
	ID        string
	Thumb     string
	Colour    string
	ThumbMark string
	BG        string
}{
	Levelid:   "levelid",
	Levelname: "levelname",
	LevelUp:   "level_up",
	Addtime:   "addtime",
	ID:        "id",
	Thumb:     "thumb",
	Colour:    "colour",
	ThumbMark: "thumb_mark",
	BG:        "bg",
}

// Generated where

var CMFLevelWhere = struct {
	Levelid   whereHelperuint
	Levelname whereHelperstring
	LevelUp   whereHelperuint
	Addtime   whereHelperint
	ID        whereHelperint
	Thumb     whereHelperstring
	Colour    whereHelperstring
	ThumbMark whereHelperstring
	BG        whereHelperstring
}{
	Levelid:   whereHelperuint{field: "`cmf_level`.`levelid`"},
	Levelname: whereHelperstring{field: "`cmf_level`.`levelname`"},
	LevelUp:   whereHelperuint{field: "`cmf_level`.`level_up`"},
	Addtime:   whereHelperint{field: "`cmf_level`.`addtime`"},
	ID:        whereHelperint{field: "`cmf_level`.`id`"},
	Thumb:     whereHelperstring{field: "`cmf_level`.`thumb`"},
	Colour:    whereHelperstring{field: "`cmf_level`.`colour`"},
	ThumbMark: whereHelperstring{field: "`cmf_level`.`thumb_mark`"},
	BG:        whereHelperstring{field: "`cmf_level`.`bg`"},
}

// CMFLevelRels is where relationship names are stored.
var CMFLevelRels = struct {
}{}

// cmfLevelR is where relationships are stored.
type cmfLevelR struct {
}

// NewStruct creates a new relationship struct
func (*cmfLevelR) NewStruct() *cmfLevelR {
	return &cmfLevelR{}
}

// cmfLevelL is where Load methods for each relationship are stored.
type cmfLevelL struct{}

var (
	cmfLevelAllColumns            = []string{"levelid", "levelname", "level_up", "addtime", "id", "thumb", "colour", "thumb_mark", "bg"}
	cmfLevelColumnsWithoutDefault = []string{"levelname", "thumb", "colour", "thumb_mark", "bg"}
	cmfLevelColumnsWithDefault    = []string{"levelid", "level_up", "addtime", "id"}
	cmfLevelPrimaryKeyColumns     = []string{"id", "levelid"}
)

type (
	// CMFLevelSlice is an alias for a slice of pointers to CMFLevel.
	// This should generally be used opposed to []CMFLevel.
	CMFLevelSlice []*CMFLevel
	// CMFLevelHook is the signature for custom CMFLevel hook methods
	CMFLevelHook func(context.Context, boil.ContextExecutor, *CMFLevel) error

	cmfLevelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfLevelType                 = reflect.TypeOf(&CMFLevel{})
	cmfLevelMapping              = queries.MakeStructMapping(cmfLevelType)
	cmfLevelPrimaryKeyMapping, _ = queries.BindMapping(cmfLevelType, cmfLevelMapping, cmfLevelPrimaryKeyColumns)
	cmfLevelInsertCacheMut       sync.RWMutex
	cmfLevelInsertCache          = make(map[string]insertCache)
	cmfLevelUpdateCacheMut       sync.RWMutex
	cmfLevelUpdateCache          = make(map[string]updateCache)
	cmfLevelUpsertCacheMut       sync.RWMutex
	cmfLevelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfLevelBeforeInsertHooks []CMFLevelHook
var cmfLevelBeforeUpdateHooks []CMFLevelHook
var cmfLevelBeforeDeleteHooks []CMFLevelHook
var cmfLevelBeforeUpsertHooks []CMFLevelHook

var cmfLevelAfterInsertHooks []CMFLevelHook
var cmfLevelAfterSelectHooks []CMFLevelHook
var cmfLevelAfterUpdateHooks []CMFLevelHook
var cmfLevelAfterDeleteHooks []CMFLevelHook
var cmfLevelAfterUpsertHooks []CMFLevelHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFLevel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFLevel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFLevel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFLevel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFLevel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFLevel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFLevel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFLevel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFLevel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFLevelHook registers your hook function for all future operations.
func AddCMFLevelHook(hookPoint boil.HookPoint, cmfLevelHook CMFLevelHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfLevelBeforeInsertHooks = append(cmfLevelBeforeInsertHooks, cmfLevelHook)
	case boil.BeforeUpdateHook:
		cmfLevelBeforeUpdateHooks = append(cmfLevelBeforeUpdateHooks, cmfLevelHook)
	case boil.BeforeDeleteHook:
		cmfLevelBeforeDeleteHooks = append(cmfLevelBeforeDeleteHooks, cmfLevelHook)
	case boil.BeforeUpsertHook:
		cmfLevelBeforeUpsertHooks = append(cmfLevelBeforeUpsertHooks, cmfLevelHook)
	case boil.AfterInsertHook:
		cmfLevelAfterInsertHooks = append(cmfLevelAfterInsertHooks, cmfLevelHook)
	case boil.AfterSelectHook:
		cmfLevelAfterSelectHooks = append(cmfLevelAfterSelectHooks, cmfLevelHook)
	case boil.AfterUpdateHook:
		cmfLevelAfterUpdateHooks = append(cmfLevelAfterUpdateHooks, cmfLevelHook)
	case boil.AfterDeleteHook:
		cmfLevelAfterDeleteHooks = append(cmfLevelAfterDeleteHooks, cmfLevelHook)
	case boil.AfterUpsertHook:
		cmfLevelAfterUpsertHooks = append(cmfLevelAfterUpsertHooks, cmfLevelHook)
	}
}

// One returns a single cmfLevel record from the query.
func (q cmfLevelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFLevel, error) {
	o := &CMFLevel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_level")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFLevel records from the query.
func (q cmfLevelQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFLevelSlice, error) {
	var o []*CMFLevel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFLevel slice")
	}

	if len(cmfLevelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFLevel records in the query.
func (q cmfLevelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_level rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfLevelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_level exists")
	}

	return count > 0, nil
}

// CMFLevels retrieves all the records using an executor.
func CMFLevels(mods ...qm.QueryMod) cmfLevelQuery {
	mods = append(mods, qm.From("`cmf_level`"))
	return cmfLevelQuery{NewQuery(mods...)}
}

// FindCMFLevel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFLevel(ctx context.Context, exec boil.ContextExecutor, iD int, levelid uint, selectCols ...string) (*CMFLevel, error) {
	cmfLevelObj := &CMFLevel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_level` where `id`=? AND `levelid`=?", sel,
	)

	q := queries.Raw(query, iD, levelid)

	err := q.Bind(ctx, exec, cmfLevelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_level")
	}

	return cmfLevelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFLevel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_level provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLevelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfLevelInsertCacheMut.RLock()
	cache, cached := cmfLevelInsertCache[key]
	cmfLevelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfLevelAllColumns,
			cmfLevelColumnsWithDefault,
			cmfLevelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfLevelType, cmfLevelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfLevelType, cmfLevelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_level` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_level` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_level` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfLevelPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_level")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
		o.Levelid,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_level")
	}

CacheNoHooks:
	if !cached {
		cmfLevelInsertCacheMut.Lock()
		cmfLevelInsertCache[key] = cache
		cmfLevelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFLevel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFLevel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfLevelUpdateCacheMut.RLock()
	cache, cached := cmfLevelUpdateCache[key]
	cmfLevelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfLevelAllColumns,
			cmfLevelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_level, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_level` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfLevelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfLevelType, cmfLevelMapping, append(wl, cmfLevelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_level row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_level")
	}

	if !cached {
		cmfLevelUpdateCacheMut.Lock()
		cmfLevelUpdateCache[key] = cache
		cmfLevelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfLevelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_level")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_level")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFLevelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLevelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_level` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLevelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfLevel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfLevel")
	}
	return rowsAff, nil
}

var mySQLCMFLevelUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFLevel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_level provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLevelColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFLevelUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfLevelUpsertCacheMut.RLock()
	cache, cached := cmfLevelUpsertCache[key]
	cmfLevelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfLevelAllColumns,
			cmfLevelColumnsWithDefault,
			cmfLevelColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfLevelAllColumns,
			cmfLevelPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_level, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_level`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_level` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfLevelType, cmfLevelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfLevelType, cmfLevelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_level")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfLevelType, cmfLevelMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_level")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_level")
	}

CacheNoHooks:
	if !cached {
		cmfLevelUpsertCacheMut.Lock()
		cmfLevelUpsertCache[key] = cache
		cmfLevelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFLevel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFLevel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFLevel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfLevelPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_level` WHERE `id`=? AND `levelid`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_level")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_level")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfLevelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfLevelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_level")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_level")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFLevelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfLevelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLevelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_level` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLevelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfLevel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_level")
	}

	if len(cmfLevelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFLevel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFLevel(ctx, exec, o.ID, o.Levelid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFLevelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFLevelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLevelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_level`.* FROM `cmf_level` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLevelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFLevelSlice")
	}

	*o = slice

	return nil
}

// CMFLevelExists checks if the CMFLevel row exists.
func CMFLevelExists(ctx context.Context, exec boil.ContextExecutor, iD int, levelid uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_level` where `id`=? AND `levelid`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD, levelid)
	}
	row := exec.QueryRowContext(ctx, sql, iD, levelid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_level exists")
	}

	return exists, nil
}
