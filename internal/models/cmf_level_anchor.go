// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFLevelAnchor is an object representing the database table.
type CMFLevelAnchor struct {
	Levelid   uint        `boil:"levelid" json:"levelid" toml:"levelid" yaml:"levelid"`
	Levelname null.String `boil:"levelname" json:"levelname,omitempty" toml:"levelname" yaml:"levelname,omitempty"`
	LevelUp   null.Uint   `boil:"level_up" json:"level_up,omitempty" toml:"level_up" yaml:"level_up,omitempty"`
	Addtime   null.Int    `boil:"addtime" json:"addtime,omitempty" toml:"addtime" yaml:"addtime,omitempty"`
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Thumb     string      `boil:"thumb" json:"thumb" toml:"thumb" yaml:"thumb"`
	ThumbMark string      `boil:"thumb_mark" json:"thumb_mark" toml:"thumb_mark" yaml:"thumb_mark"`
	BG        string      `boil:"bg" json:"bg" toml:"bg" yaml:"bg"`

	R *cmfLevelAnchorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfLevelAnchorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFLevelAnchorColumns = struct {
	Levelid   string
	Levelname string
	LevelUp   string
	Addtime   string
	ID        string
	Thumb     string
	ThumbMark string
	BG        string
}{
	Levelid:   "levelid",
	Levelname: "levelname",
	LevelUp:   "level_up",
	Addtime:   "addtime",
	ID:        "id",
	Thumb:     "thumb",
	ThumbMark: "thumb_mark",
	BG:        "bg",
}

// Generated where

type whereHelpernull_Uint struct{ field string }

func (w whereHelpernull_Uint) EQ(x null.Uint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint) NEQ(x null.Uint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Uint) LT(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint) LTE(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint) GT(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint) GTE(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CMFLevelAnchorWhere = struct {
	Levelid   whereHelperuint
	Levelname whereHelpernull_String
	LevelUp   whereHelpernull_Uint
	Addtime   whereHelpernull_Int
	ID        whereHelperint
	Thumb     whereHelperstring
	ThumbMark whereHelperstring
	BG        whereHelperstring
}{
	Levelid:   whereHelperuint{field: "`cmf_level_anchor`.`levelid`"},
	Levelname: whereHelpernull_String{field: "`cmf_level_anchor`.`levelname`"},
	LevelUp:   whereHelpernull_Uint{field: "`cmf_level_anchor`.`level_up`"},
	Addtime:   whereHelpernull_Int{field: "`cmf_level_anchor`.`addtime`"},
	ID:        whereHelperint{field: "`cmf_level_anchor`.`id`"},
	Thumb:     whereHelperstring{field: "`cmf_level_anchor`.`thumb`"},
	ThumbMark: whereHelperstring{field: "`cmf_level_anchor`.`thumb_mark`"},
	BG:        whereHelperstring{field: "`cmf_level_anchor`.`bg`"},
}

// CMFLevelAnchorRels is where relationship names are stored.
var CMFLevelAnchorRels = struct {
}{}

// cmfLevelAnchorR is where relationships are stored.
type cmfLevelAnchorR struct {
}

// NewStruct creates a new relationship struct
func (*cmfLevelAnchorR) NewStruct() *cmfLevelAnchorR {
	return &cmfLevelAnchorR{}
}

// cmfLevelAnchorL is where Load methods for each relationship are stored.
type cmfLevelAnchorL struct{}

var (
	cmfLevelAnchorAllColumns            = []string{"levelid", "levelname", "level_up", "addtime", "id", "thumb", "thumb_mark", "bg"}
	cmfLevelAnchorColumnsWithoutDefault = []string{"levelname", "thumb", "thumb_mark", "bg"}
	cmfLevelAnchorColumnsWithDefault    = []string{"levelid", "level_up", "addtime", "id"}
	cmfLevelAnchorPrimaryKeyColumns     = []string{"id", "levelid"}
)

type (
	// CMFLevelAnchorSlice is an alias for a slice of pointers to CMFLevelAnchor.
	// This should generally be used opposed to []CMFLevelAnchor.
	CMFLevelAnchorSlice []*CMFLevelAnchor
	// CMFLevelAnchorHook is the signature for custom CMFLevelAnchor hook methods
	CMFLevelAnchorHook func(context.Context, boil.ContextExecutor, *CMFLevelAnchor) error

	cmfLevelAnchorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfLevelAnchorType                 = reflect.TypeOf(&CMFLevelAnchor{})
	cmfLevelAnchorMapping              = queries.MakeStructMapping(cmfLevelAnchorType)
	cmfLevelAnchorPrimaryKeyMapping, _ = queries.BindMapping(cmfLevelAnchorType, cmfLevelAnchorMapping, cmfLevelAnchorPrimaryKeyColumns)
	cmfLevelAnchorInsertCacheMut       sync.RWMutex
	cmfLevelAnchorInsertCache          = make(map[string]insertCache)
	cmfLevelAnchorUpdateCacheMut       sync.RWMutex
	cmfLevelAnchorUpdateCache          = make(map[string]updateCache)
	cmfLevelAnchorUpsertCacheMut       sync.RWMutex
	cmfLevelAnchorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfLevelAnchorBeforeInsertHooks []CMFLevelAnchorHook
var cmfLevelAnchorBeforeUpdateHooks []CMFLevelAnchorHook
var cmfLevelAnchorBeforeDeleteHooks []CMFLevelAnchorHook
var cmfLevelAnchorBeforeUpsertHooks []CMFLevelAnchorHook

var cmfLevelAnchorAfterInsertHooks []CMFLevelAnchorHook
var cmfLevelAnchorAfterSelectHooks []CMFLevelAnchorHook
var cmfLevelAnchorAfterUpdateHooks []CMFLevelAnchorHook
var cmfLevelAnchorAfterDeleteHooks []CMFLevelAnchorHook
var cmfLevelAnchorAfterUpsertHooks []CMFLevelAnchorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFLevelAnchor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAnchorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFLevelAnchor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAnchorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFLevelAnchor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAnchorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFLevelAnchor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAnchorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFLevelAnchor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAnchorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFLevelAnchor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAnchorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFLevelAnchor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAnchorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFLevelAnchor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAnchorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFLevelAnchor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLevelAnchorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFLevelAnchorHook registers your hook function for all future operations.
func AddCMFLevelAnchorHook(hookPoint boil.HookPoint, cmfLevelAnchorHook CMFLevelAnchorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfLevelAnchorBeforeInsertHooks = append(cmfLevelAnchorBeforeInsertHooks, cmfLevelAnchorHook)
	case boil.BeforeUpdateHook:
		cmfLevelAnchorBeforeUpdateHooks = append(cmfLevelAnchorBeforeUpdateHooks, cmfLevelAnchorHook)
	case boil.BeforeDeleteHook:
		cmfLevelAnchorBeforeDeleteHooks = append(cmfLevelAnchorBeforeDeleteHooks, cmfLevelAnchorHook)
	case boil.BeforeUpsertHook:
		cmfLevelAnchorBeforeUpsertHooks = append(cmfLevelAnchorBeforeUpsertHooks, cmfLevelAnchorHook)
	case boil.AfterInsertHook:
		cmfLevelAnchorAfterInsertHooks = append(cmfLevelAnchorAfterInsertHooks, cmfLevelAnchorHook)
	case boil.AfterSelectHook:
		cmfLevelAnchorAfterSelectHooks = append(cmfLevelAnchorAfterSelectHooks, cmfLevelAnchorHook)
	case boil.AfterUpdateHook:
		cmfLevelAnchorAfterUpdateHooks = append(cmfLevelAnchorAfterUpdateHooks, cmfLevelAnchorHook)
	case boil.AfterDeleteHook:
		cmfLevelAnchorAfterDeleteHooks = append(cmfLevelAnchorAfterDeleteHooks, cmfLevelAnchorHook)
	case boil.AfterUpsertHook:
		cmfLevelAnchorAfterUpsertHooks = append(cmfLevelAnchorAfterUpsertHooks, cmfLevelAnchorHook)
	}
}

// One returns a single cmfLevelAnchor record from the query.
func (q cmfLevelAnchorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFLevelAnchor, error) {
	o := &CMFLevelAnchor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_level_anchor")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFLevelAnchor records from the query.
func (q cmfLevelAnchorQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFLevelAnchorSlice, error) {
	var o []*CMFLevelAnchor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFLevelAnchor slice")
	}

	if len(cmfLevelAnchorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFLevelAnchor records in the query.
func (q cmfLevelAnchorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_level_anchor rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfLevelAnchorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_level_anchor exists")
	}

	return count > 0, nil
}

// CMFLevelAnchors retrieves all the records using an executor.
func CMFLevelAnchors(mods ...qm.QueryMod) cmfLevelAnchorQuery {
	mods = append(mods, qm.From("`cmf_level_anchor`"))
	return cmfLevelAnchorQuery{NewQuery(mods...)}
}

// FindCMFLevelAnchor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFLevelAnchor(ctx context.Context, exec boil.ContextExecutor, iD int, levelid uint, selectCols ...string) (*CMFLevelAnchor, error) {
	cmfLevelAnchorObj := &CMFLevelAnchor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_level_anchor` where `id`=? AND `levelid`=?", sel,
	)

	q := queries.Raw(query, iD, levelid)

	err := q.Bind(ctx, exec, cmfLevelAnchorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_level_anchor")
	}

	return cmfLevelAnchorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFLevelAnchor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_level_anchor provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLevelAnchorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfLevelAnchorInsertCacheMut.RLock()
	cache, cached := cmfLevelAnchorInsertCache[key]
	cmfLevelAnchorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfLevelAnchorAllColumns,
			cmfLevelAnchorColumnsWithDefault,
			cmfLevelAnchorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfLevelAnchorType, cmfLevelAnchorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfLevelAnchorType, cmfLevelAnchorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_level_anchor` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_level_anchor` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_level_anchor` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfLevelAnchorPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_level_anchor")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
		o.Levelid,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_level_anchor")
	}

CacheNoHooks:
	if !cached {
		cmfLevelAnchorInsertCacheMut.Lock()
		cmfLevelAnchorInsertCache[key] = cache
		cmfLevelAnchorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFLevelAnchor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFLevelAnchor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfLevelAnchorUpdateCacheMut.RLock()
	cache, cached := cmfLevelAnchorUpdateCache[key]
	cmfLevelAnchorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfLevelAnchorAllColumns,
			cmfLevelAnchorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_level_anchor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_level_anchor` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfLevelAnchorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfLevelAnchorType, cmfLevelAnchorMapping, append(wl, cmfLevelAnchorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_level_anchor row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_level_anchor")
	}

	if !cached {
		cmfLevelAnchorUpdateCacheMut.Lock()
		cmfLevelAnchorUpdateCache[key] = cache
		cmfLevelAnchorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfLevelAnchorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_level_anchor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_level_anchor")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFLevelAnchorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLevelAnchorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_level_anchor` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLevelAnchorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfLevelAnchor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfLevelAnchor")
	}
	return rowsAff, nil
}

var mySQLCMFLevelAnchorUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFLevelAnchor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_level_anchor provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLevelAnchorColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFLevelAnchorUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfLevelAnchorUpsertCacheMut.RLock()
	cache, cached := cmfLevelAnchorUpsertCache[key]
	cmfLevelAnchorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfLevelAnchorAllColumns,
			cmfLevelAnchorColumnsWithDefault,
			cmfLevelAnchorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfLevelAnchorAllColumns,
			cmfLevelAnchorPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_level_anchor, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_level_anchor`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_level_anchor` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfLevelAnchorType, cmfLevelAnchorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfLevelAnchorType, cmfLevelAnchorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_level_anchor")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfLevelAnchorType, cmfLevelAnchorMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_level_anchor")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_level_anchor")
	}

CacheNoHooks:
	if !cached {
		cmfLevelAnchorUpsertCacheMut.Lock()
		cmfLevelAnchorUpsertCache[key] = cache
		cmfLevelAnchorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFLevelAnchor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFLevelAnchor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFLevelAnchor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfLevelAnchorPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_level_anchor` WHERE `id`=? AND `levelid`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_level_anchor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_level_anchor")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfLevelAnchorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfLevelAnchorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_level_anchor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_level_anchor")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFLevelAnchorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfLevelAnchorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLevelAnchorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_level_anchor` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLevelAnchorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfLevelAnchor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_level_anchor")
	}

	if len(cmfLevelAnchorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFLevelAnchor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFLevelAnchor(ctx, exec, o.ID, o.Levelid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFLevelAnchorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFLevelAnchorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLevelAnchorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_level_anchor`.* FROM `cmf_level_anchor` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLevelAnchorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFLevelAnchorSlice")
	}

	*o = slice

	return nil
}

// CMFLevelAnchorExists checks if the CMFLevelAnchor row exists.
func CMFLevelAnchorExists(ctx context.Context, exec boil.ContextExecutor, iD int, levelid uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_level_anchor` where `id`=? AND `levelid`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD, levelid)
	}
	row := exec.QueryRowContext(ctx, sql, iD, levelid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_level_anchor exists")
	}

	return exists, nil
}
