// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFLiang is an object representing the database table.
type CMFLiang struct {
	ID        uint   `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Length    int    `boil:"length" json:"length" toml:"length" yaml:"length"`
	Coin      int    `boil:"coin" json:"coin" toml:"coin" yaml:"coin"`
	Score     int    `boil:"score" json:"score" toml:"score" yaml:"score"`
	Addtime   int    `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	UID       int    `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Buytime   int    `boil:"buytime" json:"buytime" toml:"buytime" yaml:"buytime"`
	ListOrder int    `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`
	Status    bool   `boil:"status" json:"status" toml:"status" yaml:"status"`
	State     int8   `boil:"state" json:"state" toml:"state" yaml:"state"`

	R *cmfLiangR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfLiangL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFLiangColumns = struct {
	ID        string
	Name      string
	Length    string
	Coin      string
	Score     string
	Addtime   string
	UID       string
	Buytime   string
	ListOrder string
	Status    string
	State     string
}{
	ID:        "id",
	Name:      "name",
	Length:    "length",
	Coin:      "coin",
	Score:     "score",
	Addtime:   "addtime",
	UID:       "uid",
	Buytime:   "buytime",
	ListOrder: "list_order",
	Status:    "status",
	State:     "state",
}

// Generated where

var CMFLiangWhere = struct {
	ID        whereHelperuint
	Name      whereHelperstring
	Length    whereHelperint
	Coin      whereHelperint
	Score     whereHelperint
	Addtime   whereHelperint
	UID       whereHelperint
	Buytime   whereHelperint
	ListOrder whereHelperint
	Status    whereHelperbool
	State     whereHelperint8
}{
	ID:        whereHelperuint{field: "`cmf_liang`.`id`"},
	Name:      whereHelperstring{field: "`cmf_liang`.`name`"},
	Length:    whereHelperint{field: "`cmf_liang`.`length`"},
	Coin:      whereHelperint{field: "`cmf_liang`.`coin`"},
	Score:     whereHelperint{field: "`cmf_liang`.`score`"},
	Addtime:   whereHelperint{field: "`cmf_liang`.`addtime`"},
	UID:       whereHelperint{field: "`cmf_liang`.`uid`"},
	Buytime:   whereHelperint{field: "`cmf_liang`.`buytime`"},
	ListOrder: whereHelperint{field: "`cmf_liang`.`list_order`"},
	Status:    whereHelperbool{field: "`cmf_liang`.`status`"},
	State:     whereHelperint8{field: "`cmf_liang`.`state`"},
}

// CMFLiangRels is where relationship names are stored.
var CMFLiangRels = struct {
}{}

// cmfLiangR is where relationships are stored.
type cmfLiangR struct {
}

// NewStruct creates a new relationship struct
func (*cmfLiangR) NewStruct() *cmfLiangR {
	return &cmfLiangR{}
}

// cmfLiangL is where Load methods for each relationship are stored.
type cmfLiangL struct{}

var (
	cmfLiangAllColumns            = []string{"id", "name", "length", "coin", "score", "addtime", "uid", "buytime", "list_order", "status", "state"}
	cmfLiangColumnsWithoutDefault = []string{"name"}
	cmfLiangColumnsWithDefault    = []string{"id", "length", "coin", "score", "addtime", "uid", "buytime", "list_order", "status", "state"}
	cmfLiangPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFLiangSlice is an alias for a slice of pointers to CMFLiang.
	// This should generally be used opposed to []CMFLiang.
	CMFLiangSlice []*CMFLiang
	// CMFLiangHook is the signature for custom CMFLiang hook methods
	CMFLiangHook func(context.Context, boil.ContextExecutor, *CMFLiang) error

	cmfLiangQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfLiangType                 = reflect.TypeOf(&CMFLiang{})
	cmfLiangMapping              = queries.MakeStructMapping(cmfLiangType)
	cmfLiangPrimaryKeyMapping, _ = queries.BindMapping(cmfLiangType, cmfLiangMapping, cmfLiangPrimaryKeyColumns)
	cmfLiangInsertCacheMut       sync.RWMutex
	cmfLiangInsertCache          = make(map[string]insertCache)
	cmfLiangUpdateCacheMut       sync.RWMutex
	cmfLiangUpdateCache          = make(map[string]updateCache)
	cmfLiangUpsertCacheMut       sync.RWMutex
	cmfLiangUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfLiangBeforeInsertHooks []CMFLiangHook
var cmfLiangBeforeUpdateHooks []CMFLiangHook
var cmfLiangBeforeDeleteHooks []CMFLiangHook
var cmfLiangBeforeUpsertHooks []CMFLiangHook

var cmfLiangAfterInsertHooks []CMFLiangHook
var cmfLiangAfterSelectHooks []CMFLiangHook
var cmfLiangAfterUpdateHooks []CMFLiangHook
var cmfLiangAfterDeleteHooks []CMFLiangHook
var cmfLiangAfterUpsertHooks []CMFLiangHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFLiang) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiangBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFLiang) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiangBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFLiang) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiangBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFLiang) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiangBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFLiang) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiangAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFLiang) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiangAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFLiang) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiangAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFLiang) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiangAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFLiang) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiangAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFLiangHook registers your hook function for all future operations.
func AddCMFLiangHook(hookPoint boil.HookPoint, cmfLiangHook CMFLiangHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfLiangBeforeInsertHooks = append(cmfLiangBeforeInsertHooks, cmfLiangHook)
	case boil.BeforeUpdateHook:
		cmfLiangBeforeUpdateHooks = append(cmfLiangBeforeUpdateHooks, cmfLiangHook)
	case boil.BeforeDeleteHook:
		cmfLiangBeforeDeleteHooks = append(cmfLiangBeforeDeleteHooks, cmfLiangHook)
	case boil.BeforeUpsertHook:
		cmfLiangBeforeUpsertHooks = append(cmfLiangBeforeUpsertHooks, cmfLiangHook)
	case boil.AfterInsertHook:
		cmfLiangAfterInsertHooks = append(cmfLiangAfterInsertHooks, cmfLiangHook)
	case boil.AfterSelectHook:
		cmfLiangAfterSelectHooks = append(cmfLiangAfterSelectHooks, cmfLiangHook)
	case boil.AfterUpdateHook:
		cmfLiangAfterUpdateHooks = append(cmfLiangAfterUpdateHooks, cmfLiangHook)
	case boil.AfterDeleteHook:
		cmfLiangAfterDeleteHooks = append(cmfLiangAfterDeleteHooks, cmfLiangHook)
	case boil.AfterUpsertHook:
		cmfLiangAfterUpsertHooks = append(cmfLiangAfterUpsertHooks, cmfLiangHook)
	}
}

// One returns a single cmfLiang record from the query.
func (q cmfLiangQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFLiang, error) {
	o := &CMFLiang{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_liang")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFLiang records from the query.
func (q cmfLiangQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFLiangSlice, error) {
	var o []*CMFLiang

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFLiang slice")
	}

	if len(cmfLiangAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFLiang records in the query.
func (q cmfLiangQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_liang rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfLiangQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_liang exists")
	}

	return count > 0, nil
}

// CMFLiangs retrieves all the records using an executor.
func CMFLiangs(mods ...qm.QueryMod) cmfLiangQuery {
	mods = append(mods, qm.From("`cmf_liang`"))
	return cmfLiangQuery{NewQuery(mods...)}
}

// FindCMFLiang retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFLiang(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFLiang, error) {
	cmfLiangObj := &CMFLiang{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_liang` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfLiangObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_liang")
	}

	return cmfLiangObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFLiang) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_liang provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLiangColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfLiangInsertCacheMut.RLock()
	cache, cached := cmfLiangInsertCache[key]
	cmfLiangInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfLiangAllColumns,
			cmfLiangColumnsWithDefault,
			cmfLiangColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfLiangType, cmfLiangMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfLiangType, cmfLiangMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_liang` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_liang` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_liang` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfLiangPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_liang")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfLiangMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_liang")
	}

CacheNoHooks:
	if !cached {
		cmfLiangInsertCacheMut.Lock()
		cmfLiangInsertCache[key] = cache
		cmfLiangInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFLiang.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFLiang) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfLiangUpdateCacheMut.RLock()
	cache, cached := cmfLiangUpdateCache[key]
	cmfLiangUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfLiangAllColumns,
			cmfLiangPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_liang, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_liang` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfLiangPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfLiangType, cmfLiangMapping, append(wl, cmfLiangPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_liang row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_liang")
	}

	if !cached {
		cmfLiangUpdateCacheMut.Lock()
		cmfLiangUpdateCache[key] = cache
		cmfLiangUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfLiangQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_liang")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_liang")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFLiangSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiangPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_liang` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiangPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfLiang slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfLiang")
	}
	return rowsAff, nil
}

var mySQLCMFLiangUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFLiang) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_liang provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLiangColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFLiangUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfLiangUpsertCacheMut.RLock()
	cache, cached := cmfLiangUpsertCache[key]
	cmfLiangUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfLiangAllColumns,
			cmfLiangColumnsWithDefault,
			cmfLiangColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfLiangAllColumns,
			cmfLiangPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_liang, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_liang`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_liang` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfLiangType, cmfLiangMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfLiangType, cmfLiangMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_liang")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfLiangMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfLiangType, cmfLiangMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_liang")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_liang")
	}

CacheNoHooks:
	if !cached {
		cmfLiangUpsertCacheMut.Lock()
		cmfLiangUpsertCache[key] = cache
		cmfLiangUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFLiang record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFLiang) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFLiang provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfLiangPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_liang` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_liang")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_liang")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfLiangQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfLiangQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_liang")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_liang")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFLiangSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfLiangBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiangPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_liang` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiangPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfLiang slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_liang")
	}

	if len(cmfLiangAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFLiang) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFLiang(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFLiangSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFLiangSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiangPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_liang`.* FROM `cmf_liang` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiangPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFLiangSlice")
	}

	*o = slice

	return nil
}

// CMFLiangExists checks if the CMFLiang row exists.
func CMFLiangExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_liang` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_liang exists")
	}

	return exists, nil
}
