// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFLive is an object representing the database table.
type CMFLive struct {
	UID           uint       `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Showid        int64      `boil:"showid" json:"showid" toml:"showid" yaml:"showid"`
	Islive        int        `boil:"islive" json:"islive" toml:"islive" yaml:"islive"`
	Starttime     int        `boil:"starttime" json:"starttime" toml:"starttime" yaml:"starttime"`
	Title         string     `boil:"title" json:"title" toml:"title" yaml:"title"`
	Province      string     `boil:"province" json:"province" toml:"province" yaml:"province"`
	City          string     `boil:"city" json:"city" toml:"city" yaml:"city"`
	Stream        string     `boil:"stream" json:"stream" toml:"stream" yaml:"stream"`
	Thumb         string     `boil:"thumb" json:"thumb" toml:"thumb" yaml:"thumb"`
	Pull          string     `boil:"pull" json:"pull" toml:"pull" yaml:"pull"`
	LNG           string     `boil:"lng" json:"lng" toml:"lng" yaml:"lng"`
	Lat           string     `boil:"lat" json:"lat" toml:"lat" yaml:"lat"`
	Type          bool       `boil:"type" json:"type" toml:"type" yaml:"type"`
	TypeVal       string     `boil:"type_val" json:"type_val" toml:"type_val" yaml:"type_val"`
	Isvideo       bool       `boil:"isvideo" json:"isvideo" toml:"isvideo" yaml:"isvideo"`
	WyCid         string     `boil:"wy_cid" json:"wy_cid" toml:"wy_cid" yaml:"wy_cid"`
	Goodnum       string     `boil:"goodnum" json:"goodnum" toml:"goodnum" yaml:"goodnum"`
	Anyway        bool       `boil:"anyway" json:"anyway" toml:"anyway" yaml:"anyway"`
	Liveclassid   int        `boil:"liveclassid" json:"liveclassid" toml:"liveclassid" yaml:"liveclassid"`
	Hotvotes      int        `boil:"hotvotes" json:"hotvotes" toml:"hotvotes" yaml:"hotvotes"`
	Pkuid         int        `boil:"pkuid" json:"pkuid" toml:"pkuid" yaml:"pkuid"`
	Pkstream      string     `boil:"pkstream" json:"pkstream" toml:"pkstream" yaml:"pkstream"`
	Ismic         bool       `boil:"ismic" json:"ismic" toml:"ismic" yaml:"ismic"`
	Ishot         bool       `boil:"ishot" json:"ishot" toml:"ishot" yaml:"ishot"`
	Isrecommend   bool       `boil:"isrecommend" json:"isrecommend" toml:"isrecommend" yaml:"isrecommend"`
	Deviceinfo    string     `boil:"deviceinfo" json:"deviceinfo" toml:"deviceinfo" yaml:"deviceinfo"`
	Isshop        bool       `boil:"isshop" json:"isshop" toml:"isshop" yaml:"isshop"`
	GameAction    bool       `boil:"game_action" json:"game_action" toml:"game_action" yaml:"game_action"`
	BankerCoin    null.Int64 `boil:"banker_coin" json:"banker_coin,omitempty" toml:"banker_coin" yaml:"banker_coin,omitempty"`
	Isoff         bool       `boil:"isoff" json:"isoff" toml:"isoff" yaml:"isoff"`
	Offtime       int64      `boil:"offtime" json:"offtime" toml:"offtime" yaml:"offtime"`
	RecommendTime int        `boil:"recommend_time" json:"recommend_time" toml:"recommend_time" yaml:"recommend_time"`
	CoinTotal     int        `boil:"coin_total" json:"coin_total" toml:"coin_total" yaml:"coin_total"`
	RTCToken      string     `boil:"rtc_token" json:"rtc_token" toml:"rtc_token" yaml:"rtc_token"`

	R *cmfLiveR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfLiveL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFLiveColumns = struct {
	UID           string
	Showid        string
	Islive        string
	Starttime     string
	Title         string
	Province      string
	City          string
	Stream        string
	Thumb         string
	Pull          string
	LNG           string
	Lat           string
	Type          string
	TypeVal       string
	Isvideo       string
	WyCid         string
	Goodnum       string
	Anyway        string
	Liveclassid   string
	Hotvotes      string
	Pkuid         string
	Pkstream      string
	Ismic         string
	Ishot         string
	Isrecommend   string
	Deviceinfo    string
	Isshop        string
	GameAction    string
	BankerCoin    string
	Isoff         string
	Offtime       string
	RecommendTime string
	CoinTotal     string
	RTCToken      string
}{
	UID:           "uid",
	Showid:        "showid",
	Islive:        "islive",
	Starttime:     "starttime",
	Title:         "title",
	Province:      "province",
	City:          "city",
	Stream:        "stream",
	Thumb:         "thumb",
	Pull:          "pull",
	LNG:           "lng",
	Lat:           "lat",
	Type:          "type",
	TypeVal:       "type_val",
	Isvideo:       "isvideo",
	WyCid:         "wy_cid",
	Goodnum:       "goodnum",
	Anyway:        "anyway",
	Liveclassid:   "liveclassid",
	Hotvotes:      "hotvotes",
	Pkuid:         "pkuid",
	Pkstream:      "pkstream",
	Ismic:         "ismic",
	Ishot:         "ishot",
	Isrecommend:   "isrecommend",
	Deviceinfo:    "deviceinfo",
	Isshop:        "isshop",
	GameAction:    "game_action",
	BankerCoin:    "banker_coin",
	Isoff:         "isoff",
	Offtime:       "offtime",
	RecommendTime: "recommend_time",
	CoinTotal:     "coin_total",
	RTCToken:      "rtc_token",
}

// Generated where

var CMFLiveWhere = struct {
	UID           whereHelperuint
	Showid        whereHelperint64
	Islive        whereHelperint
	Starttime     whereHelperint
	Title         whereHelperstring
	Province      whereHelperstring
	City          whereHelperstring
	Stream        whereHelperstring
	Thumb         whereHelperstring
	Pull          whereHelperstring
	LNG           whereHelperstring
	Lat           whereHelperstring
	Type          whereHelperbool
	TypeVal       whereHelperstring
	Isvideo       whereHelperbool
	WyCid         whereHelperstring
	Goodnum       whereHelperstring
	Anyway        whereHelperbool
	Liveclassid   whereHelperint
	Hotvotes      whereHelperint
	Pkuid         whereHelperint
	Pkstream      whereHelperstring
	Ismic         whereHelperbool
	Ishot         whereHelperbool
	Isrecommend   whereHelperbool
	Deviceinfo    whereHelperstring
	Isshop        whereHelperbool
	GameAction    whereHelperbool
	BankerCoin    whereHelpernull_Int64
	Isoff         whereHelperbool
	Offtime       whereHelperint64
	RecommendTime whereHelperint
	CoinTotal     whereHelperint
	RTCToken      whereHelperstring
}{
	UID:           whereHelperuint{field: "`cmf_live`.`uid`"},
	Showid:        whereHelperint64{field: "`cmf_live`.`showid`"},
	Islive:        whereHelperint{field: "`cmf_live`.`islive`"},
	Starttime:     whereHelperint{field: "`cmf_live`.`starttime`"},
	Title:         whereHelperstring{field: "`cmf_live`.`title`"},
	Province:      whereHelperstring{field: "`cmf_live`.`province`"},
	City:          whereHelperstring{field: "`cmf_live`.`city`"},
	Stream:        whereHelperstring{field: "`cmf_live`.`stream`"},
	Thumb:         whereHelperstring{field: "`cmf_live`.`thumb`"},
	Pull:          whereHelperstring{field: "`cmf_live`.`pull`"},
	LNG:           whereHelperstring{field: "`cmf_live`.`lng`"},
	Lat:           whereHelperstring{field: "`cmf_live`.`lat`"},
	Type:          whereHelperbool{field: "`cmf_live`.`type`"},
	TypeVal:       whereHelperstring{field: "`cmf_live`.`type_val`"},
	Isvideo:       whereHelperbool{field: "`cmf_live`.`isvideo`"},
	WyCid:         whereHelperstring{field: "`cmf_live`.`wy_cid`"},
	Goodnum:       whereHelperstring{field: "`cmf_live`.`goodnum`"},
	Anyway:        whereHelperbool{field: "`cmf_live`.`anyway`"},
	Liveclassid:   whereHelperint{field: "`cmf_live`.`liveclassid`"},
	Hotvotes:      whereHelperint{field: "`cmf_live`.`hotvotes`"},
	Pkuid:         whereHelperint{field: "`cmf_live`.`pkuid`"},
	Pkstream:      whereHelperstring{field: "`cmf_live`.`pkstream`"},
	Ismic:         whereHelperbool{field: "`cmf_live`.`ismic`"},
	Ishot:         whereHelperbool{field: "`cmf_live`.`ishot`"},
	Isrecommend:   whereHelperbool{field: "`cmf_live`.`isrecommend`"},
	Deviceinfo:    whereHelperstring{field: "`cmf_live`.`deviceinfo`"},
	Isshop:        whereHelperbool{field: "`cmf_live`.`isshop`"},
	GameAction:    whereHelperbool{field: "`cmf_live`.`game_action`"},
	BankerCoin:    whereHelpernull_Int64{field: "`cmf_live`.`banker_coin`"},
	Isoff:         whereHelperbool{field: "`cmf_live`.`isoff`"},
	Offtime:       whereHelperint64{field: "`cmf_live`.`offtime`"},
	RecommendTime: whereHelperint{field: "`cmf_live`.`recommend_time`"},
	CoinTotal:     whereHelperint{field: "`cmf_live`.`coin_total`"},
	RTCToken:      whereHelperstring{field: "`cmf_live`.`rtc_token`"},
}

// CMFLiveRels is where relationship names are stored.
var CMFLiveRels = struct {
}{}

// cmfLiveR is where relationships are stored.
type cmfLiveR struct {
}

// NewStruct creates a new relationship struct
func (*cmfLiveR) NewStruct() *cmfLiveR {
	return &cmfLiveR{}
}

// cmfLiveL is where Load methods for each relationship are stored.
type cmfLiveL struct{}

var (
	cmfLiveAllColumns            = []string{"uid", "showid", "islive", "starttime", "title", "province", "city", "stream", "thumb", "pull", "lng", "lat", "type", "type_val", "isvideo", "wy_cid", "goodnum", "anyway", "liveclassid", "hotvotes", "pkuid", "pkstream", "ismic", "ishot", "isrecommend", "deviceinfo", "isshop", "game_action", "banker_coin", "isoff", "offtime", "recommend_time", "coin_total", "rtc_token"}
	cmfLiveColumnsWithoutDefault = []string{"showid", "title", "province", "city", "stream", "thumb", "pull", "lng", "lat", "type_val", "wy_cid", "pkstream", "deviceinfo", "rtc_token"}
	cmfLiveColumnsWithDefault    = []string{"uid", "islive", "starttime", "type", "isvideo", "goodnum", "anyway", "liveclassid", "hotvotes", "pkuid", "ismic", "ishot", "isrecommend", "isshop", "game_action", "banker_coin", "isoff", "offtime", "recommend_time", "coin_total"}
	cmfLivePrimaryKeyColumns     = []string{"uid"}
)

type (
	// CMFLiveSlice is an alias for a slice of pointers to CMFLive.
	// This should generally be used opposed to []CMFLive.
	CMFLiveSlice []*CMFLive
	// CMFLiveHook is the signature for custom CMFLive hook methods
	CMFLiveHook func(context.Context, boil.ContextExecutor, *CMFLive) error

	cmfLiveQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfLiveType                 = reflect.TypeOf(&CMFLive{})
	cmfLiveMapping              = queries.MakeStructMapping(cmfLiveType)
	cmfLivePrimaryKeyMapping, _ = queries.BindMapping(cmfLiveType, cmfLiveMapping, cmfLivePrimaryKeyColumns)
	cmfLiveInsertCacheMut       sync.RWMutex
	cmfLiveInsertCache          = make(map[string]insertCache)
	cmfLiveUpdateCacheMut       sync.RWMutex
	cmfLiveUpdateCache          = make(map[string]updateCache)
	cmfLiveUpsertCacheMut       sync.RWMutex
	cmfLiveUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfLiveBeforeInsertHooks []CMFLiveHook
var cmfLiveBeforeUpdateHooks []CMFLiveHook
var cmfLiveBeforeDeleteHooks []CMFLiveHook
var cmfLiveBeforeUpsertHooks []CMFLiveHook

var cmfLiveAfterInsertHooks []CMFLiveHook
var cmfLiveAfterSelectHooks []CMFLiveHook
var cmfLiveAfterUpdateHooks []CMFLiveHook
var cmfLiveAfterDeleteHooks []CMFLiveHook
var cmfLiveAfterUpsertHooks []CMFLiveHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFLive) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFLive) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFLive) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFLive) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFLive) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFLive) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFLive) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFLive) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFLive) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFLiveHook registers your hook function for all future operations.
func AddCMFLiveHook(hookPoint boil.HookPoint, cmfLiveHook CMFLiveHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfLiveBeforeInsertHooks = append(cmfLiveBeforeInsertHooks, cmfLiveHook)
	case boil.BeforeUpdateHook:
		cmfLiveBeforeUpdateHooks = append(cmfLiveBeforeUpdateHooks, cmfLiveHook)
	case boil.BeforeDeleteHook:
		cmfLiveBeforeDeleteHooks = append(cmfLiveBeforeDeleteHooks, cmfLiveHook)
	case boil.BeforeUpsertHook:
		cmfLiveBeforeUpsertHooks = append(cmfLiveBeforeUpsertHooks, cmfLiveHook)
	case boil.AfterInsertHook:
		cmfLiveAfterInsertHooks = append(cmfLiveAfterInsertHooks, cmfLiveHook)
	case boil.AfterSelectHook:
		cmfLiveAfterSelectHooks = append(cmfLiveAfterSelectHooks, cmfLiveHook)
	case boil.AfterUpdateHook:
		cmfLiveAfterUpdateHooks = append(cmfLiveAfterUpdateHooks, cmfLiveHook)
	case boil.AfterDeleteHook:
		cmfLiveAfterDeleteHooks = append(cmfLiveAfterDeleteHooks, cmfLiveHook)
	case boil.AfterUpsertHook:
		cmfLiveAfterUpsertHooks = append(cmfLiveAfterUpsertHooks, cmfLiveHook)
	}
}

// One returns a single cmfLive record from the query.
func (q cmfLiveQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFLive, error) {
	o := &CMFLive{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_live")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFLive records from the query.
func (q cmfLiveQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFLiveSlice, error) {
	var o []*CMFLive

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFLive slice")
	}

	if len(cmfLiveAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFLive records in the query.
func (q cmfLiveQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_live rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfLiveQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_live exists")
	}

	return count > 0, nil
}

// CMFLives retrieves all the records using an executor.
func CMFLives(mods ...qm.QueryMod) cmfLiveQuery {
	mods = append(mods, qm.From("`cmf_live`"))
	return cmfLiveQuery{NewQuery(mods...)}
}

// FindCMFLive retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFLive(ctx context.Context, exec boil.ContextExecutor, uID uint, selectCols ...string) (*CMFLive, error) {
	cmfLiveObj := &CMFLive{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_live` where `uid`=?", sel,
	)

	q := queries.Raw(query, uID)

	err := q.Bind(ctx, exec, cmfLiveObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_live")
	}

	return cmfLiveObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFLive) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_live provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLiveColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfLiveInsertCacheMut.RLock()
	cache, cached := cmfLiveInsertCache[key]
	cmfLiveInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfLiveAllColumns,
			cmfLiveColumnsWithDefault,
			cmfLiveColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfLiveType, cmfLiveMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfLiveType, cmfLiveMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_live` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_live` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_live` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfLivePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_live")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.UID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfLiveMapping["uid"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_live")
	}

CacheNoHooks:
	if !cached {
		cmfLiveInsertCacheMut.Lock()
		cmfLiveInsertCache[key] = cache
		cmfLiveInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFLive.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFLive) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfLiveUpdateCacheMut.RLock()
	cache, cached := cmfLiveUpdateCache[key]
	cmfLiveUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfLiveAllColumns,
			cmfLivePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_live, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_live` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfLivePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfLiveType, cmfLiveMapping, append(wl, cmfLivePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_live row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_live")
	}

	if !cached {
		cmfLiveUpdateCacheMut.Lock()
		cmfLiveUpdateCache[key] = cache
		cmfLiveUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfLiveQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_live")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_live")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFLiveSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_live` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLivePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfLive slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfLive")
	}
	return rowsAff, nil
}

var mySQLCMFLiveUniqueColumns = []string{
	"uid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFLive) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_live provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLiveColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFLiveUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfLiveUpsertCacheMut.RLock()
	cache, cached := cmfLiveUpsertCache[key]
	cmfLiveUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfLiveAllColumns,
			cmfLiveColumnsWithDefault,
			cmfLiveColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfLiveAllColumns,
			cmfLivePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_live, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_live`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_live` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfLiveType, cmfLiveMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfLiveType, cmfLiveMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_live")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.UID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfLiveMapping["uid"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfLiveType, cmfLiveMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_live")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_live")
	}

CacheNoHooks:
	if !cached {
		cmfLiveUpsertCacheMut.Lock()
		cmfLiveUpsertCache[key] = cache
		cmfLiveUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFLive record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFLive) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFLive provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfLivePrimaryKeyMapping)
	sql := "DELETE FROM `cmf_live` WHERE `uid`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_live")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_live")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfLiveQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfLiveQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_live")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_live")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFLiveSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfLiveBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_live` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLivePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfLive slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_live")
	}

	if len(cmfLiveAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFLive) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFLive(ctx, exec, o.UID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFLiveSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFLiveSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_live`.* FROM `cmf_live` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLivePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFLiveSlice")
	}

	*o = slice

	return nil
}

// CMFLiveExists checks if the CMFLive row exists.
func CMFLiveExists(ctx context.Context, exec boil.ContextExecutor, uID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_live` where `uid`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uID)
	}
	row := exec.QueryRowContext(ctx, sql, uID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_live exists")
	}

	return exists, nil
}
