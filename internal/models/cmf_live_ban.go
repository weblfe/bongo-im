// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFLiveBan is an object representing the database table.
type CMFLiveBan struct {
	Liveuid uint `boil:"liveuid" json:"liveuid" toml:"liveuid" yaml:"liveuid"`
	Superid uint `boil:"superid" json:"superid" toml:"superid" yaml:"superid"`
	Addtime int  `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`

	R *cmfLiveBanR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfLiveBanL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFLiveBanColumns = struct {
	Liveuid string
	Superid string
	Addtime string
}{
	Liveuid: "liveuid",
	Superid: "superid",
	Addtime: "addtime",
}

// Generated where

var CMFLiveBanWhere = struct {
	Liveuid whereHelperuint
	Superid whereHelperuint
	Addtime whereHelperint
}{
	Liveuid: whereHelperuint{field: "`cmf_live_ban`.`liveuid`"},
	Superid: whereHelperuint{field: "`cmf_live_ban`.`superid`"},
	Addtime: whereHelperint{field: "`cmf_live_ban`.`addtime`"},
}

// CMFLiveBanRels is where relationship names are stored.
var CMFLiveBanRels = struct {
}{}

// cmfLiveBanR is where relationships are stored.
type cmfLiveBanR struct {
}

// NewStruct creates a new relationship struct
func (*cmfLiveBanR) NewStruct() *cmfLiveBanR {
	return &cmfLiveBanR{}
}

// cmfLiveBanL is where Load methods for each relationship are stored.
type cmfLiveBanL struct{}

var (
	cmfLiveBanAllColumns            = []string{"liveuid", "superid", "addtime"}
	cmfLiveBanColumnsWithoutDefault = []string{}
	cmfLiveBanColumnsWithDefault    = []string{"liveuid", "superid", "addtime"}
	cmfLiveBanPrimaryKeyColumns     = []string{"liveuid"}
)

type (
	// CMFLiveBanSlice is an alias for a slice of pointers to CMFLiveBan.
	// This should generally be used opposed to []CMFLiveBan.
	CMFLiveBanSlice []*CMFLiveBan
	// CMFLiveBanHook is the signature for custom CMFLiveBan hook methods
	CMFLiveBanHook func(context.Context, boil.ContextExecutor, *CMFLiveBan) error

	cmfLiveBanQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfLiveBanType                 = reflect.TypeOf(&CMFLiveBan{})
	cmfLiveBanMapping              = queries.MakeStructMapping(cmfLiveBanType)
	cmfLiveBanPrimaryKeyMapping, _ = queries.BindMapping(cmfLiveBanType, cmfLiveBanMapping, cmfLiveBanPrimaryKeyColumns)
	cmfLiveBanInsertCacheMut       sync.RWMutex
	cmfLiveBanInsertCache          = make(map[string]insertCache)
	cmfLiveBanUpdateCacheMut       sync.RWMutex
	cmfLiveBanUpdateCache          = make(map[string]updateCache)
	cmfLiveBanUpsertCacheMut       sync.RWMutex
	cmfLiveBanUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfLiveBanBeforeInsertHooks []CMFLiveBanHook
var cmfLiveBanBeforeUpdateHooks []CMFLiveBanHook
var cmfLiveBanBeforeDeleteHooks []CMFLiveBanHook
var cmfLiveBanBeforeUpsertHooks []CMFLiveBanHook

var cmfLiveBanAfterInsertHooks []CMFLiveBanHook
var cmfLiveBanAfterSelectHooks []CMFLiveBanHook
var cmfLiveBanAfterUpdateHooks []CMFLiveBanHook
var cmfLiveBanAfterDeleteHooks []CMFLiveBanHook
var cmfLiveBanAfterUpsertHooks []CMFLiveBanHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFLiveBan) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBanBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFLiveBan) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBanBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFLiveBan) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBanBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFLiveBan) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBanBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFLiveBan) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBanAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFLiveBan) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBanAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFLiveBan) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBanAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFLiveBan) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBanAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFLiveBan) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveBanAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFLiveBanHook registers your hook function for all future operations.
func AddCMFLiveBanHook(hookPoint boil.HookPoint, cmfLiveBanHook CMFLiveBanHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfLiveBanBeforeInsertHooks = append(cmfLiveBanBeforeInsertHooks, cmfLiveBanHook)
	case boil.BeforeUpdateHook:
		cmfLiveBanBeforeUpdateHooks = append(cmfLiveBanBeforeUpdateHooks, cmfLiveBanHook)
	case boil.BeforeDeleteHook:
		cmfLiveBanBeforeDeleteHooks = append(cmfLiveBanBeforeDeleteHooks, cmfLiveBanHook)
	case boil.BeforeUpsertHook:
		cmfLiveBanBeforeUpsertHooks = append(cmfLiveBanBeforeUpsertHooks, cmfLiveBanHook)
	case boil.AfterInsertHook:
		cmfLiveBanAfterInsertHooks = append(cmfLiveBanAfterInsertHooks, cmfLiveBanHook)
	case boil.AfterSelectHook:
		cmfLiveBanAfterSelectHooks = append(cmfLiveBanAfterSelectHooks, cmfLiveBanHook)
	case boil.AfterUpdateHook:
		cmfLiveBanAfterUpdateHooks = append(cmfLiveBanAfterUpdateHooks, cmfLiveBanHook)
	case boil.AfterDeleteHook:
		cmfLiveBanAfterDeleteHooks = append(cmfLiveBanAfterDeleteHooks, cmfLiveBanHook)
	case boil.AfterUpsertHook:
		cmfLiveBanAfterUpsertHooks = append(cmfLiveBanAfterUpsertHooks, cmfLiveBanHook)
	}
}

// One returns a single cmfLiveBan record from the query.
func (q cmfLiveBanQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFLiveBan, error) {
	o := &CMFLiveBan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_live_ban")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFLiveBan records from the query.
func (q cmfLiveBanQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFLiveBanSlice, error) {
	var o []*CMFLiveBan

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFLiveBan slice")
	}

	if len(cmfLiveBanAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFLiveBan records in the query.
func (q cmfLiveBanQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_live_ban rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfLiveBanQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_live_ban exists")
	}

	return count > 0, nil
}

// CMFLiveBans retrieves all the records using an executor.
func CMFLiveBans(mods ...qm.QueryMod) cmfLiveBanQuery {
	mods = append(mods, qm.From("`cmf_live_ban`"))
	return cmfLiveBanQuery{NewQuery(mods...)}
}

// FindCMFLiveBan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFLiveBan(ctx context.Context, exec boil.ContextExecutor, liveuid uint, selectCols ...string) (*CMFLiveBan, error) {
	cmfLiveBanObj := &CMFLiveBan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_live_ban` where `liveuid`=?", sel,
	)

	q := queries.Raw(query, liveuid)

	err := q.Bind(ctx, exec, cmfLiveBanObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_live_ban")
	}

	return cmfLiveBanObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFLiveBan) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_live_ban provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLiveBanColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfLiveBanInsertCacheMut.RLock()
	cache, cached := cmfLiveBanInsertCache[key]
	cmfLiveBanInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfLiveBanAllColumns,
			cmfLiveBanColumnsWithDefault,
			cmfLiveBanColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfLiveBanType, cmfLiveBanMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfLiveBanType, cmfLiveBanMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_live_ban` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_live_ban` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_live_ban` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfLiveBanPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_live_ban")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Liveuid = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfLiveBanMapping["liveuid"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Liveuid,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_live_ban")
	}

CacheNoHooks:
	if !cached {
		cmfLiveBanInsertCacheMut.Lock()
		cmfLiveBanInsertCache[key] = cache
		cmfLiveBanInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFLiveBan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFLiveBan) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfLiveBanUpdateCacheMut.RLock()
	cache, cached := cmfLiveBanUpdateCache[key]
	cmfLiveBanUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfLiveBanAllColumns,
			cmfLiveBanPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_live_ban, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_live_ban` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfLiveBanPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfLiveBanType, cmfLiveBanMapping, append(wl, cmfLiveBanPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_live_ban row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_live_ban")
	}

	if !cached {
		cmfLiveBanUpdateCacheMut.Lock()
		cmfLiveBanUpdateCache[key] = cache
		cmfLiveBanUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfLiveBanQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_live_ban")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_live_ban")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFLiveBanSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiveBanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_live_ban` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiveBanPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfLiveBan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfLiveBan")
	}
	return rowsAff, nil
}

var mySQLCMFLiveBanUniqueColumns = []string{
	"liveuid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFLiveBan) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_live_ban provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLiveBanColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFLiveBanUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfLiveBanUpsertCacheMut.RLock()
	cache, cached := cmfLiveBanUpsertCache[key]
	cmfLiveBanUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfLiveBanAllColumns,
			cmfLiveBanColumnsWithDefault,
			cmfLiveBanColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfLiveBanAllColumns,
			cmfLiveBanPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_live_ban, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_live_ban`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_live_ban` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfLiveBanType, cmfLiveBanMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfLiveBanType, cmfLiveBanMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_live_ban")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Liveuid = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfLiveBanMapping["liveuid"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfLiveBanType, cmfLiveBanMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_live_ban")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_live_ban")
	}

CacheNoHooks:
	if !cached {
		cmfLiveBanUpsertCacheMut.Lock()
		cmfLiveBanUpsertCache[key] = cache
		cmfLiveBanUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFLiveBan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFLiveBan) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFLiveBan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfLiveBanPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_live_ban` WHERE `liveuid`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_live_ban")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_live_ban")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfLiveBanQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfLiveBanQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_live_ban")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_live_ban")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFLiveBanSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfLiveBanBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiveBanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_live_ban` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiveBanPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfLiveBan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_live_ban")
	}

	if len(cmfLiveBanAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFLiveBan) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFLiveBan(ctx, exec, o.Liveuid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFLiveBanSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFLiveBanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiveBanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_live_ban`.* FROM `cmf_live_ban` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiveBanPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFLiveBanSlice")
	}

	*o = slice

	return nil
}

// CMFLiveBanExists checks if the CMFLiveBan row exists.
func CMFLiveBanExists(ctx context.Context, exec boil.ContextExecutor, liveuid uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_live_ban` where `liveuid`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, liveuid)
	}
	row := exec.QueryRowContext(ctx, sql, liveuid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_live_ban exists")
	}

	return exists, nil
}
