// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CMFLiveMember is an object representing the database table.
type CMFLiveMember struct {
	ID         int64         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID        int64         `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Liveuid    int64         `boil:"liveuid" json:"liveuid" toml:"liveuid" yaml:"liveuid"`
	Stream     string        `boil:"stream" json:"stream" toml:"stream" yaml:"stream"`
	Showid     int64         `boil:"showid" json:"showid" toml:"showid" yaml:"showid"`
	Status     int16         `boil:"status" json:"status" toml:"status" yaml:"status"`
	UserType   int16         `boil:"user_type" json:"user_type" toml:"user_type" yaml:"user_type"`
	Sign       types.Decimal `boil:"sign" json:"sign" toml:"sign" yaml:"sign"`
	CreateTime time.Time     `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime null.Time     `boil:"update_time" json:"update_time,omitempty" toml:"update_time" yaml:"update_time,omitempty"`

	R *cmfLiveMemberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfLiveMemberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFLiveMemberColumns = struct {
	ID         string
	UID        string
	Liveuid    string
	Stream     string
	Showid     string
	Status     string
	UserType   string
	Sign       string
	CreateTime string
	UpdateTime string
}{
	ID:         "id",
	UID:        "uid",
	Liveuid:    "liveuid",
	Stream:     "stream",
	Showid:     "showid",
	Status:     "status",
	UserType:   "user_type",
	Sign:       "sign",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

// Generated where

var CMFLiveMemberWhere = struct {
	ID         whereHelperint64
	UID        whereHelperint64
	Liveuid    whereHelperint64
	Stream     whereHelperstring
	Showid     whereHelperint64
	Status     whereHelperint16
	UserType   whereHelperint16
	Sign       whereHelpertypes_Decimal
	CreateTime whereHelpertime_Time
	UpdateTime whereHelpernull_Time
}{
	ID:         whereHelperint64{field: "`cmf_live_members`.`id`"},
	UID:        whereHelperint64{field: "`cmf_live_members`.`uid`"},
	Liveuid:    whereHelperint64{field: "`cmf_live_members`.`liveuid`"},
	Stream:     whereHelperstring{field: "`cmf_live_members`.`stream`"},
	Showid:     whereHelperint64{field: "`cmf_live_members`.`showid`"},
	Status:     whereHelperint16{field: "`cmf_live_members`.`status`"},
	UserType:   whereHelperint16{field: "`cmf_live_members`.`user_type`"},
	Sign:       whereHelpertypes_Decimal{field: "`cmf_live_members`.`sign`"},
	CreateTime: whereHelpertime_Time{field: "`cmf_live_members`.`create_time`"},
	UpdateTime: whereHelpernull_Time{field: "`cmf_live_members`.`update_time`"},
}

// CMFLiveMemberRels is where relationship names are stored.
var CMFLiveMemberRels = struct {
}{}

// cmfLiveMemberR is where relationships are stored.
type cmfLiveMemberR struct {
}

// NewStruct creates a new relationship struct
func (*cmfLiveMemberR) NewStruct() *cmfLiveMemberR {
	return &cmfLiveMemberR{}
}

// cmfLiveMemberL is where Load methods for each relationship are stored.
type cmfLiveMemberL struct{}

var (
	cmfLiveMemberAllColumns            = []string{"id", "uid", "liveuid", "stream", "showid", "status", "user_type", "sign", "create_time", "update_time"}
	cmfLiveMemberColumnsWithoutDefault = []string{"uid", "liveuid", "stream", "showid", "create_time", "update_time"}
	cmfLiveMemberColumnsWithDefault    = []string{"id", "status", "user_type", "sign"}
	cmfLiveMemberPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFLiveMemberSlice is an alias for a slice of pointers to CMFLiveMember.
	// This should generally be used opposed to []CMFLiveMember.
	CMFLiveMemberSlice []*CMFLiveMember
	// CMFLiveMemberHook is the signature for custom CMFLiveMember hook methods
	CMFLiveMemberHook func(context.Context, boil.ContextExecutor, *CMFLiveMember) error

	cmfLiveMemberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfLiveMemberType                 = reflect.TypeOf(&CMFLiveMember{})
	cmfLiveMemberMapping              = queries.MakeStructMapping(cmfLiveMemberType)
	cmfLiveMemberPrimaryKeyMapping, _ = queries.BindMapping(cmfLiveMemberType, cmfLiveMemberMapping, cmfLiveMemberPrimaryKeyColumns)
	cmfLiveMemberInsertCacheMut       sync.RWMutex
	cmfLiveMemberInsertCache          = make(map[string]insertCache)
	cmfLiveMemberUpdateCacheMut       sync.RWMutex
	cmfLiveMemberUpdateCache          = make(map[string]updateCache)
	cmfLiveMemberUpsertCacheMut       sync.RWMutex
	cmfLiveMemberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfLiveMemberBeforeInsertHooks []CMFLiveMemberHook
var cmfLiveMemberBeforeUpdateHooks []CMFLiveMemberHook
var cmfLiveMemberBeforeDeleteHooks []CMFLiveMemberHook
var cmfLiveMemberBeforeUpsertHooks []CMFLiveMemberHook

var cmfLiveMemberAfterInsertHooks []CMFLiveMemberHook
var cmfLiveMemberAfterSelectHooks []CMFLiveMemberHook
var cmfLiveMemberAfterUpdateHooks []CMFLiveMemberHook
var cmfLiveMemberAfterDeleteHooks []CMFLiveMemberHook
var cmfLiveMemberAfterUpsertHooks []CMFLiveMemberHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFLiveMember) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveMemberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFLiveMember) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveMemberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFLiveMember) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveMemberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFLiveMember) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveMemberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFLiveMember) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveMemberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFLiveMember) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveMemberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFLiveMember) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveMemberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFLiveMember) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveMemberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFLiveMember) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveMemberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFLiveMemberHook registers your hook function for all future operations.
func AddCMFLiveMemberHook(hookPoint boil.HookPoint, cmfLiveMemberHook CMFLiveMemberHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfLiveMemberBeforeInsertHooks = append(cmfLiveMemberBeforeInsertHooks, cmfLiveMemberHook)
	case boil.BeforeUpdateHook:
		cmfLiveMemberBeforeUpdateHooks = append(cmfLiveMemberBeforeUpdateHooks, cmfLiveMemberHook)
	case boil.BeforeDeleteHook:
		cmfLiveMemberBeforeDeleteHooks = append(cmfLiveMemberBeforeDeleteHooks, cmfLiveMemberHook)
	case boil.BeforeUpsertHook:
		cmfLiveMemberBeforeUpsertHooks = append(cmfLiveMemberBeforeUpsertHooks, cmfLiveMemberHook)
	case boil.AfterInsertHook:
		cmfLiveMemberAfterInsertHooks = append(cmfLiveMemberAfterInsertHooks, cmfLiveMemberHook)
	case boil.AfterSelectHook:
		cmfLiveMemberAfterSelectHooks = append(cmfLiveMemberAfterSelectHooks, cmfLiveMemberHook)
	case boil.AfterUpdateHook:
		cmfLiveMemberAfterUpdateHooks = append(cmfLiveMemberAfterUpdateHooks, cmfLiveMemberHook)
	case boil.AfterDeleteHook:
		cmfLiveMemberAfterDeleteHooks = append(cmfLiveMemberAfterDeleteHooks, cmfLiveMemberHook)
	case boil.AfterUpsertHook:
		cmfLiveMemberAfterUpsertHooks = append(cmfLiveMemberAfterUpsertHooks, cmfLiveMemberHook)
	}
}

// One returns a single cmfLiveMember record from the query.
func (q cmfLiveMemberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFLiveMember, error) {
	o := &CMFLiveMember{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_live_members")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFLiveMember records from the query.
func (q cmfLiveMemberQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFLiveMemberSlice, error) {
	var o []*CMFLiveMember

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFLiveMember slice")
	}

	if len(cmfLiveMemberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFLiveMember records in the query.
func (q cmfLiveMemberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_live_members rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfLiveMemberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_live_members exists")
	}

	return count > 0, nil
}

// CMFLiveMembers retrieves all the records using an executor.
func CMFLiveMembers(mods ...qm.QueryMod) cmfLiveMemberQuery {
	mods = append(mods, qm.From("`cmf_live_members`"))
	return cmfLiveMemberQuery{NewQuery(mods...)}
}

// FindCMFLiveMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFLiveMember(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFLiveMember, error) {
	cmfLiveMemberObj := &CMFLiveMember{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_live_members` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfLiveMemberObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_live_members")
	}

	return cmfLiveMemberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFLiveMember) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_live_members provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLiveMemberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfLiveMemberInsertCacheMut.RLock()
	cache, cached := cmfLiveMemberInsertCache[key]
	cmfLiveMemberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfLiveMemberAllColumns,
			cmfLiveMemberColumnsWithDefault,
			cmfLiveMemberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfLiveMemberType, cmfLiveMemberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfLiveMemberType, cmfLiveMemberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_live_members` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_live_members` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_live_members` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfLiveMemberPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_live_members")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfLiveMemberMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_live_members")
	}

CacheNoHooks:
	if !cached {
		cmfLiveMemberInsertCacheMut.Lock()
		cmfLiveMemberInsertCache[key] = cache
		cmfLiveMemberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFLiveMember.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFLiveMember) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfLiveMemberUpdateCacheMut.RLock()
	cache, cached := cmfLiveMemberUpdateCache[key]
	cmfLiveMemberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfLiveMemberAllColumns,
			cmfLiveMemberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_live_members, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_live_members` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfLiveMemberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfLiveMemberType, cmfLiveMemberMapping, append(wl, cmfLiveMemberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_live_members row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_live_members")
	}

	if !cached {
		cmfLiveMemberUpdateCacheMut.Lock()
		cmfLiveMemberUpdateCache[key] = cache
		cmfLiveMemberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfLiveMemberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_live_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_live_members")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFLiveMemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiveMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_live_members` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiveMemberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfLiveMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfLiveMember")
	}
	return rowsAff, nil
}

var mySQLCMFLiveMemberUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFLiveMember) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_live_members provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLiveMemberColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFLiveMemberUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfLiveMemberUpsertCacheMut.RLock()
	cache, cached := cmfLiveMemberUpsertCache[key]
	cmfLiveMemberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfLiveMemberAllColumns,
			cmfLiveMemberColumnsWithDefault,
			cmfLiveMemberColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfLiveMemberAllColumns,
			cmfLiveMemberPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_live_members, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_live_members`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_live_members` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfLiveMemberType, cmfLiveMemberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfLiveMemberType, cmfLiveMemberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_live_members")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfLiveMemberMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfLiveMemberType, cmfLiveMemberMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_live_members")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_live_members")
	}

CacheNoHooks:
	if !cached {
		cmfLiveMemberUpsertCacheMut.Lock()
		cmfLiveMemberUpsertCache[key] = cache
		cmfLiveMemberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFLiveMember record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFLiveMember) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFLiveMember provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfLiveMemberPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_live_members` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_live_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_live_members")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfLiveMemberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfLiveMemberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_live_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_live_members")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFLiveMemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfLiveMemberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiveMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_live_members` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiveMemberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfLiveMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_live_members")
	}

	if len(cmfLiveMemberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFLiveMember) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFLiveMember(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFLiveMemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFLiveMemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiveMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_live_members`.* FROM `cmf_live_members` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiveMemberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFLiveMemberSlice")
	}

	*o = slice

	return nil
}

// CMFLiveMemberExists checks if the CMFLiveMember row exists.
func CMFLiveMemberExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_live_members` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_live_members exists")
	}

	return exists, nil
}
