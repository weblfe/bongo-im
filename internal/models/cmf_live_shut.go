// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFLiveShut is an object representing the database table.
type CMFLiveShut struct {
	ID       uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID      uint   `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Liveuid  uint   `boil:"liveuid" json:"liveuid" toml:"liveuid" yaml:"liveuid"`
	Addtime  int    `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Showid   int64  `boil:"showid" json:"showid" toml:"showid" yaml:"showid"`
	Actionid int    `boil:"actionid" json:"actionid" toml:"actionid" yaml:"actionid"`

	R *cmfLiveShutR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfLiveShutL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFLiveShutColumns = struct {
	ID       string
	UID      string
	Liveuid  string
	Addtime  string
	Showid   string
	Actionid string
}{
	ID:       "id",
	UID:      "uid",
	Liveuid:  "liveuid",
	Addtime:  "addtime",
	Showid:   "showid",
	Actionid: "actionid",
}

// Generated where

var CMFLiveShutWhere = struct {
	ID       whereHelperuint64
	UID      whereHelperuint
	Liveuid  whereHelperuint
	Addtime  whereHelperint
	Showid   whereHelperint64
	Actionid whereHelperint
}{
	ID:       whereHelperuint64{field: "`cmf_live_shut`.`id`"},
	UID:      whereHelperuint{field: "`cmf_live_shut`.`uid`"},
	Liveuid:  whereHelperuint{field: "`cmf_live_shut`.`liveuid`"},
	Addtime:  whereHelperint{field: "`cmf_live_shut`.`addtime`"},
	Showid:   whereHelperint64{field: "`cmf_live_shut`.`showid`"},
	Actionid: whereHelperint{field: "`cmf_live_shut`.`actionid`"},
}

// CMFLiveShutRels is where relationship names are stored.
var CMFLiveShutRels = struct {
}{}

// cmfLiveShutR is where relationships are stored.
type cmfLiveShutR struct {
}

// NewStruct creates a new relationship struct
func (*cmfLiveShutR) NewStruct() *cmfLiveShutR {
	return &cmfLiveShutR{}
}

// cmfLiveShutL is where Load methods for each relationship are stored.
type cmfLiveShutL struct{}

var (
	cmfLiveShutAllColumns            = []string{"id", "uid", "liveuid", "addtime", "showid", "actionid"}
	cmfLiveShutColumnsWithoutDefault = []string{"showid"}
	cmfLiveShutColumnsWithDefault    = []string{"id", "uid", "liveuid", "addtime", "actionid"}
	cmfLiveShutPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFLiveShutSlice is an alias for a slice of pointers to CMFLiveShut.
	// This should generally be used opposed to []CMFLiveShut.
	CMFLiveShutSlice []*CMFLiveShut
	// CMFLiveShutHook is the signature for custom CMFLiveShut hook methods
	CMFLiveShutHook func(context.Context, boil.ContextExecutor, *CMFLiveShut) error

	cmfLiveShutQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfLiveShutType                 = reflect.TypeOf(&CMFLiveShut{})
	cmfLiveShutMapping              = queries.MakeStructMapping(cmfLiveShutType)
	cmfLiveShutPrimaryKeyMapping, _ = queries.BindMapping(cmfLiveShutType, cmfLiveShutMapping, cmfLiveShutPrimaryKeyColumns)
	cmfLiveShutInsertCacheMut       sync.RWMutex
	cmfLiveShutInsertCache          = make(map[string]insertCache)
	cmfLiveShutUpdateCacheMut       sync.RWMutex
	cmfLiveShutUpdateCache          = make(map[string]updateCache)
	cmfLiveShutUpsertCacheMut       sync.RWMutex
	cmfLiveShutUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfLiveShutBeforeInsertHooks []CMFLiveShutHook
var cmfLiveShutBeforeUpdateHooks []CMFLiveShutHook
var cmfLiveShutBeforeDeleteHooks []CMFLiveShutHook
var cmfLiveShutBeforeUpsertHooks []CMFLiveShutHook

var cmfLiveShutAfterInsertHooks []CMFLiveShutHook
var cmfLiveShutAfterSelectHooks []CMFLiveShutHook
var cmfLiveShutAfterUpdateHooks []CMFLiveShutHook
var cmfLiveShutAfterDeleteHooks []CMFLiveShutHook
var cmfLiveShutAfterUpsertHooks []CMFLiveShutHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFLiveShut) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveShutBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFLiveShut) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveShutBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFLiveShut) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveShutBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFLiveShut) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveShutBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFLiveShut) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveShutAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFLiveShut) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveShutAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFLiveShut) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveShutAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFLiveShut) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveShutAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFLiveShut) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfLiveShutAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFLiveShutHook registers your hook function for all future operations.
func AddCMFLiveShutHook(hookPoint boil.HookPoint, cmfLiveShutHook CMFLiveShutHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfLiveShutBeforeInsertHooks = append(cmfLiveShutBeforeInsertHooks, cmfLiveShutHook)
	case boil.BeforeUpdateHook:
		cmfLiveShutBeforeUpdateHooks = append(cmfLiveShutBeforeUpdateHooks, cmfLiveShutHook)
	case boil.BeforeDeleteHook:
		cmfLiveShutBeforeDeleteHooks = append(cmfLiveShutBeforeDeleteHooks, cmfLiveShutHook)
	case boil.BeforeUpsertHook:
		cmfLiveShutBeforeUpsertHooks = append(cmfLiveShutBeforeUpsertHooks, cmfLiveShutHook)
	case boil.AfterInsertHook:
		cmfLiveShutAfterInsertHooks = append(cmfLiveShutAfterInsertHooks, cmfLiveShutHook)
	case boil.AfterSelectHook:
		cmfLiveShutAfterSelectHooks = append(cmfLiveShutAfterSelectHooks, cmfLiveShutHook)
	case boil.AfterUpdateHook:
		cmfLiveShutAfterUpdateHooks = append(cmfLiveShutAfterUpdateHooks, cmfLiveShutHook)
	case boil.AfterDeleteHook:
		cmfLiveShutAfterDeleteHooks = append(cmfLiveShutAfterDeleteHooks, cmfLiveShutHook)
	case boil.AfterUpsertHook:
		cmfLiveShutAfterUpsertHooks = append(cmfLiveShutAfterUpsertHooks, cmfLiveShutHook)
	}
}

// One returns a single cmfLiveShut record from the query.
func (q cmfLiveShutQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFLiveShut, error) {
	o := &CMFLiveShut{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_live_shut")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFLiveShut records from the query.
func (q cmfLiveShutQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFLiveShutSlice, error) {
	var o []*CMFLiveShut

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFLiveShut slice")
	}

	if len(cmfLiveShutAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFLiveShut records in the query.
func (q cmfLiveShutQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_live_shut rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfLiveShutQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_live_shut exists")
	}

	return count > 0, nil
}

// CMFLiveShuts retrieves all the records using an executor.
func CMFLiveShuts(mods ...qm.QueryMod) cmfLiveShutQuery {
	mods = append(mods, qm.From("`cmf_live_shut`"))
	return cmfLiveShutQuery{NewQuery(mods...)}
}

// FindCMFLiveShut retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFLiveShut(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*CMFLiveShut, error) {
	cmfLiveShutObj := &CMFLiveShut{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_live_shut` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfLiveShutObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_live_shut")
	}

	return cmfLiveShutObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFLiveShut) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_live_shut provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLiveShutColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfLiveShutInsertCacheMut.RLock()
	cache, cached := cmfLiveShutInsertCache[key]
	cmfLiveShutInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfLiveShutAllColumns,
			cmfLiveShutColumnsWithDefault,
			cmfLiveShutColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfLiveShutType, cmfLiveShutMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfLiveShutType, cmfLiveShutMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_live_shut` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_live_shut` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_live_shut` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfLiveShutPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_live_shut")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfLiveShutMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_live_shut")
	}

CacheNoHooks:
	if !cached {
		cmfLiveShutInsertCacheMut.Lock()
		cmfLiveShutInsertCache[key] = cache
		cmfLiveShutInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFLiveShut.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFLiveShut) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfLiveShutUpdateCacheMut.RLock()
	cache, cached := cmfLiveShutUpdateCache[key]
	cmfLiveShutUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfLiveShutAllColumns,
			cmfLiveShutPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_live_shut, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_live_shut` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfLiveShutPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfLiveShutType, cmfLiveShutMapping, append(wl, cmfLiveShutPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_live_shut row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_live_shut")
	}

	if !cached {
		cmfLiveShutUpdateCacheMut.Lock()
		cmfLiveShutUpdateCache[key] = cache
		cmfLiveShutUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfLiveShutQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_live_shut")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_live_shut")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFLiveShutSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiveShutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_live_shut` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiveShutPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfLiveShut slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfLiveShut")
	}
	return rowsAff, nil
}

var mySQLCMFLiveShutUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFLiveShut) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_live_shut provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfLiveShutColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFLiveShutUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfLiveShutUpsertCacheMut.RLock()
	cache, cached := cmfLiveShutUpsertCache[key]
	cmfLiveShutUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfLiveShutAllColumns,
			cmfLiveShutColumnsWithDefault,
			cmfLiveShutColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfLiveShutAllColumns,
			cmfLiveShutPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_live_shut, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_live_shut`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_live_shut` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfLiveShutType, cmfLiveShutMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfLiveShutType, cmfLiveShutMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_live_shut")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfLiveShutMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfLiveShutType, cmfLiveShutMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_live_shut")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_live_shut")
	}

CacheNoHooks:
	if !cached {
		cmfLiveShutUpsertCacheMut.Lock()
		cmfLiveShutUpsertCache[key] = cache
		cmfLiveShutUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFLiveShut record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFLiveShut) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFLiveShut provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfLiveShutPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_live_shut` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_live_shut")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_live_shut")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfLiveShutQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfLiveShutQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_live_shut")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_live_shut")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFLiveShutSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfLiveShutBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiveShutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_live_shut` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiveShutPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfLiveShut slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_live_shut")
	}

	if len(cmfLiveShutAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFLiveShut) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFLiveShut(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFLiveShutSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFLiveShutSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfLiveShutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_live_shut`.* FROM `cmf_live_shut` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfLiveShutPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFLiveShutSlice")
	}

	*o = slice

	return nil
}

// CMFLiveShutExists checks if the CMFLiveShut row exists.
func CMFLiveShutExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_live_shut` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_live_shut exists")
	}

	return exists, nil
}
