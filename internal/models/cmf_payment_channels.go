// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFPaymentChannel is an object representing the database table.
type CMFPaymentChannel struct {
	ID           int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChannelName  string      `boil:"channel_name" json:"channel_name" toml:"channel_name" yaml:"channel_name"`
	Sort         int         `boil:"sort" json:"sort" toml:"sort" yaml:"sort"`
	ShowDiscount null.Int16  `boil:"show_discount" json:"show_discount,omitempty" toml:"show_discount" yaml:"show_discount,omitempty"`
	Extras       null.String `boil:"extras" json:"extras,omitempty" toml:"extras" yaml:"extras,omitempty"`
	Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Driver       string      `boil:"driver" json:"driver" toml:"driver" yaml:"driver"`
	Status       int16       `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreateTime   time.Time   `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime   null.Time   `boil:"update_time" json:"update_time,omitempty" toml:"update_time" yaml:"update_time,omitempty"`

	R *cmfPaymentChannelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfPaymentChannelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFPaymentChannelColumns = struct {
	ID           string
	ChannelName  string
	Sort         string
	ShowDiscount string
	Extras       string
	Name         string
	Driver       string
	Status       string
	CreateTime   string
	UpdateTime   string
}{
	ID:           "id",
	ChannelName:  "channel_name",
	Sort:         "sort",
	ShowDiscount: "show_discount",
	Extras:       "extras",
	Name:         "name",
	Driver:       "driver",
	Status:       "status",
	CreateTime:   "create_time",
	UpdateTime:   "update_time",
}

// Generated where

var CMFPaymentChannelWhere = struct {
	ID           whereHelperint64
	ChannelName  whereHelperstring
	Sort         whereHelperint
	ShowDiscount whereHelpernull_Int16
	Extras       whereHelpernull_String
	Name         whereHelperstring
	Driver       whereHelperstring
	Status       whereHelperint16
	CreateTime   whereHelpertime_Time
	UpdateTime   whereHelpernull_Time
}{
	ID:           whereHelperint64{field: "`cmf_payment_channels`.`id`"},
	ChannelName:  whereHelperstring{field: "`cmf_payment_channels`.`channel_name`"},
	Sort:         whereHelperint{field: "`cmf_payment_channels`.`sort`"},
	ShowDiscount: whereHelpernull_Int16{field: "`cmf_payment_channels`.`show_discount`"},
	Extras:       whereHelpernull_String{field: "`cmf_payment_channels`.`extras`"},
	Name:         whereHelperstring{field: "`cmf_payment_channels`.`name`"},
	Driver:       whereHelperstring{field: "`cmf_payment_channels`.`driver`"},
	Status:       whereHelperint16{field: "`cmf_payment_channels`.`status`"},
	CreateTime:   whereHelpertime_Time{field: "`cmf_payment_channels`.`create_time`"},
	UpdateTime:   whereHelpernull_Time{field: "`cmf_payment_channels`.`update_time`"},
}

// CMFPaymentChannelRels is where relationship names are stored.
var CMFPaymentChannelRels = struct {
}{}

// cmfPaymentChannelR is where relationships are stored.
type cmfPaymentChannelR struct {
}

// NewStruct creates a new relationship struct
func (*cmfPaymentChannelR) NewStruct() *cmfPaymentChannelR {
	return &cmfPaymentChannelR{}
}

// cmfPaymentChannelL is where Load methods for each relationship are stored.
type cmfPaymentChannelL struct{}

var (
	cmfPaymentChannelAllColumns            = []string{"id", "channel_name", "sort", "show_discount", "extras", "name", "driver", "status", "create_time", "update_time"}
	cmfPaymentChannelColumnsWithoutDefault = []string{"channel_name", "show_discount", "extras", "name", "create_time", "update_time"}
	cmfPaymentChannelColumnsWithDefault    = []string{"id", "sort", "driver", "status"}
	cmfPaymentChannelPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFPaymentChannelSlice is an alias for a slice of pointers to CMFPaymentChannel.
	// This should generally be used opposed to []CMFPaymentChannel.
	CMFPaymentChannelSlice []*CMFPaymentChannel
	// CMFPaymentChannelHook is the signature for custom CMFPaymentChannel hook methods
	CMFPaymentChannelHook func(context.Context, boil.ContextExecutor, *CMFPaymentChannel) error

	cmfPaymentChannelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfPaymentChannelType                 = reflect.TypeOf(&CMFPaymentChannel{})
	cmfPaymentChannelMapping              = queries.MakeStructMapping(cmfPaymentChannelType)
	cmfPaymentChannelPrimaryKeyMapping, _ = queries.BindMapping(cmfPaymentChannelType, cmfPaymentChannelMapping, cmfPaymentChannelPrimaryKeyColumns)
	cmfPaymentChannelInsertCacheMut       sync.RWMutex
	cmfPaymentChannelInsertCache          = make(map[string]insertCache)
	cmfPaymentChannelUpdateCacheMut       sync.RWMutex
	cmfPaymentChannelUpdateCache          = make(map[string]updateCache)
	cmfPaymentChannelUpsertCacheMut       sync.RWMutex
	cmfPaymentChannelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfPaymentChannelBeforeInsertHooks []CMFPaymentChannelHook
var cmfPaymentChannelBeforeUpdateHooks []CMFPaymentChannelHook
var cmfPaymentChannelBeforeDeleteHooks []CMFPaymentChannelHook
var cmfPaymentChannelBeforeUpsertHooks []CMFPaymentChannelHook

var cmfPaymentChannelAfterInsertHooks []CMFPaymentChannelHook
var cmfPaymentChannelAfterSelectHooks []CMFPaymentChannelHook
var cmfPaymentChannelAfterUpdateHooks []CMFPaymentChannelHook
var cmfPaymentChannelAfterDeleteHooks []CMFPaymentChannelHook
var cmfPaymentChannelAfterUpsertHooks []CMFPaymentChannelHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFPaymentChannel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPaymentChannelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFPaymentChannel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPaymentChannelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFPaymentChannel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPaymentChannelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFPaymentChannel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPaymentChannelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFPaymentChannel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPaymentChannelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFPaymentChannel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPaymentChannelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFPaymentChannel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPaymentChannelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFPaymentChannel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPaymentChannelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFPaymentChannel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPaymentChannelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFPaymentChannelHook registers your hook function for all future operations.
func AddCMFPaymentChannelHook(hookPoint boil.HookPoint, cmfPaymentChannelHook CMFPaymentChannelHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfPaymentChannelBeforeInsertHooks = append(cmfPaymentChannelBeforeInsertHooks, cmfPaymentChannelHook)
	case boil.BeforeUpdateHook:
		cmfPaymentChannelBeforeUpdateHooks = append(cmfPaymentChannelBeforeUpdateHooks, cmfPaymentChannelHook)
	case boil.BeforeDeleteHook:
		cmfPaymentChannelBeforeDeleteHooks = append(cmfPaymentChannelBeforeDeleteHooks, cmfPaymentChannelHook)
	case boil.BeforeUpsertHook:
		cmfPaymentChannelBeforeUpsertHooks = append(cmfPaymentChannelBeforeUpsertHooks, cmfPaymentChannelHook)
	case boil.AfterInsertHook:
		cmfPaymentChannelAfterInsertHooks = append(cmfPaymentChannelAfterInsertHooks, cmfPaymentChannelHook)
	case boil.AfterSelectHook:
		cmfPaymentChannelAfterSelectHooks = append(cmfPaymentChannelAfterSelectHooks, cmfPaymentChannelHook)
	case boil.AfterUpdateHook:
		cmfPaymentChannelAfterUpdateHooks = append(cmfPaymentChannelAfterUpdateHooks, cmfPaymentChannelHook)
	case boil.AfterDeleteHook:
		cmfPaymentChannelAfterDeleteHooks = append(cmfPaymentChannelAfterDeleteHooks, cmfPaymentChannelHook)
	case boil.AfterUpsertHook:
		cmfPaymentChannelAfterUpsertHooks = append(cmfPaymentChannelAfterUpsertHooks, cmfPaymentChannelHook)
	}
}

// One returns a single cmfPaymentChannel record from the query.
func (q cmfPaymentChannelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFPaymentChannel, error) {
	o := &CMFPaymentChannel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_payment_channels")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFPaymentChannel records from the query.
func (q cmfPaymentChannelQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFPaymentChannelSlice, error) {
	var o []*CMFPaymentChannel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFPaymentChannel slice")
	}

	if len(cmfPaymentChannelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFPaymentChannel records in the query.
func (q cmfPaymentChannelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_payment_channels rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfPaymentChannelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_payment_channels exists")
	}

	return count > 0, nil
}

// CMFPaymentChannels retrieves all the records using an executor.
func CMFPaymentChannels(mods ...qm.QueryMod) cmfPaymentChannelQuery {
	mods = append(mods, qm.From("`cmf_payment_channels`"))
	return cmfPaymentChannelQuery{NewQuery(mods...)}
}

// FindCMFPaymentChannel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFPaymentChannel(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFPaymentChannel, error) {
	cmfPaymentChannelObj := &CMFPaymentChannel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_payment_channels` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfPaymentChannelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_payment_channels")
	}

	return cmfPaymentChannelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFPaymentChannel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_payment_channels provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPaymentChannelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfPaymentChannelInsertCacheMut.RLock()
	cache, cached := cmfPaymentChannelInsertCache[key]
	cmfPaymentChannelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfPaymentChannelAllColumns,
			cmfPaymentChannelColumnsWithDefault,
			cmfPaymentChannelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfPaymentChannelType, cmfPaymentChannelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfPaymentChannelType, cmfPaymentChannelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_payment_channels` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_payment_channels` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_payment_channels` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfPaymentChannelPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_payment_channels")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPaymentChannelMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_payment_channels")
	}

CacheNoHooks:
	if !cached {
		cmfPaymentChannelInsertCacheMut.Lock()
		cmfPaymentChannelInsertCache[key] = cache
		cmfPaymentChannelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFPaymentChannel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFPaymentChannel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfPaymentChannelUpdateCacheMut.RLock()
	cache, cached := cmfPaymentChannelUpdateCache[key]
	cmfPaymentChannelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfPaymentChannelAllColumns,
			cmfPaymentChannelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_payment_channels, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_payment_channels` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfPaymentChannelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfPaymentChannelType, cmfPaymentChannelMapping, append(wl, cmfPaymentChannelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_payment_channels row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_payment_channels")
	}

	if !cached {
		cmfPaymentChannelUpdateCacheMut.Lock()
		cmfPaymentChannelUpdateCache[key] = cache
		cmfPaymentChannelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfPaymentChannelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_payment_channels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_payment_channels")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFPaymentChannelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPaymentChannelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_payment_channels` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPaymentChannelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfPaymentChannel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfPaymentChannel")
	}
	return rowsAff, nil
}

var mySQLCMFPaymentChannelUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFPaymentChannel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_payment_channels provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPaymentChannelColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFPaymentChannelUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfPaymentChannelUpsertCacheMut.RLock()
	cache, cached := cmfPaymentChannelUpsertCache[key]
	cmfPaymentChannelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfPaymentChannelAllColumns,
			cmfPaymentChannelColumnsWithDefault,
			cmfPaymentChannelColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfPaymentChannelAllColumns,
			cmfPaymentChannelPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_payment_channels, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_payment_channels`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_payment_channels` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfPaymentChannelType, cmfPaymentChannelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfPaymentChannelType, cmfPaymentChannelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_payment_channels")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPaymentChannelMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfPaymentChannelType, cmfPaymentChannelMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_payment_channels")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_payment_channels")
	}

CacheNoHooks:
	if !cached {
		cmfPaymentChannelUpsertCacheMut.Lock()
		cmfPaymentChannelUpsertCache[key] = cache
		cmfPaymentChannelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFPaymentChannel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFPaymentChannel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFPaymentChannel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfPaymentChannelPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_payment_channels` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_payment_channels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_payment_channels")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfPaymentChannelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfPaymentChannelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_payment_channels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_payment_channels")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFPaymentChannelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfPaymentChannelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPaymentChannelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_payment_channels` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPaymentChannelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfPaymentChannel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_payment_channels")
	}

	if len(cmfPaymentChannelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFPaymentChannel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFPaymentChannel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFPaymentChannelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFPaymentChannelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPaymentChannelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_payment_channels`.* FROM `cmf_payment_channels` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPaymentChannelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFPaymentChannelSlice")
	}

	*o = slice

	return nil
}

// CMFPaymentChannelExists checks if the CMFPaymentChannel row exists.
func CMFPaymentChannelExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_payment_channels` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_payment_channels exists")
	}

	return exists, nil
}
