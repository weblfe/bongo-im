// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFPortalCategory is an object representing the database table.
type CMFPortalCategory struct {
	ID             uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ParentID       uint64      `boil:"parent_id" json:"parent_id" toml:"parent_id" yaml:"parent_id"`
	PostCount      uint64      `boil:"post_count" json:"post_count" toml:"post_count" yaml:"post_count"`
	Status         uint8       `boil:"status" json:"status" toml:"status" yaml:"status"`
	DeleteTime     uint        `boil:"delete_time" json:"delete_time" toml:"delete_time" yaml:"delete_time"`
	ListOrder      float32     `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`
	Name           string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description    string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	Path           string      `boil:"path" json:"path" toml:"path" yaml:"path"`
	SeoTitle       string      `boil:"seo_title" json:"seo_title" toml:"seo_title" yaml:"seo_title"`
	SeoKeywords    string      `boil:"seo_keywords" json:"seo_keywords" toml:"seo_keywords" yaml:"seo_keywords"`
	SeoDescription string      `boil:"seo_description" json:"seo_description" toml:"seo_description" yaml:"seo_description"`
	ListTPL        string      `boil:"list_tpl" json:"list_tpl" toml:"list_tpl" yaml:"list_tpl"`
	OneTPL         string      `boil:"one_tpl" json:"one_tpl" toml:"one_tpl" yaml:"one_tpl"`
	More           null.String `boil:"more" json:"more,omitempty" toml:"more" yaml:"more,omitempty"`

	R *cmfPortalCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfPortalCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFPortalCategoryColumns = struct {
	ID             string
	ParentID       string
	PostCount      string
	Status         string
	DeleteTime     string
	ListOrder      string
	Name           string
	Description    string
	Path           string
	SeoTitle       string
	SeoKeywords    string
	SeoDescription string
	ListTPL        string
	OneTPL         string
	More           string
}{
	ID:             "id",
	ParentID:       "parent_id",
	PostCount:      "post_count",
	Status:         "status",
	DeleteTime:     "delete_time",
	ListOrder:      "list_order",
	Name:           "name",
	Description:    "description",
	Path:           "path",
	SeoTitle:       "seo_title",
	SeoKeywords:    "seo_keywords",
	SeoDescription: "seo_description",
	ListTPL:        "list_tpl",
	OneTPL:         "one_tpl",
	More:           "more",
}

// Generated where

var CMFPortalCategoryWhere = struct {
	ID             whereHelperuint64
	ParentID       whereHelperuint64
	PostCount      whereHelperuint64
	Status         whereHelperuint8
	DeleteTime     whereHelperuint
	ListOrder      whereHelperfloat32
	Name           whereHelperstring
	Description    whereHelperstring
	Path           whereHelperstring
	SeoTitle       whereHelperstring
	SeoKeywords    whereHelperstring
	SeoDescription whereHelperstring
	ListTPL        whereHelperstring
	OneTPL         whereHelperstring
	More           whereHelpernull_String
}{
	ID:             whereHelperuint64{field: "`cmf_portal_category`.`id`"},
	ParentID:       whereHelperuint64{field: "`cmf_portal_category`.`parent_id`"},
	PostCount:      whereHelperuint64{field: "`cmf_portal_category`.`post_count`"},
	Status:         whereHelperuint8{field: "`cmf_portal_category`.`status`"},
	DeleteTime:     whereHelperuint{field: "`cmf_portal_category`.`delete_time`"},
	ListOrder:      whereHelperfloat32{field: "`cmf_portal_category`.`list_order`"},
	Name:           whereHelperstring{field: "`cmf_portal_category`.`name`"},
	Description:    whereHelperstring{field: "`cmf_portal_category`.`description`"},
	Path:           whereHelperstring{field: "`cmf_portal_category`.`path`"},
	SeoTitle:       whereHelperstring{field: "`cmf_portal_category`.`seo_title`"},
	SeoKeywords:    whereHelperstring{field: "`cmf_portal_category`.`seo_keywords`"},
	SeoDescription: whereHelperstring{field: "`cmf_portal_category`.`seo_description`"},
	ListTPL:        whereHelperstring{field: "`cmf_portal_category`.`list_tpl`"},
	OneTPL:         whereHelperstring{field: "`cmf_portal_category`.`one_tpl`"},
	More:           whereHelpernull_String{field: "`cmf_portal_category`.`more`"},
}

// CMFPortalCategoryRels is where relationship names are stored.
var CMFPortalCategoryRels = struct {
}{}

// cmfPortalCategoryR is where relationships are stored.
type cmfPortalCategoryR struct {
}

// NewStruct creates a new relationship struct
func (*cmfPortalCategoryR) NewStruct() *cmfPortalCategoryR {
	return &cmfPortalCategoryR{}
}

// cmfPortalCategoryL is where Load methods for each relationship are stored.
type cmfPortalCategoryL struct{}

var (
	cmfPortalCategoryAllColumns            = []string{"id", "parent_id", "post_count", "status", "delete_time", "list_order", "name", "description", "path", "seo_title", "seo_keywords", "seo_description", "list_tpl", "one_tpl", "more"}
	cmfPortalCategoryColumnsWithoutDefault = []string{"name", "description", "path", "seo_title", "seo_keywords", "seo_description", "list_tpl", "one_tpl", "more"}
	cmfPortalCategoryColumnsWithDefault    = []string{"id", "parent_id", "post_count", "status", "delete_time", "list_order"}
	cmfPortalCategoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFPortalCategorySlice is an alias for a slice of pointers to CMFPortalCategory.
	// This should generally be used opposed to []CMFPortalCategory.
	CMFPortalCategorySlice []*CMFPortalCategory
	// CMFPortalCategoryHook is the signature for custom CMFPortalCategory hook methods
	CMFPortalCategoryHook func(context.Context, boil.ContextExecutor, *CMFPortalCategory) error

	cmfPortalCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfPortalCategoryType                 = reflect.TypeOf(&CMFPortalCategory{})
	cmfPortalCategoryMapping              = queries.MakeStructMapping(cmfPortalCategoryType)
	cmfPortalCategoryPrimaryKeyMapping, _ = queries.BindMapping(cmfPortalCategoryType, cmfPortalCategoryMapping, cmfPortalCategoryPrimaryKeyColumns)
	cmfPortalCategoryInsertCacheMut       sync.RWMutex
	cmfPortalCategoryInsertCache          = make(map[string]insertCache)
	cmfPortalCategoryUpdateCacheMut       sync.RWMutex
	cmfPortalCategoryUpdateCache          = make(map[string]updateCache)
	cmfPortalCategoryUpsertCacheMut       sync.RWMutex
	cmfPortalCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfPortalCategoryBeforeInsertHooks []CMFPortalCategoryHook
var cmfPortalCategoryBeforeUpdateHooks []CMFPortalCategoryHook
var cmfPortalCategoryBeforeDeleteHooks []CMFPortalCategoryHook
var cmfPortalCategoryBeforeUpsertHooks []CMFPortalCategoryHook

var cmfPortalCategoryAfterInsertHooks []CMFPortalCategoryHook
var cmfPortalCategoryAfterSelectHooks []CMFPortalCategoryHook
var cmfPortalCategoryAfterUpdateHooks []CMFPortalCategoryHook
var cmfPortalCategoryAfterDeleteHooks []CMFPortalCategoryHook
var cmfPortalCategoryAfterUpsertHooks []CMFPortalCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFPortalCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFPortalCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFPortalCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFPortalCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFPortalCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFPortalCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFPortalCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFPortalCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFPortalCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFPortalCategoryHook registers your hook function for all future operations.
func AddCMFPortalCategoryHook(hookPoint boil.HookPoint, cmfPortalCategoryHook CMFPortalCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfPortalCategoryBeforeInsertHooks = append(cmfPortalCategoryBeforeInsertHooks, cmfPortalCategoryHook)
	case boil.BeforeUpdateHook:
		cmfPortalCategoryBeforeUpdateHooks = append(cmfPortalCategoryBeforeUpdateHooks, cmfPortalCategoryHook)
	case boil.BeforeDeleteHook:
		cmfPortalCategoryBeforeDeleteHooks = append(cmfPortalCategoryBeforeDeleteHooks, cmfPortalCategoryHook)
	case boil.BeforeUpsertHook:
		cmfPortalCategoryBeforeUpsertHooks = append(cmfPortalCategoryBeforeUpsertHooks, cmfPortalCategoryHook)
	case boil.AfterInsertHook:
		cmfPortalCategoryAfterInsertHooks = append(cmfPortalCategoryAfterInsertHooks, cmfPortalCategoryHook)
	case boil.AfterSelectHook:
		cmfPortalCategoryAfterSelectHooks = append(cmfPortalCategoryAfterSelectHooks, cmfPortalCategoryHook)
	case boil.AfterUpdateHook:
		cmfPortalCategoryAfterUpdateHooks = append(cmfPortalCategoryAfterUpdateHooks, cmfPortalCategoryHook)
	case boil.AfterDeleteHook:
		cmfPortalCategoryAfterDeleteHooks = append(cmfPortalCategoryAfterDeleteHooks, cmfPortalCategoryHook)
	case boil.AfterUpsertHook:
		cmfPortalCategoryAfterUpsertHooks = append(cmfPortalCategoryAfterUpsertHooks, cmfPortalCategoryHook)
	}
}

// One returns a single cmfPortalCategory record from the query.
func (q cmfPortalCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFPortalCategory, error) {
	o := &CMFPortalCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_portal_category")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFPortalCategory records from the query.
func (q cmfPortalCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFPortalCategorySlice, error) {
	var o []*CMFPortalCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFPortalCategory slice")
	}

	if len(cmfPortalCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFPortalCategory records in the query.
func (q cmfPortalCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_portal_category rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfPortalCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_portal_category exists")
	}

	return count > 0, nil
}

// CMFPortalCategories retrieves all the records using an executor.
func CMFPortalCategories(mods ...qm.QueryMod) cmfPortalCategoryQuery {
	mods = append(mods, qm.From("`cmf_portal_category`"))
	return cmfPortalCategoryQuery{NewQuery(mods...)}
}

// FindCMFPortalCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFPortalCategory(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*CMFPortalCategory, error) {
	cmfPortalCategoryObj := &CMFPortalCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_portal_category` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfPortalCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_portal_category")
	}

	return cmfPortalCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFPortalCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_portal_category provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPortalCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfPortalCategoryInsertCacheMut.RLock()
	cache, cached := cmfPortalCategoryInsertCache[key]
	cmfPortalCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfPortalCategoryAllColumns,
			cmfPortalCategoryColumnsWithDefault,
			cmfPortalCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfPortalCategoryType, cmfPortalCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfPortalCategoryType, cmfPortalCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_portal_category` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_portal_category` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_portal_category` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfPortalCategoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_portal_category")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPortalCategoryMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_portal_category")
	}

CacheNoHooks:
	if !cached {
		cmfPortalCategoryInsertCacheMut.Lock()
		cmfPortalCategoryInsertCache[key] = cache
		cmfPortalCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFPortalCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFPortalCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfPortalCategoryUpdateCacheMut.RLock()
	cache, cached := cmfPortalCategoryUpdateCache[key]
	cmfPortalCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfPortalCategoryAllColumns,
			cmfPortalCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_portal_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_portal_category` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfPortalCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfPortalCategoryType, cmfPortalCategoryMapping, append(wl, cmfPortalCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_portal_category row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_portal_category")
	}

	if !cached {
		cmfPortalCategoryUpdateCacheMut.Lock()
		cmfPortalCategoryUpdateCache[key] = cache
		cmfPortalCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfPortalCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_portal_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_portal_category")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFPortalCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_portal_category` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfPortalCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfPortalCategory")
	}
	return rowsAff, nil
}

var mySQLCMFPortalCategoryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFPortalCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_portal_category provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPortalCategoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFPortalCategoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfPortalCategoryUpsertCacheMut.RLock()
	cache, cached := cmfPortalCategoryUpsertCache[key]
	cmfPortalCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfPortalCategoryAllColumns,
			cmfPortalCategoryColumnsWithDefault,
			cmfPortalCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfPortalCategoryAllColumns,
			cmfPortalCategoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_portal_category, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_portal_category`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_portal_category` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfPortalCategoryType, cmfPortalCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfPortalCategoryType, cmfPortalCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_portal_category")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPortalCategoryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfPortalCategoryType, cmfPortalCategoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_portal_category")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_portal_category")
	}

CacheNoHooks:
	if !cached {
		cmfPortalCategoryUpsertCacheMut.Lock()
		cmfPortalCategoryUpsertCache[key] = cache
		cmfPortalCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFPortalCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFPortalCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFPortalCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfPortalCategoryPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_portal_category` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_portal_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_portal_category")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfPortalCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfPortalCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_portal_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_portal_category")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFPortalCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfPortalCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_portal_category` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfPortalCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_portal_category")
	}

	if len(cmfPortalCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFPortalCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFPortalCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFPortalCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFPortalCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_portal_category`.* FROM `cmf_portal_category` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFPortalCategorySlice")
	}

	*o = slice

	return nil
}

// CMFPortalCategoryExists checks if the CMFPortalCategory row exists.
func CMFPortalCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_portal_category` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_portal_category exists")
	}

	return exists, nil
}
