// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFPortalCategoryPost is an object representing the database table.
type CMFPortalCategoryPost struct {
	ID         uint64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	PostID     uint64  `boil:"post_id" json:"post_id" toml:"post_id" yaml:"post_id"`
	CategoryID uint64  `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	ListOrder  float32 `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`
	Status     uint8   `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *cmfPortalCategoryPostR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfPortalCategoryPostL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFPortalCategoryPostColumns = struct {
	ID         string
	PostID     string
	CategoryID string
	ListOrder  string
	Status     string
}{
	ID:         "id",
	PostID:     "post_id",
	CategoryID: "category_id",
	ListOrder:  "list_order",
	Status:     "status",
}

// Generated where

var CMFPortalCategoryPostWhere = struct {
	ID         whereHelperuint64
	PostID     whereHelperuint64
	CategoryID whereHelperuint64
	ListOrder  whereHelperfloat32
	Status     whereHelperuint8
}{
	ID:         whereHelperuint64{field: "`cmf_portal_category_post`.`id`"},
	PostID:     whereHelperuint64{field: "`cmf_portal_category_post`.`post_id`"},
	CategoryID: whereHelperuint64{field: "`cmf_portal_category_post`.`category_id`"},
	ListOrder:  whereHelperfloat32{field: "`cmf_portal_category_post`.`list_order`"},
	Status:     whereHelperuint8{field: "`cmf_portal_category_post`.`status`"},
}

// CMFPortalCategoryPostRels is where relationship names are stored.
var CMFPortalCategoryPostRels = struct {
}{}

// cmfPortalCategoryPostR is where relationships are stored.
type cmfPortalCategoryPostR struct {
}

// NewStruct creates a new relationship struct
func (*cmfPortalCategoryPostR) NewStruct() *cmfPortalCategoryPostR {
	return &cmfPortalCategoryPostR{}
}

// cmfPortalCategoryPostL is where Load methods for each relationship are stored.
type cmfPortalCategoryPostL struct{}

var (
	cmfPortalCategoryPostAllColumns            = []string{"id", "post_id", "category_id", "list_order", "status"}
	cmfPortalCategoryPostColumnsWithoutDefault = []string{}
	cmfPortalCategoryPostColumnsWithDefault    = []string{"id", "post_id", "category_id", "list_order", "status"}
	cmfPortalCategoryPostPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFPortalCategoryPostSlice is an alias for a slice of pointers to CMFPortalCategoryPost.
	// This should generally be used opposed to []CMFPortalCategoryPost.
	CMFPortalCategoryPostSlice []*CMFPortalCategoryPost
	// CMFPortalCategoryPostHook is the signature for custom CMFPortalCategoryPost hook methods
	CMFPortalCategoryPostHook func(context.Context, boil.ContextExecutor, *CMFPortalCategoryPost) error

	cmfPortalCategoryPostQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfPortalCategoryPostType                 = reflect.TypeOf(&CMFPortalCategoryPost{})
	cmfPortalCategoryPostMapping              = queries.MakeStructMapping(cmfPortalCategoryPostType)
	cmfPortalCategoryPostPrimaryKeyMapping, _ = queries.BindMapping(cmfPortalCategoryPostType, cmfPortalCategoryPostMapping, cmfPortalCategoryPostPrimaryKeyColumns)
	cmfPortalCategoryPostInsertCacheMut       sync.RWMutex
	cmfPortalCategoryPostInsertCache          = make(map[string]insertCache)
	cmfPortalCategoryPostUpdateCacheMut       sync.RWMutex
	cmfPortalCategoryPostUpdateCache          = make(map[string]updateCache)
	cmfPortalCategoryPostUpsertCacheMut       sync.RWMutex
	cmfPortalCategoryPostUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfPortalCategoryPostBeforeInsertHooks []CMFPortalCategoryPostHook
var cmfPortalCategoryPostBeforeUpdateHooks []CMFPortalCategoryPostHook
var cmfPortalCategoryPostBeforeDeleteHooks []CMFPortalCategoryPostHook
var cmfPortalCategoryPostBeforeUpsertHooks []CMFPortalCategoryPostHook

var cmfPortalCategoryPostAfterInsertHooks []CMFPortalCategoryPostHook
var cmfPortalCategoryPostAfterSelectHooks []CMFPortalCategoryPostHook
var cmfPortalCategoryPostAfterUpdateHooks []CMFPortalCategoryPostHook
var cmfPortalCategoryPostAfterDeleteHooks []CMFPortalCategoryPostHook
var cmfPortalCategoryPostAfterUpsertHooks []CMFPortalCategoryPostHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFPortalCategoryPost) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryPostBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFPortalCategoryPost) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryPostBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFPortalCategoryPost) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryPostBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFPortalCategoryPost) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryPostBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFPortalCategoryPost) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryPostAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFPortalCategoryPost) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryPostAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFPortalCategoryPost) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryPostAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFPortalCategoryPost) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryPostAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFPortalCategoryPost) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalCategoryPostAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFPortalCategoryPostHook registers your hook function for all future operations.
func AddCMFPortalCategoryPostHook(hookPoint boil.HookPoint, cmfPortalCategoryPostHook CMFPortalCategoryPostHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfPortalCategoryPostBeforeInsertHooks = append(cmfPortalCategoryPostBeforeInsertHooks, cmfPortalCategoryPostHook)
	case boil.BeforeUpdateHook:
		cmfPortalCategoryPostBeforeUpdateHooks = append(cmfPortalCategoryPostBeforeUpdateHooks, cmfPortalCategoryPostHook)
	case boil.BeforeDeleteHook:
		cmfPortalCategoryPostBeforeDeleteHooks = append(cmfPortalCategoryPostBeforeDeleteHooks, cmfPortalCategoryPostHook)
	case boil.BeforeUpsertHook:
		cmfPortalCategoryPostBeforeUpsertHooks = append(cmfPortalCategoryPostBeforeUpsertHooks, cmfPortalCategoryPostHook)
	case boil.AfterInsertHook:
		cmfPortalCategoryPostAfterInsertHooks = append(cmfPortalCategoryPostAfterInsertHooks, cmfPortalCategoryPostHook)
	case boil.AfterSelectHook:
		cmfPortalCategoryPostAfterSelectHooks = append(cmfPortalCategoryPostAfterSelectHooks, cmfPortalCategoryPostHook)
	case boil.AfterUpdateHook:
		cmfPortalCategoryPostAfterUpdateHooks = append(cmfPortalCategoryPostAfterUpdateHooks, cmfPortalCategoryPostHook)
	case boil.AfterDeleteHook:
		cmfPortalCategoryPostAfterDeleteHooks = append(cmfPortalCategoryPostAfterDeleteHooks, cmfPortalCategoryPostHook)
	case boil.AfterUpsertHook:
		cmfPortalCategoryPostAfterUpsertHooks = append(cmfPortalCategoryPostAfterUpsertHooks, cmfPortalCategoryPostHook)
	}
}

// One returns a single cmfPortalCategoryPost record from the query.
func (q cmfPortalCategoryPostQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFPortalCategoryPost, error) {
	o := &CMFPortalCategoryPost{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_portal_category_post")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFPortalCategoryPost records from the query.
func (q cmfPortalCategoryPostQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFPortalCategoryPostSlice, error) {
	var o []*CMFPortalCategoryPost

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFPortalCategoryPost slice")
	}

	if len(cmfPortalCategoryPostAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFPortalCategoryPost records in the query.
func (q cmfPortalCategoryPostQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_portal_category_post rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfPortalCategoryPostQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_portal_category_post exists")
	}

	return count > 0, nil
}

// CMFPortalCategoryPosts retrieves all the records using an executor.
func CMFPortalCategoryPosts(mods ...qm.QueryMod) cmfPortalCategoryPostQuery {
	mods = append(mods, qm.From("`cmf_portal_category_post`"))
	return cmfPortalCategoryPostQuery{NewQuery(mods...)}
}

// FindCMFPortalCategoryPost retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFPortalCategoryPost(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*CMFPortalCategoryPost, error) {
	cmfPortalCategoryPostObj := &CMFPortalCategoryPost{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_portal_category_post` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfPortalCategoryPostObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_portal_category_post")
	}

	return cmfPortalCategoryPostObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFPortalCategoryPost) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_portal_category_post provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPortalCategoryPostColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfPortalCategoryPostInsertCacheMut.RLock()
	cache, cached := cmfPortalCategoryPostInsertCache[key]
	cmfPortalCategoryPostInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfPortalCategoryPostAllColumns,
			cmfPortalCategoryPostColumnsWithDefault,
			cmfPortalCategoryPostColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfPortalCategoryPostType, cmfPortalCategoryPostMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfPortalCategoryPostType, cmfPortalCategoryPostMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_portal_category_post` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_portal_category_post` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_portal_category_post` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfPortalCategoryPostPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_portal_category_post")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPortalCategoryPostMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_portal_category_post")
	}

CacheNoHooks:
	if !cached {
		cmfPortalCategoryPostInsertCacheMut.Lock()
		cmfPortalCategoryPostInsertCache[key] = cache
		cmfPortalCategoryPostInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFPortalCategoryPost.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFPortalCategoryPost) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfPortalCategoryPostUpdateCacheMut.RLock()
	cache, cached := cmfPortalCategoryPostUpdateCache[key]
	cmfPortalCategoryPostUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfPortalCategoryPostAllColumns,
			cmfPortalCategoryPostPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_portal_category_post, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_portal_category_post` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfPortalCategoryPostPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfPortalCategoryPostType, cmfPortalCategoryPostMapping, append(wl, cmfPortalCategoryPostPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_portal_category_post row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_portal_category_post")
	}

	if !cached {
		cmfPortalCategoryPostUpdateCacheMut.Lock()
		cmfPortalCategoryPostUpdateCache[key] = cache
		cmfPortalCategoryPostUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfPortalCategoryPostQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_portal_category_post")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_portal_category_post")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFPortalCategoryPostSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalCategoryPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_portal_category_post` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalCategoryPostPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfPortalCategoryPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfPortalCategoryPost")
	}
	return rowsAff, nil
}

var mySQLCMFPortalCategoryPostUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFPortalCategoryPost) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_portal_category_post provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPortalCategoryPostColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFPortalCategoryPostUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfPortalCategoryPostUpsertCacheMut.RLock()
	cache, cached := cmfPortalCategoryPostUpsertCache[key]
	cmfPortalCategoryPostUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfPortalCategoryPostAllColumns,
			cmfPortalCategoryPostColumnsWithDefault,
			cmfPortalCategoryPostColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfPortalCategoryPostAllColumns,
			cmfPortalCategoryPostPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_portal_category_post, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_portal_category_post`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_portal_category_post` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfPortalCategoryPostType, cmfPortalCategoryPostMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfPortalCategoryPostType, cmfPortalCategoryPostMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_portal_category_post")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPortalCategoryPostMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfPortalCategoryPostType, cmfPortalCategoryPostMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_portal_category_post")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_portal_category_post")
	}

CacheNoHooks:
	if !cached {
		cmfPortalCategoryPostUpsertCacheMut.Lock()
		cmfPortalCategoryPostUpsertCache[key] = cache
		cmfPortalCategoryPostUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFPortalCategoryPost record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFPortalCategoryPost) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFPortalCategoryPost provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfPortalCategoryPostPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_portal_category_post` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_portal_category_post")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_portal_category_post")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfPortalCategoryPostQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfPortalCategoryPostQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_portal_category_post")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_portal_category_post")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFPortalCategoryPostSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfPortalCategoryPostBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalCategoryPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_portal_category_post` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalCategoryPostPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfPortalCategoryPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_portal_category_post")
	}

	if len(cmfPortalCategoryPostAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFPortalCategoryPost) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFPortalCategoryPost(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFPortalCategoryPostSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFPortalCategoryPostSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalCategoryPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_portal_category_post`.* FROM `cmf_portal_category_post` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalCategoryPostPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFPortalCategoryPostSlice")
	}

	*o = slice

	return nil
}

// CMFPortalCategoryPostExists checks if the CMFPortalCategoryPost row exists.
func CMFPortalCategoryPostExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_portal_category_post` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_portal_category_post exists")
	}

	return exists, nil
}
