// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFPortalPost is an object representing the database table.
type CMFPortalPost struct {
	ID                  uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ParentID            uint64      `boil:"parent_id" json:"parent_id" toml:"parent_id" yaml:"parent_id"`
	PostType            uint8       `boil:"post_type" json:"post_type" toml:"post_type" yaml:"post_type"`
	PostFormat          uint8       `boil:"post_format" json:"post_format" toml:"post_format" yaml:"post_format"`
	UserID              uint64      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PostStatus          uint8       `boil:"post_status" json:"post_status" toml:"post_status" yaml:"post_status"`
	CommentStatus       uint8       `boil:"comment_status" json:"comment_status" toml:"comment_status" yaml:"comment_status"`
	IsTop               uint8       `boil:"is_top" json:"is_top" toml:"is_top" yaml:"is_top"`
	Recommended         uint8       `boil:"recommended" json:"recommended" toml:"recommended" yaml:"recommended"`
	PostHits            uint64      `boil:"post_hits" json:"post_hits" toml:"post_hits" yaml:"post_hits"`
	PostFavorites       uint        `boil:"post_favorites" json:"post_favorites" toml:"post_favorites" yaml:"post_favorites"`
	PostLike            uint64      `boil:"post_like" json:"post_like" toml:"post_like" yaml:"post_like"`
	CommentCount        uint64      `boil:"comment_count" json:"comment_count" toml:"comment_count" yaml:"comment_count"`
	CreateTime          uint        `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime          uint        `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`
	PublishedTime       uint        `boil:"published_time" json:"published_time" toml:"published_time" yaml:"published_time"`
	DeleteTime          uint        `boil:"delete_time" json:"delete_time" toml:"delete_time" yaml:"delete_time"`
	PostTitle           string      `boil:"post_title" json:"post_title" toml:"post_title" yaml:"post_title"`
	PostKeywords        string      `boil:"post_keywords" json:"post_keywords" toml:"post_keywords" yaml:"post_keywords"`
	PostExcerpt         string      `boil:"post_excerpt" json:"post_excerpt" toml:"post_excerpt" yaml:"post_excerpt"`
	PostSource          string      `boil:"post_source" json:"post_source" toml:"post_source" yaml:"post_source"`
	Thumbnail           string      `boil:"thumbnail" json:"thumbnail" toml:"thumbnail" yaml:"thumbnail"`
	PostContent         null.String `boil:"post_content" json:"post_content,omitempty" toml:"post_content" yaml:"post_content,omitempty"`
	PostContentFiltered null.String `boil:"post_content_filtered" json:"post_content_filtered,omitempty" toml:"post_content_filtered" yaml:"post_content_filtered,omitempty"`
	More                null.String `boil:"more" json:"more,omitempty" toml:"more" yaml:"more,omitempty"`
	Type                bool        `boil:"type" json:"type" toml:"type" yaml:"type"`
	ListOrder           int         `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`

	R *cmfPortalPostR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfPortalPostL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFPortalPostColumns = struct {
	ID                  string
	ParentID            string
	PostType            string
	PostFormat          string
	UserID              string
	PostStatus          string
	CommentStatus       string
	IsTop               string
	Recommended         string
	PostHits            string
	PostFavorites       string
	PostLike            string
	CommentCount        string
	CreateTime          string
	UpdateTime          string
	PublishedTime       string
	DeleteTime          string
	PostTitle           string
	PostKeywords        string
	PostExcerpt         string
	PostSource          string
	Thumbnail           string
	PostContent         string
	PostContentFiltered string
	More                string
	Type                string
	ListOrder           string
}{
	ID:                  "id",
	ParentID:            "parent_id",
	PostType:            "post_type",
	PostFormat:          "post_format",
	UserID:              "user_id",
	PostStatus:          "post_status",
	CommentStatus:       "comment_status",
	IsTop:               "is_top",
	Recommended:         "recommended",
	PostHits:            "post_hits",
	PostFavorites:       "post_favorites",
	PostLike:            "post_like",
	CommentCount:        "comment_count",
	CreateTime:          "create_time",
	UpdateTime:          "update_time",
	PublishedTime:       "published_time",
	DeleteTime:          "delete_time",
	PostTitle:           "post_title",
	PostKeywords:        "post_keywords",
	PostExcerpt:         "post_excerpt",
	PostSource:          "post_source",
	Thumbnail:           "thumbnail",
	PostContent:         "post_content",
	PostContentFiltered: "post_content_filtered",
	More:                "more",
	Type:                "type",
	ListOrder:           "list_order",
}

// Generated where

var CMFPortalPostWhere = struct {
	ID                  whereHelperuint64
	ParentID            whereHelperuint64
	PostType            whereHelperuint8
	PostFormat          whereHelperuint8
	UserID              whereHelperuint64
	PostStatus          whereHelperuint8
	CommentStatus       whereHelperuint8
	IsTop               whereHelperuint8
	Recommended         whereHelperuint8
	PostHits            whereHelperuint64
	PostFavorites       whereHelperuint
	PostLike            whereHelperuint64
	CommentCount        whereHelperuint64
	CreateTime          whereHelperuint
	UpdateTime          whereHelperuint
	PublishedTime       whereHelperuint
	DeleteTime          whereHelperuint
	PostTitle           whereHelperstring
	PostKeywords        whereHelperstring
	PostExcerpt         whereHelperstring
	PostSource          whereHelperstring
	Thumbnail           whereHelperstring
	PostContent         whereHelpernull_String
	PostContentFiltered whereHelpernull_String
	More                whereHelpernull_String
	Type                whereHelperbool
	ListOrder           whereHelperint
}{
	ID:                  whereHelperuint64{field: "`cmf_portal_post`.`id`"},
	ParentID:            whereHelperuint64{field: "`cmf_portal_post`.`parent_id`"},
	PostType:            whereHelperuint8{field: "`cmf_portal_post`.`post_type`"},
	PostFormat:          whereHelperuint8{field: "`cmf_portal_post`.`post_format`"},
	UserID:              whereHelperuint64{field: "`cmf_portal_post`.`user_id`"},
	PostStatus:          whereHelperuint8{field: "`cmf_portal_post`.`post_status`"},
	CommentStatus:       whereHelperuint8{field: "`cmf_portal_post`.`comment_status`"},
	IsTop:               whereHelperuint8{field: "`cmf_portal_post`.`is_top`"},
	Recommended:         whereHelperuint8{field: "`cmf_portal_post`.`recommended`"},
	PostHits:            whereHelperuint64{field: "`cmf_portal_post`.`post_hits`"},
	PostFavorites:       whereHelperuint{field: "`cmf_portal_post`.`post_favorites`"},
	PostLike:            whereHelperuint64{field: "`cmf_portal_post`.`post_like`"},
	CommentCount:        whereHelperuint64{field: "`cmf_portal_post`.`comment_count`"},
	CreateTime:          whereHelperuint{field: "`cmf_portal_post`.`create_time`"},
	UpdateTime:          whereHelperuint{field: "`cmf_portal_post`.`update_time`"},
	PublishedTime:       whereHelperuint{field: "`cmf_portal_post`.`published_time`"},
	DeleteTime:          whereHelperuint{field: "`cmf_portal_post`.`delete_time`"},
	PostTitle:           whereHelperstring{field: "`cmf_portal_post`.`post_title`"},
	PostKeywords:        whereHelperstring{field: "`cmf_portal_post`.`post_keywords`"},
	PostExcerpt:         whereHelperstring{field: "`cmf_portal_post`.`post_excerpt`"},
	PostSource:          whereHelperstring{field: "`cmf_portal_post`.`post_source`"},
	Thumbnail:           whereHelperstring{field: "`cmf_portal_post`.`thumbnail`"},
	PostContent:         whereHelpernull_String{field: "`cmf_portal_post`.`post_content`"},
	PostContentFiltered: whereHelpernull_String{field: "`cmf_portal_post`.`post_content_filtered`"},
	More:                whereHelpernull_String{field: "`cmf_portal_post`.`more`"},
	Type:                whereHelperbool{field: "`cmf_portal_post`.`type`"},
	ListOrder:           whereHelperint{field: "`cmf_portal_post`.`list_order`"},
}

// CMFPortalPostRels is where relationship names are stored.
var CMFPortalPostRels = struct {
}{}

// cmfPortalPostR is where relationships are stored.
type cmfPortalPostR struct {
}

// NewStruct creates a new relationship struct
func (*cmfPortalPostR) NewStruct() *cmfPortalPostR {
	return &cmfPortalPostR{}
}

// cmfPortalPostL is where Load methods for each relationship are stored.
type cmfPortalPostL struct{}

var (
	cmfPortalPostAllColumns            = []string{"id", "parent_id", "post_type", "post_format", "user_id", "post_status", "comment_status", "is_top", "recommended", "post_hits", "post_favorites", "post_like", "comment_count", "create_time", "update_time", "published_time", "delete_time", "post_title", "post_keywords", "post_excerpt", "post_source", "thumbnail", "post_content", "post_content_filtered", "more", "type", "list_order"}
	cmfPortalPostColumnsWithoutDefault = []string{"post_title", "post_keywords", "post_excerpt", "post_source", "thumbnail", "post_content", "post_content_filtered", "more"}
	cmfPortalPostColumnsWithDefault    = []string{"id", "parent_id", "post_type", "post_format", "user_id", "post_status", "comment_status", "is_top", "recommended", "post_hits", "post_favorites", "post_like", "comment_count", "create_time", "update_time", "published_time", "delete_time", "type", "list_order"}
	cmfPortalPostPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFPortalPostSlice is an alias for a slice of pointers to CMFPortalPost.
	// This should generally be used opposed to []CMFPortalPost.
	CMFPortalPostSlice []*CMFPortalPost
	// CMFPortalPostHook is the signature for custom CMFPortalPost hook methods
	CMFPortalPostHook func(context.Context, boil.ContextExecutor, *CMFPortalPost) error

	cmfPortalPostQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfPortalPostType                 = reflect.TypeOf(&CMFPortalPost{})
	cmfPortalPostMapping              = queries.MakeStructMapping(cmfPortalPostType)
	cmfPortalPostPrimaryKeyMapping, _ = queries.BindMapping(cmfPortalPostType, cmfPortalPostMapping, cmfPortalPostPrimaryKeyColumns)
	cmfPortalPostInsertCacheMut       sync.RWMutex
	cmfPortalPostInsertCache          = make(map[string]insertCache)
	cmfPortalPostUpdateCacheMut       sync.RWMutex
	cmfPortalPostUpdateCache          = make(map[string]updateCache)
	cmfPortalPostUpsertCacheMut       sync.RWMutex
	cmfPortalPostUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfPortalPostBeforeInsertHooks []CMFPortalPostHook
var cmfPortalPostBeforeUpdateHooks []CMFPortalPostHook
var cmfPortalPostBeforeDeleteHooks []CMFPortalPostHook
var cmfPortalPostBeforeUpsertHooks []CMFPortalPostHook

var cmfPortalPostAfterInsertHooks []CMFPortalPostHook
var cmfPortalPostAfterSelectHooks []CMFPortalPostHook
var cmfPortalPostAfterUpdateHooks []CMFPortalPostHook
var cmfPortalPostAfterDeleteHooks []CMFPortalPostHook
var cmfPortalPostAfterUpsertHooks []CMFPortalPostHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFPortalPost) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalPostBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFPortalPost) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalPostBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFPortalPost) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalPostBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFPortalPost) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalPostBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFPortalPost) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalPostAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFPortalPost) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalPostAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFPortalPost) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalPostAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFPortalPost) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalPostAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFPortalPost) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalPostAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFPortalPostHook registers your hook function for all future operations.
func AddCMFPortalPostHook(hookPoint boil.HookPoint, cmfPortalPostHook CMFPortalPostHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfPortalPostBeforeInsertHooks = append(cmfPortalPostBeforeInsertHooks, cmfPortalPostHook)
	case boil.BeforeUpdateHook:
		cmfPortalPostBeforeUpdateHooks = append(cmfPortalPostBeforeUpdateHooks, cmfPortalPostHook)
	case boil.BeforeDeleteHook:
		cmfPortalPostBeforeDeleteHooks = append(cmfPortalPostBeforeDeleteHooks, cmfPortalPostHook)
	case boil.BeforeUpsertHook:
		cmfPortalPostBeforeUpsertHooks = append(cmfPortalPostBeforeUpsertHooks, cmfPortalPostHook)
	case boil.AfterInsertHook:
		cmfPortalPostAfterInsertHooks = append(cmfPortalPostAfterInsertHooks, cmfPortalPostHook)
	case boil.AfterSelectHook:
		cmfPortalPostAfterSelectHooks = append(cmfPortalPostAfterSelectHooks, cmfPortalPostHook)
	case boil.AfterUpdateHook:
		cmfPortalPostAfterUpdateHooks = append(cmfPortalPostAfterUpdateHooks, cmfPortalPostHook)
	case boil.AfterDeleteHook:
		cmfPortalPostAfterDeleteHooks = append(cmfPortalPostAfterDeleteHooks, cmfPortalPostHook)
	case boil.AfterUpsertHook:
		cmfPortalPostAfterUpsertHooks = append(cmfPortalPostAfterUpsertHooks, cmfPortalPostHook)
	}
}

// One returns a single cmfPortalPost record from the query.
func (q cmfPortalPostQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFPortalPost, error) {
	o := &CMFPortalPost{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_portal_post")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFPortalPost records from the query.
func (q cmfPortalPostQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFPortalPostSlice, error) {
	var o []*CMFPortalPost

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFPortalPost slice")
	}

	if len(cmfPortalPostAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFPortalPost records in the query.
func (q cmfPortalPostQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_portal_post rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfPortalPostQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_portal_post exists")
	}

	return count > 0, nil
}

// CMFPortalPosts retrieves all the records using an executor.
func CMFPortalPosts(mods ...qm.QueryMod) cmfPortalPostQuery {
	mods = append(mods, qm.From("`cmf_portal_post`"))
	return cmfPortalPostQuery{NewQuery(mods...)}
}

// FindCMFPortalPost retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFPortalPost(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*CMFPortalPost, error) {
	cmfPortalPostObj := &CMFPortalPost{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_portal_post` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfPortalPostObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_portal_post")
	}

	return cmfPortalPostObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFPortalPost) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_portal_post provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPortalPostColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfPortalPostInsertCacheMut.RLock()
	cache, cached := cmfPortalPostInsertCache[key]
	cmfPortalPostInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfPortalPostAllColumns,
			cmfPortalPostColumnsWithDefault,
			cmfPortalPostColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfPortalPostType, cmfPortalPostMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfPortalPostType, cmfPortalPostMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_portal_post` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_portal_post` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_portal_post` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfPortalPostPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_portal_post")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPortalPostMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_portal_post")
	}

CacheNoHooks:
	if !cached {
		cmfPortalPostInsertCacheMut.Lock()
		cmfPortalPostInsertCache[key] = cache
		cmfPortalPostInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFPortalPost.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFPortalPost) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfPortalPostUpdateCacheMut.RLock()
	cache, cached := cmfPortalPostUpdateCache[key]
	cmfPortalPostUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfPortalPostAllColumns,
			cmfPortalPostPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_portal_post, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_portal_post` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfPortalPostPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfPortalPostType, cmfPortalPostMapping, append(wl, cmfPortalPostPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_portal_post row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_portal_post")
	}

	if !cached {
		cmfPortalPostUpdateCacheMut.Lock()
		cmfPortalPostUpdateCache[key] = cache
		cmfPortalPostUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfPortalPostQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_portal_post")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_portal_post")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFPortalPostSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_portal_post` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalPostPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfPortalPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfPortalPost")
	}
	return rowsAff, nil
}

var mySQLCMFPortalPostUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFPortalPost) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_portal_post provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPortalPostColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFPortalPostUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfPortalPostUpsertCacheMut.RLock()
	cache, cached := cmfPortalPostUpsertCache[key]
	cmfPortalPostUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfPortalPostAllColumns,
			cmfPortalPostColumnsWithDefault,
			cmfPortalPostColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfPortalPostAllColumns,
			cmfPortalPostPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_portal_post, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_portal_post`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_portal_post` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfPortalPostType, cmfPortalPostMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfPortalPostType, cmfPortalPostMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_portal_post")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPortalPostMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfPortalPostType, cmfPortalPostMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_portal_post")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_portal_post")
	}

CacheNoHooks:
	if !cached {
		cmfPortalPostUpsertCacheMut.Lock()
		cmfPortalPostUpsertCache[key] = cache
		cmfPortalPostUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFPortalPost record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFPortalPost) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFPortalPost provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfPortalPostPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_portal_post` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_portal_post")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_portal_post")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfPortalPostQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfPortalPostQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_portal_post")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_portal_post")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFPortalPostSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfPortalPostBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_portal_post` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalPostPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfPortalPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_portal_post")
	}

	if len(cmfPortalPostAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFPortalPost) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFPortalPost(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFPortalPostSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFPortalPostSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_portal_post`.* FROM `cmf_portal_post` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalPostPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFPortalPostSlice")
	}

	*o = slice

	return nil
}

// CMFPortalPostExists checks if the CMFPortalPost row exists.
func CMFPortalPostExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_portal_post` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_portal_post exists")
	}

	return exists, nil
}
