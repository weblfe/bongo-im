// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFPortalTagPost is an object representing the database table.
type CMFPortalTagPost struct {
	ID     int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	TagID  uint64 `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	PostID uint64 `boil:"post_id" json:"post_id" toml:"post_id" yaml:"post_id"`
	Status uint8  `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *cmfPortalTagPostR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfPortalTagPostL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFPortalTagPostColumns = struct {
	ID     string
	TagID  string
	PostID string
	Status string
}{
	ID:     "id",
	TagID:  "tag_id",
	PostID: "post_id",
	Status: "status",
}

// Generated where

var CMFPortalTagPostWhere = struct {
	ID     whereHelperint64
	TagID  whereHelperuint64
	PostID whereHelperuint64
	Status whereHelperuint8
}{
	ID:     whereHelperint64{field: "`cmf_portal_tag_post`.`id`"},
	TagID:  whereHelperuint64{field: "`cmf_portal_tag_post`.`tag_id`"},
	PostID: whereHelperuint64{field: "`cmf_portal_tag_post`.`post_id`"},
	Status: whereHelperuint8{field: "`cmf_portal_tag_post`.`status`"},
}

// CMFPortalTagPostRels is where relationship names are stored.
var CMFPortalTagPostRels = struct {
}{}

// cmfPortalTagPostR is where relationships are stored.
type cmfPortalTagPostR struct {
}

// NewStruct creates a new relationship struct
func (*cmfPortalTagPostR) NewStruct() *cmfPortalTagPostR {
	return &cmfPortalTagPostR{}
}

// cmfPortalTagPostL is where Load methods for each relationship are stored.
type cmfPortalTagPostL struct{}

var (
	cmfPortalTagPostAllColumns            = []string{"id", "tag_id", "post_id", "status"}
	cmfPortalTagPostColumnsWithoutDefault = []string{}
	cmfPortalTagPostColumnsWithDefault    = []string{"id", "tag_id", "post_id", "status"}
	cmfPortalTagPostPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFPortalTagPostSlice is an alias for a slice of pointers to CMFPortalTagPost.
	// This should generally be used opposed to []CMFPortalTagPost.
	CMFPortalTagPostSlice []*CMFPortalTagPost
	// CMFPortalTagPostHook is the signature for custom CMFPortalTagPost hook methods
	CMFPortalTagPostHook func(context.Context, boil.ContextExecutor, *CMFPortalTagPost) error

	cmfPortalTagPostQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfPortalTagPostType                 = reflect.TypeOf(&CMFPortalTagPost{})
	cmfPortalTagPostMapping              = queries.MakeStructMapping(cmfPortalTagPostType)
	cmfPortalTagPostPrimaryKeyMapping, _ = queries.BindMapping(cmfPortalTagPostType, cmfPortalTagPostMapping, cmfPortalTagPostPrimaryKeyColumns)
	cmfPortalTagPostInsertCacheMut       sync.RWMutex
	cmfPortalTagPostInsertCache          = make(map[string]insertCache)
	cmfPortalTagPostUpdateCacheMut       sync.RWMutex
	cmfPortalTagPostUpdateCache          = make(map[string]updateCache)
	cmfPortalTagPostUpsertCacheMut       sync.RWMutex
	cmfPortalTagPostUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfPortalTagPostBeforeInsertHooks []CMFPortalTagPostHook
var cmfPortalTagPostBeforeUpdateHooks []CMFPortalTagPostHook
var cmfPortalTagPostBeforeDeleteHooks []CMFPortalTagPostHook
var cmfPortalTagPostBeforeUpsertHooks []CMFPortalTagPostHook

var cmfPortalTagPostAfterInsertHooks []CMFPortalTagPostHook
var cmfPortalTagPostAfterSelectHooks []CMFPortalTagPostHook
var cmfPortalTagPostAfterUpdateHooks []CMFPortalTagPostHook
var cmfPortalTagPostAfterDeleteHooks []CMFPortalTagPostHook
var cmfPortalTagPostAfterUpsertHooks []CMFPortalTagPostHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFPortalTagPost) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalTagPostBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFPortalTagPost) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalTagPostBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFPortalTagPost) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalTagPostBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFPortalTagPost) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalTagPostBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFPortalTagPost) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalTagPostAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFPortalTagPost) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalTagPostAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFPortalTagPost) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalTagPostAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFPortalTagPost) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalTagPostAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFPortalTagPost) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPortalTagPostAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFPortalTagPostHook registers your hook function for all future operations.
func AddCMFPortalTagPostHook(hookPoint boil.HookPoint, cmfPortalTagPostHook CMFPortalTagPostHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfPortalTagPostBeforeInsertHooks = append(cmfPortalTagPostBeforeInsertHooks, cmfPortalTagPostHook)
	case boil.BeforeUpdateHook:
		cmfPortalTagPostBeforeUpdateHooks = append(cmfPortalTagPostBeforeUpdateHooks, cmfPortalTagPostHook)
	case boil.BeforeDeleteHook:
		cmfPortalTagPostBeforeDeleteHooks = append(cmfPortalTagPostBeforeDeleteHooks, cmfPortalTagPostHook)
	case boil.BeforeUpsertHook:
		cmfPortalTagPostBeforeUpsertHooks = append(cmfPortalTagPostBeforeUpsertHooks, cmfPortalTagPostHook)
	case boil.AfterInsertHook:
		cmfPortalTagPostAfterInsertHooks = append(cmfPortalTagPostAfterInsertHooks, cmfPortalTagPostHook)
	case boil.AfterSelectHook:
		cmfPortalTagPostAfterSelectHooks = append(cmfPortalTagPostAfterSelectHooks, cmfPortalTagPostHook)
	case boil.AfterUpdateHook:
		cmfPortalTagPostAfterUpdateHooks = append(cmfPortalTagPostAfterUpdateHooks, cmfPortalTagPostHook)
	case boil.AfterDeleteHook:
		cmfPortalTagPostAfterDeleteHooks = append(cmfPortalTagPostAfterDeleteHooks, cmfPortalTagPostHook)
	case boil.AfterUpsertHook:
		cmfPortalTagPostAfterUpsertHooks = append(cmfPortalTagPostAfterUpsertHooks, cmfPortalTagPostHook)
	}
}

// One returns a single cmfPortalTagPost record from the query.
func (q cmfPortalTagPostQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFPortalTagPost, error) {
	o := &CMFPortalTagPost{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_portal_tag_post")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFPortalTagPost records from the query.
func (q cmfPortalTagPostQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFPortalTagPostSlice, error) {
	var o []*CMFPortalTagPost

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFPortalTagPost slice")
	}

	if len(cmfPortalTagPostAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFPortalTagPost records in the query.
func (q cmfPortalTagPostQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_portal_tag_post rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfPortalTagPostQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_portal_tag_post exists")
	}

	return count > 0, nil
}

// CMFPortalTagPosts retrieves all the records using an executor.
func CMFPortalTagPosts(mods ...qm.QueryMod) cmfPortalTagPostQuery {
	mods = append(mods, qm.From("`cmf_portal_tag_post`"))
	return cmfPortalTagPostQuery{NewQuery(mods...)}
}

// FindCMFPortalTagPost retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFPortalTagPost(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFPortalTagPost, error) {
	cmfPortalTagPostObj := &CMFPortalTagPost{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_portal_tag_post` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfPortalTagPostObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_portal_tag_post")
	}

	return cmfPortalTagPostObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFPortalTagPost) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_portal_tag_post provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPortalTagPostColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfPortalTagPostInsertCacheMut.RLock()
	cache, cached := cmfPortalTagPostInsertCache[key]
	cmfPortalTagPostInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfPortalTagPostAllColumns,
			cmfPortalTagPostColumnsWithDefault,
			cmfPortalTagPostColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfPortalTagPostType, cmfPortalTagPostMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfPortalTagPostType, cmfPortalTagPostMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_portal_tag_post` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_portal_tag_post` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_portal_tag_post` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfPortalTagPostPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_portal_tag_post")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPortalTagPostMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_portal_tag_post")
	}

CacheNoHooks:
	if !cached {
		cmfPortalTagPostInsertCacheMut.Lock()
		cmfPortalTagPostInsertCache[key] = cache
		cmfPortalTagPostInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFPortalTagPost.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFPortalTagPost) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfPortalTagPostUpdateCacheMut.RLock()
	cache, cached := cmfPortalTagPostUpdateCache[key]
	cmfPortalTagPostUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfPortalTagPostAllColumns,
			cmfPortalTagPostPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_portal_tag_post, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_portal_tag_post` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfPortalTagPostPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfPortalTagPostType, cmfPortalTagPostMapping, append(wl, cmfPortalTagPostPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_portal_tag_post row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_portal_tag_post")
	}

	if !cached {
		cmfPortalTagPostUpdateCacheMut.Lock()
		cmfPortalTagPostUpdateCache[key] = cache
		cmfPortalTagPostUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfPortalTagPostQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_portal_tag_post")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_portal_tag_post")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFPortalTagPostSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalTagPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_portal_tag_post` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalTagPostPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfPortalTagPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfPortalTagPost")
	}
	return rowsAff, nil
}

var mySQLCMFPortalTagPostUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFPortalTagPost) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_portal_tag_post provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPortalTagPostColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFPortalTagPostUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfPortalTagPostUpsertCacheMut.RLock()
	cache, cached := cmfPortalTagPostUpsertCache[key]
	cmfPortalTagPostUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfPortalTagPostAllColumns,
			cmfPortalTagPostColumnsWithDefault,
			cmfPortalTagPostColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfPortalTagPostAllColumns,
			cmfPortalTagPostPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_portal_tag_post, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_portal_tag_post`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_portal_tag_post` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfPortalTagPostType, cmfPortalTagPostMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfPortalTagPostType, cmfPortalTagPostMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_portal_tag_post")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPortalTagPostMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfPortalTagPostType, cmfPortalTagPostMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_portal_tag_post")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_portal_tag_post")
	}

CacheNoHooks:
	if !cached {
		cmfPortalTagPostUpsertCacheMut.Lock()
		cmfPortalTagPostUpsertCache[key] = cache
		cmfPortalTagPostUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFPortalTagPost record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFPortalTagPost) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFPortalTagPost provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfPortalTagPostPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_portal_tag_post` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_portal_tag_post")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_portal_tag_post")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfPortalTagPostQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfPortalTagPostQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_portal_tag_post")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_portal_tag_post")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFPortalTagPostSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfPortalTagPostBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalTagPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_portal_tag_post` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalTagPostPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfPortalTagPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_portal_tag_post")
	}

	if len(cmfPortalTagPostAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFPortalTagPost) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFPortalTagPost(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFPortalTagPostSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFPortalTagPostSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPortalTagPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_portal_tag_post`.* FROM `cmf_portal_tag_post` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPortalTagPostPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFPortalTagPostSlice")
	}

	*o = slice

	return nil
}

// CMFPortalTagPostExists checks if the CMFPortalTagPost row exists.
func CMFPortalTagPostExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_portal_tag_post` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_portal_tag_post exists")
	}

	return exists, nil
}
