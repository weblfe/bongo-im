// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFPushrecord is an object representing the database table.
type CMFPushrecord struct {
	ID      int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Touid   string `boil:"touid" json:"touid" toml:"touid" yaml:"touid"`
	Content string `boil:"content" json:"content" toml:"content" yaml:"content"`
	Adminid int    `boil:"adminid" json:"adminid" toml:"adminid" yaml:"adminid"`
	Admin   string `boil:"admin" json:"admin" toml:"admin" yaml:"admin"`
	IP      int64  `boil:"ip" json:"ip" toml:"ip" yaml:"ip"`
	Addtime int    `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Type    bool   `boil:"type" json:"type" toml:"type" yaml:"type"`

	R *cmfPushrecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfPushrecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFPushrecordColumns = struct {
	ID      string
	Touid   string
	Content string
	Adminid string
	Admin   string
	IP      string
	Addtime string
	Type    string
}{
	ID:      "id",
	Touid:   "touid",
	Content: "content",
	Adminid: "adminid",
	Admin:   "admin",
	IP:      "ip",
	Addtime: "addtime",
	Type:    "type",
}

// Generated where

var CMFPushrecordWhere = struct {
	ID      whereHelperint
	Touid   whereHelperstring
	Content whereHelperstring
	Adminid whereHelperint
	Admin   whereHelperstring
	IP      whereHelperint64
	Addtime whereHelperint
	Type    whereHelperbool
}{
	ID:      whereHelperint{field: "`cmf_pushrecord`.`id`"},
	Touid:   whereHelperstring{field: "`cmf_pushrecord`.`touid`"},
	Content: whereHelperstring{field: "`cmf_pushrecord`.`content`"},
	Adminid: whereHelperint{field: "`cmf_pushrecord`.`adminid`"},
	Admin:   whereHelperstring{field: "`cmf_pushrecord`.`admin`"},
	IP:      whereHelperint64{field: "`cmf_pushrecord`.`ip`"},
	Addtime: whereHelperint{field: "`cmf_pushrecord`.`addtime`"},
	Type:    whereHelperbool{field: "`cmf_pushrecord`.`type`"},
}

// CMFPushrecordRels is where relationship names are stored.
var CMFPushrecordRels = struct {
}{}

// cmfPushrecordR is where relationships are stored.
type cmfPushrecordR struct {
}

// NewStruct creates a new relationship struct
func (*cmfPushrecordR) NewStruct() *cmfPushrecordR {
	return &cmfPushrecordR{}
}

// cmfPushrecordL is where Load methods for each relationship are stored.
type cmfPushrecordL struct{}

var (
	cmfPushrecordAllColumns            = []string{"id", "touid", "content", "adminid", "admin", "ip", "addtime", "type"}
	cmfPushrecordColumnsWithoutDefault = []string{"touid", "content", "adminid", "admin"}
	cmfPushrecordColumnsWithDefault    = []string{"id", "ip", "addtime", "type"}
	cmfPushrecordPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFPushrecordSlice is an alias for a slice of pointers to CMFPushrecord.
	// This should generally be used opposed to []CMFPushrecord.
	CMFPushrecordSlice []*CMFPushrecord
	// CMFPushrecordHook is the signature for custom CMFPushrecord hook methods
	CMFPushrecordHook func(context.Context, boil.ContextExecutor, *CMFPushrecord) error

	cmfPushrecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfPushrecordType                 = reflect.TypeOf(&CMFPushrecord{})
	cmfPushrecordMapping              = queries.MakeStructMapping(cmfPushrecordType)
	cmfPushrecordPrimaryKeyMapping, _ = queries.BindMapping(cmfPushrecordType, cmfPushrecordMapping, cmfPushrecordPrimaryKeyColumns)
	cmfPushrecordInsertCacheMut       sync.RWMutex
	cmfPushrecordInsertCache          = make(map[string]insertCache)
	cmfPushrecordUpdateCacheMut       sync.RWMutex
	cmfPushrecordUpdateCache          = make(map[string]updateCache)
	cmfPushrecordUpsertCacheMut       sync.RWMutex
	cmfPushrecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfPushrecordBeforeInsertHooks []CMFPushrecordHook
var cmfPushrecordBeforeUpdateHooks []CMFPushrecordHook
var cmfPushrecordBeforeDeleteHooks []CMFPushrecordHook
var cmfPushrecordBeforeUpsertHooks []CMFPushrecordHook

var cmfPushrecordAfterInsertHooks []CMFPushrecordHook
var cmfPushrecordAfterSelectHooks []CMFPushrecordHook
var cmfPushrecordAfterUpdateHooks []CMFPushrecordHook
var cmfPushrecordAfterDeleteHooks []CMFPushrecordHook
var cmfPushrecordAfterUpsertHooks []CMFPushrecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFPushrecord) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPushrecordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFPushrecord) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPushrecordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFPushrecord) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPushrecordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFPushrecord) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPushrecordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFPushrecord) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPushrecordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFPushrecord) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPushrecordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFPushrecord) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPushrecordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFPushrecord) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPushrecordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFPushrecord) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfPushrecordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFPushrecordHook registers your hook function for all future operations.
func AddCMFPushrecordHook(hookPoint boil.HookPoint, cmfPushrecordHook CMFPushrecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfPushrecordBeforeInsertHooks = append(cmfPushrecordBeforeInsertHooks, cmfPushrecordHook)
	case boil.BeforeUpdateHook:
		cmfPushrecordBeforeUpdateHooks = append(cmfPushrecordBeforeUpdateHooks, cmfPushrecordHook)
	case boil.BeforeDeleteHook:
		cmfPushrecordBeforeDeleteHooks = append(cmfPushrecordBeforeDeleteHooks, cmfPushrecordHook)
	case boil.BeforeUpsertHook:
		cmfPushrecordBeforeUpsertHooks = append(cmfPushrecordBeforeUpsertHooks, cmfPushrecordHook)
	case boil.AfterInsertHook:
		cmfPushrecordAfterInsertHooks = append(cmfPushrecordAfterInsertHooks, cmfPushrecordHook)
	case boil.AfterSelectHook:
		cmfPushrecordAfterSelectHooks = append(cmfPushrecordAfterSelectHooks, cmfPushrecordHook)
	case boil.AfterUpdateHook:
		cmfPushrecordAfterUpdateHooks = append(cmfPushrecordAfterUpdateHooks, cmfPushrecordHook)
	case boil.AfterDeleteHook:
		cmfPushrecordAfterDeleteHooks = append(cmfPushrecordAfterDeleteHooks, cmfPushrecordHook)
	case boil.AfterUpsertHook:
		cmfPushrecordAfterUpsertHooks = append(cmfPushrecordAfterUpsertHooks, cmfPushrecordHook)
	}
}

// One returns a single cmfPushrecord record from the query.
func (q cmfPushrecordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFPushrecord, error) {
	o := &CMFPushrecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_pushrecord")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFPushrecord records from the query.
func (q cmfPushrecordQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFPushrecordSlice, error) {
	var o []*CMFPushrecord

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFPushrecord slice")
	}

	if len(cmfPushrecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFPushrecord records in the query.
func (q cmfPushrecordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_pushrecord rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfPushrecordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_pushrecord exists")
	}

	return count > 0, nil
}

// CMFPushrecords retrieves all the records using an executor.
func CMFPushrecords(mods ...qm.QueryMod) cmfPushrecordQuery {
	mods = append(mods, qm.From("`cmf_pushrecord`"))
	return cmfPushrecordQuery{NewQuery(mods...)}
}

// FindCMFPushrecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFPushrecord(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CMFPushrecord, error) {
	cmfPushrecordObj := &CMFPushrecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_pushrecord` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfPushrecordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_pushrecord")
	}

	return cmfPushrecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFPushrecord) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_pushrecord provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPushrecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfPushrecordInsertCacheMut.RLock()
	cache, cached := cmfPushrecordInsertCache[key]
	cmfPushrecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfPushrecordAllColumns,
			cmfPushrecordColumnsWithDefault,
			cmfPushrecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfPushrecordType, cmfPushrecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfPushrecordType, cmfPushrecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_pushrecord` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_pushrecord` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_pushrecord` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfPushrecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_pushrecord")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPushrecordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_pushrecord")
	}

CacheNoHooks:
	if !cached {
		cmfPushrecordInsertCacheMut.Lock()
		cmfPushrecordInsertCache[key] = cache
		cmfPushrecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFPushrecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFPushrecord) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfPushrecordUpdateCacheMut.RLock()
	cache, cached := cmfPushrecordUpdateCache[key]
	cmfPushrecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfPushrecordAllColumns,
			cmfPushrecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_pushrecord, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_pushrecord` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfPushrecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfPushrecordType, cmfPushrecordMapping, append(wl, cmfPushrecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_pushrecord row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_pushrecord")
	}

	if !cached {
		cmfPushrecordUpdateCacheMut.Lock()
		cmfPushrecordUpdateCache[key] = cache
		cmfPushrecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfPushrecordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_pushrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_pushrecord")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFPushrecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPushrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_pushrecord` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPushrecordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfPushrecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfPushrecord")
	}
	return rowsAff, nil
}

var mySQLCMFPushrecordUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFPushrecord) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_pushrecord provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfPushrecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFPushrecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfPushrecordUpsertCacheMut.RLock()
	cache, cached := cmfPushrecordUpsertCache[key]
	cmfPushrecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfPushrecordAllColumns,
			cmfPushrecordColumnsWithDefault,
			cmfPushrecordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfPushrecordAllColumns,
			cmfPushrecordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_pushrecord, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_pushrecord`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_pushrecord` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfPushrecordType, cmfPushrecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfPushrecordType, cmfPushrecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_pushrecord")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfPushrecordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfPushrecordType, cmfPushrecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_pushrecord")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_pushrecord")
	}

CacheNoHooks:
	if !cached {
		cmfPushrecordUpsertCacheMut.Lock()
		cmfPushrecordUpsertCache[key] = cache
		cmfPushrecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFPushrecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFPushrecord) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFPushrecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfPushrecordPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_pushrecord` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_pushrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_pushrecord")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfPushrecordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfPushrecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_pushrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_pushrecord")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFPushrecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfPushrecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPushrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_pushrecord` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPushrecordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfPushrecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_pushrecord")
	}

	if len(cmfPushrecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFPushrecord) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFPushrecord(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFPushrecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFPushrecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfPushrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_pushrecord`.* FROM `cmf_pushrecord` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfPushrecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFPushrecordSlice")
	}

	*o = slice

	return nil
}

// CMFPushrecordExists checks if the CMFPushrecord row exists.
func CMFPushrecordExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_pushrecord` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_pushrecord exists")
	}

	return exists, nil
}
