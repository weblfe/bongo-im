// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFRecycleBin is an object representing the database table.
type CMFRecycleBin struct {
	ID         uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ObjectID   null.Int    `boil:"object_id" json:"object_id,omitempty" toml:"object_id" yaml:"object_id,omitempty"`
	CreateTime null.Uint   `boil:"create_time" json:"create_time,omitempty" toml:"create_time" yaml:"create_time,omitempty"`
	TableName  null.String `boil:"table_name" json:"table_name,omitempty" toml:"table_name" yaml:"table_name,omitempty"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	UserID     uint64      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *cmfRecycleBinR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfRecycleBinL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFRecycleBinColumns = struct {
	ID         string
	ObjectID   string
	CreateTime string
	TableName  string
	Name       string
	UserID     string
}{
	ID:         "id",
	ObjectID:   "object_id",
	CreateTime: "create_time",
	TableName:  "table_name",
	Name:       "name",
	UserID:     "user_id",
}

// Generated where

var CMFRecycleBinWhere = struct {
	ID         whereHelperuint64
	ObjectID   whereHelpernull_Int
	CreateTime whereHelpernull_Uint
	TableName  whereHelpernull_String
	Name       whereHelpernull_String
	UserID     whereHelperuint64
}{
	ID:         whereHelperuint64{field: "`cmf_recycle_bin`.`id`"},
	ObjectID:   whereHelpernull_Int{field: "`cmf_recycle_bin`.`object_id`"},
	CreateTime: whereHelpernull_Uint{field: "`cmf_recycle_bin`.`create_time`"},
	TableName:  whereHelpernull_String{field: "`cmf_recycle_bin`.`table_name`"},
	Name:       whereHelpernull_String{field: "`cmf_recycle_bin`.`name`"},
	UserID:     whereHelperuint64{field: "`cmf_recycle_bin`.`user_id`"},
}

// CMFRecycleBinRels is where relationship names are stored.
var CMFRecycleBinRels = struct {
}{}

// cmfRecycleBinR is where relationships are stored.
type cmfRecycleBinR struct {
}

// NewStruct creates a new relationship struct
func (*cmfRecycleBinR) NewStruct() *cmfRecycleBinR {
	return &cmfRecycleBinR{}
}

// cmfRecycleBinL is where Load methods for each relationship are stored.
type cmfRecycleBinL struct{}

var (
	cmfRecycleBinAllColumns            = []string{"id", "object_id", "create_time", "table_name", "name", "user_id"}
	cmfRecycleBinColumnsWithoutDefault = []string{"table_name", "name"}
	cmfRecycleBinColumnsWithDefault    = []string{"id", "object_id", "create_time", "user_id"}
	cmfRecycleBinPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFRecycleBinSlice is an alias for a slice of pointers to CMFRecycleBin.
	// This should generally be used opposed to []CMFRecycleBin.
	CMFRecycleBinSlice []*CMFRecycleBin
	// CMFRecycleBinHook is the signature for custom CMFRecycleBin hook methods
	CMFRecycleBinHook func(context.Context, boil.ContextExecutor, *CMFRecycleBin) error

	cmfRecycleBinQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfRecycleBinType                 = reflect.TypeOf(&CMFRecycleBin{})
	cmfRecycleBinMapping              = queries.MakeStructMapping(cmfRecycleBinType)
	cmfRecycleBinPrimaryKeyMapping, _ = queries.BindMapping(cmfRecycleBinType, cmfRecycleBinMapping, cmfRecycleBinPrimaryKeyColumns)
	cmfRecycleBinInsertCacheMut       sync.RWMutex
	cmfRecycleBinInsertCache          = make(map[string]insertCache)
	cmfRecycleBinUpdateCacheMut       sync.RWMutex
	cmfRecycleBinUpdateCache          = make(map[string]updateCache)
	cmfRecycleBinUpsertCacheMut       sync.RWMutex
	cmfRecycleBinUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfRecycleBinBeforeInsertHooks []CMFRecycleBinHook
var cmfRecycleBinBeforeUpdateHooks []CMFRecycleBinHook
var cmfRecycleBinBeforeDeleteHooks []CMFRecycleBinHook
var cmfRecycleBinBeforeUpsertHooks []CMFRecycleBinHook

var cmfRecycleBinAfterInsertHooks []CMFRecycleBinHook
var cmfRecycleBinAfterSelectHooks []CMFRecycleBinHook
var cmfRecycleBinAfterUpdateHooks []CMFRecycleBinHook
var cmfRecycleBinAfterDeleteHooks []CMFRecycleBinHook
var cmfRecycleBinAfterUpsertHooks []CMFRecycleBinHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFRecycleBin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfRecycleBinBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFRecycleBin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfRecycleBinBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFRecycleBin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfRecycleBinBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFRecycleBin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfRecycleBinBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFRecycleBin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfRecycleBinAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFRecycleBin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfRecycleBinAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFRecycleBin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfRecycleBinAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFRecycleBin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfRecycleBinAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFRecycleBin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfRecycleBinAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFRecycleBinHook registers your hook function for all future operations.
func AddCMFRecycleBinHook(hookPoint boil.HookPoint, cmfRecycleBinHook CMFRecycleBinHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfRecycleBinBeforeInsertHooks = append(cmfRecycleBinBeforeInsertHooks, cmfRecycleBinHook)
	case boil.BeforeUpdateHook:
		cmfRecycleBinBeforeUpdateHooks = append(cmfRecycleBinBeforeUpdateHooks, cmfRecycleBinHook)
	case boil.BeforeDeleteHook:
		cmfRecycleBinBeforeDeleteHooks = append(cmfRecycleBinBeforeDeleteHooks, cmfRecycleBinHook)
	case boil.BeforeUpsertHook:
		cmfRecycleBinBeforeUpsertHooks = append(cmfRecycleBinBeforeUpsertHooks, cmfRecycleBinHook)
	case boil.AfterInsertHook:
		cmfRecycleBinAfterInsertHooks = append(cmfRecycleBinAfterInsertHooks, cmfRecycleBinHook)
	case boil.AfterSelectHook:
		cmfRecycleBinAfterSelectHooks = append(cmfRecycleBinAfterSelectHooks, cmfRecycleBinHook)
	case boil.AfterUpdateHook:
		cmfRecycleBinAfterUpdateHooks = append(cmfRecycleBinAfterUpdateHooks, cmfRecycleBinHook)
	case boil.AfterDeleteHook:
		cmfRecycleBinAfterDeleteHooks = append(cmfRecycleBinAfterDeleteHooks, cmfRecycleBinHook)
	case boil.AfterUpsertHook:
		cmfRecycleBinAfterUpsertHooks = append(cmfRecycleBinAfterUpsertHooks, cmfRecycleBinHook)
	}
}

// One returns a single cmfRecycleBin record from the query.
func (q cmfRecycleBinQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFRecycleBin, error) {
	o := &CMFRecycleBin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_recycle_bin")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFRecycleBin records from the query.
func (q cmfRecycleBinQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFRecycleBinSlice, error) {
	var o []*CMFRecycleBin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFRecycleBin slice")
	}

	if len(cmfRecycleBinAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFRecycleBin records in the query.
func (q cmfRecycleBinQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_recycle_bin rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfRecycleBinQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_recycle_bin exists")
	}

	return count > 0, nil
}

// CMFRecycleBins retrieves all the records using an executor.
func CMFRecycleBins(mods ...qm.QueryMod) cmfRecycleBinQuery {
	mods = append(mods, qm.From("`cmf_recycle_bin`"))
	return cmfRecycleBinQuery{NewQuery(mods...)}
}

// FindCMFRecycleBin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFRecycleBin(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*CMFRecycleBin, error) {
	cmfRecycleBinObj := &CMFRecycleBin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_recycle_bin` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfRecycleBinObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_recycle_bin")
	}

	return cmfRecycleBinObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFRecycleBin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_recycle_bin provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfRecycleBinColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfRecycleBinInsertCacheMut.RLock()
	cache, cached := cmfRecycleBinInsertCache[key]
	cmfRecycleBinInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfRecycleBinAllColumns,
			cmfRecycleBinColumnsWithDefault,
			cmfRecycleBinColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfRecycleBinType, cmfRecycleBinMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfRecycleBinType, cmfRecycleBinMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_recycle_bin` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_recycle_bin` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_recycle_bin` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfRecycleBinPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_recycle_bin")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfRecycleBinMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_recycle_bin")
	}

CacheNoHooks:
	if !cached {
		cmfRecycleBinInsertCacheMut.Lock()
		cmfRecycleBinInsertCache[key] = cache
		cmfRecycleBinInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFRecycleBin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFRecycleBin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfRecycleBinUpdateCacheMut.RLock()
	cache, cached := cmfRecycleBinUpdateCache[key]
	cmfRecycleBinUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfRecycleBinAllColumns,
			cmfRecycleBinPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_recycle_bin, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_recycle_bin` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfRecycleBinPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfRecycleBinType, cmfRecycleBinMapping, append(wl, cmfRecycleBinPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_recycle_bin row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_recycle_bin")
	}

	if !cached {
		cmfRecycleBinUpdateCacheMut.Lock()
		cmfRecycleBinUpdateCache[key] = cache
		cmfRecycleBinUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfRecycleBinQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_recycle_bin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_recycle_bin")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFRecycleBinSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfRecycleBinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_recycle_bin` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfRecycleBinPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfRecycleBin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfRecycleBin")
	}
	return rowsAff, nil
}

var mySQLCMFRecycleBinUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFRecycleBin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_recycle_bin provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfRecycleBinColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFRecycleBinUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfRecycleBinUpsertCacheMut.RLock()
	cache, cached := cmfRecycleBinUpsertCache[key]
	cmfRecycleBinUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfRecycleBinAllColumns,
			cmfRecycleBinColumnsWithDefault,
			cmfRecycleBinColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfRecycleBinAllColumns,
			cmfRecycleBinPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_recycle_bin, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_recycle_bin`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_recycle_bin` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfRecycleBinType, cmfRecycleBinMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfRecycleBinType, cmfRecycleBinMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_recycle_bin")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfRecycleBinMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfRecycleBinType, cmfRecycleBinMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_recycle_bin")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_recycle_bin")
	}

CacheNoHooks:
	if !cached {
		cmfRecycleBinUpsertCacheMut.Lock()
		cmfRecycleBinUpsertCache[key] = cache
		cmfRecycleBinUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFRecycleBin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFRecycleBin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFRecycleBin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfRecycleBinPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_recycle_bin` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_recycle_bin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_recycle_bin")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfRecycleBinQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfRecycleBinQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_recycle_bin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_recycle_bin")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFRecycleBinSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfRecycleBinBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfRecycleBinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_recycle_bin` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfRecycleBinPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfRecycleBin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_recycle_bin")
	}

	if len(cmfRecycleBinAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFRecycleBin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFRecycleBin(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFRecycleBinSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFRecycleBinSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfRecycleBinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_recycle_bin`.* FROM `cmf_recycle_bin` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfRecycleBinPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFRecycleBinSlice")
	}

	*o = slice

	return nil
}

// CMFRecycleBinExists checks if the CMFRecycleBin row exists.
func CMFRecycleBinExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_recycle_bin` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_recycle_bin exists")
	}

	return exists, nil
}
