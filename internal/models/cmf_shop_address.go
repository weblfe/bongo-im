// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFShopAddress is an object representing the database table.
type CMFShopAddress struct {
	ID          int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID         int    `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Name        string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Country     string `boil:"country" json:"country" toml:"country" yaml:"country"`
	Province    string `boil:"province" json:"province" toml:"province" yaml:"province"`
	City        string `boil:"city" json:"city" toml:"city" yaml:"city"`
	Area        string `boil:"area" json:"area" toml:"area" yaml:"area"`
	Address     string `boil:"address" json:"address" toml:"address" yaml:"address"`
	Phone       string `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	CountryCode int    `boil:"country_code" json:"country_code" toml:"country_code" yaml:"country_code"`
	IsDefault   bool   `boil:"is_default" json:"is_default" toml:"is_default" yaml:"is_default"`
	Addtime     int    `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Edittime    int    `boil:"edittime" json:"edittime" toml:"edittime" yaml:"edittime"`

	R *cmfShopAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfShopAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFShopAddressColumns = struct {
	ID          string
	UID         string
	Name        string
	Country     string
	Province    string
	City        string
	Area        string
	Address     string
	Phone       string
	CountryCode string
	IsDefault   string
	Addtime     string
	Edittime    string
}{
	ID:          "id",
	UID:         "uid",
	Name:        "name",
	Country:     "country",
	Province:    "province",
	City:        "city",
	Area:        "area",
	Address:     "address",
	Phone:       "phone",
	CountryCode: "country_code",
	IsDefault:   "is_default",
	Addtime:     "addtime",
	Edittime:    "edittime",
}

// Generated where

var CMFShopAddressWhere = struct {
	ID          whereHelperint64
	UID         whereHelperint
	Name        whereHelperstring
	Country     whereHelperstring
	Province    whereHelperstring
	City        whereHelperstring
	Area        whereHelperstring
	Address     whereHelperstring
	Phone       whereHelperstring
	CountryCode whereHelperint
	IsDefault   whereHelperbool
	Addtime     whereHelperint
	Edittime    whereHelperint
}{
	ID:          whereHelperint64{field: "`cmf_shop_address`.`id`"},
	UID:         whereHelperint{field: "`cmf_shop_address`.`uid`"},
	Name:        whereHelperstring{field: "`cmf_shop_address`.`name`"},
	Country:     whereHelperstring{field: "`cmf_shop_address`.`country`"},
	Province:    whereHelperstring{field: "`cmf_shop_address`.`province`"},
	City:        whereHelperstring{field: "`cmf_shop_address`.`city`"},
	Area:        whereHelperstring{field: "`cmf_shop_address`.`area`"},
	Address:     whereHelperstring{field: "`cmf_shop_address`.`address`"},
	Phone:       whereHelperstring{field: "`cmf_shop_address`.`phone`"},
	CountryCode: whereHelperint{field: "`cmf_shop_address`.`country_code`"},
	IsDefault:   whereHelperbool{field: "`cmf_shop_address`.`is_default`"},
	Addtime:     whereHelperint{field: "`cmf_shop_address`.`addtime`"},
	Edittime:    whereHelperint{field: "`cmf_shop_address`.`edittime`"},
}

// CMFShopAddressRels is where relationship names are stored.
var CMFShopAddressRels = struct {
}{}

// cmfShopAddressR is where relationships are stored.
type cmfShopAddressR struct {
}

// NewStruct creates a new relationship struct
func (*cmfShopAddressR) NewStruct() *cmfShopAddressR {
	return &cmfShopAddressR{}
}

// cmfShopAddressL is where Load methods for each relationship are stored.
type cmfShopAddressL struct{}

var (
	cmfShopAddressAllColumns            = []string{"id", "uid", "name", "country", "province", "city", "area", "address", "phone", "country_code", "is_default", "addtime", "edittime"}
	cmfShopAddressColumnsWithoutDefault = []string{"name", "country", "province", "city", "area", "address", "phone"}
	cmfShopAddressColumnsWithDefault    = []string{"id", "uid", "country_code", "is_default", "addtime", "edittime"}
	cmfShopAddressPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFShopAddressSlice is an alias for a slice of pointers to CMFShopAddress.
	// This should generally be used opposed to []CMFShopAddress.
	CMFShopAddressSlice []*CMFShopAddress
	// CMFShopAddressHook is the signature for custom CMFShopAddress hook methods
	CMFShopAddressHook func(context.Context, boil.ContextExecutor, *CMFShopAddress) error

	cmfShopAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfShopAddressType                 = reflect.TypeOf(&CMFShopAddress{})
	cmfShopAddressMapping              = queries.MakeStructMapping(cmfShopAddressType)
	cmfShopAddressPrimaryKeyMapping, _ = queries.BindMapping(cmfShopAddressType, cmfShopAddressMapping, cmfShopAddressPrimaryKeyColumns)
	cmfShopAddressInsertCacheMut       sync.RWMutex
	cmfShopAddressInsertCache          = make(map[string]insertCache)
	cmfShopAddressUpdateCacheMut       sync.RWMutex
	cmfShopAddressUpdateCache          = make(map[string]updateCache)
	cmfShopAddressUpsertCacheMut       sync.RWMutex
	cmfShopAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfShopAddressBeforeInsertHooks []CMFShopAddressHook
var cmfShopAddressBeforeUpdateHooks []CMFShopAddressHook
var cmfShopAddressBeforeDeleteHooks []CMFShopAddressHook
var cmfShopAddressBeforeUpsertHooks []CMFShopAddressHook

var cmfShopAddressAfterInsertHooks []CMFShopAddressHook
var cmfShopAddressAfterSelectHooks []CMFShopAddressHook
var cmfShopAddressAfterUpdateHooks []CMFShopAddressHook
var cmfShopAddressAfterDeleteHooks []CMFShopAddressHook
var cmfShopAddressAfterUpsertHooks []CMFShopAddressHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFShopAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFShopAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFShopAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFShopAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFShopAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFShopAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFShopAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFShopAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFShopAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFShopAddressHook registers your hook function for all future operations.
func AddCMFShopAddressHook(hookPoint boil.HookPoint, cmfShopAddressHook CMFShopAddressHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfShopAddressBeforeInsertHooks = append(cmfShopAddressBeforeInsertHooks, cmfShopAddressHook)
	case boil.BeforeUpdateHook:
		cmfShopAddressBeforeUpdateHooks = append(cmfShopAddressBeforeUpdateHooks, cmfShopAddressHook)
	case boil.BeforeDeleteHook:
		cmfShopAddressBeforeDeleteHooks = append(cmfShopAddressBeforeDeleteHooks, cmfShopAddressHook)
	case boil.BeforeUpsertHook:
		cmfShopAddressBeforeUpsertHooks = append(cmfShopAddressBeforeUpsertHooks, cmfShopAddressHook)
	case boil.AfterInsertHook:
		cmfShopAddressAfterInsertHooks = append(cmfShopAddressAfterInsertHooks, cmfShopAddressHook)
	case boil.AfterSelectHook:
		cmfShopAddressAfterSelectHooks = append(cmfShopAddressAfterSelectHooks, cmfShopAddressHook)
	case boil.AfterUpdateHook:
		cmfShopAddressAfterUpdateHooks = append(cmfShopAddressAfterUpdateHooks, cmfShopAddressHook)
	case boil.AfterDeleteHook:
		cmfShopAddressAfterDeleteHooks = append(cmfShopAddressAfterDeleteHooks, cmfShopAddressHook)
	case boil.AfterUpsertHook:
		cmfShopAddressAfterUpsertHooks = append(cmfShopAddressAfterUpsertHooks, cmfShopAddressHook)
	}
}

// One returns a single cmfShopAddress record from the query.
func (q cmfShopAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFShopAddress, error) {
	o := &CMFShopAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_shop_address")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFShopAddress records from the query.
func (q cmfShopAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFShopAddressSlice, error) {
	var o []*CMFShopAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFShopAddress slice")
	}

	if len(cmfShopAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFShopAddress records in the query.
func (q cmfShopAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_shop_address rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfShopAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_shop_address exists")
	}

	return count > 0, nil
}

// CMFShopAddresses retrieves all the records using an executor.
func CMFShopAddresses(mods ...qm.QueryMod) cmfShopAddressQuery {
	mods = append(mods, qm.From("`cmf_shop_address`"))
	return cmfShopAddressQuery{NewQuery(mods...)}
}

// FindCMFShopAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFShopAddress(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFShopAddress, error) {
	cmfShopAddressObj := &CMFShopAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_shop_address` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfShopAddressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_shop_address")
	}

	return cmfShopAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFShopAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_shop_address provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfShopAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfShopAddressInsertCacheMut.RLock()
	cache, cached := cmfShopAddressInsertCache[key]
	cmfShopAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfShopAddressAllColumns,
			cmfShopAddressColumnsWithDefault,
			cmfShopAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfShopAddressType, cmfShopAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfShopAddressType, cmfShopAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_shop_address` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_shop_address` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_shop_address` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfShopAddressPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_shop_address")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfShopAddressMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_shop_address")
	}

CacheNoHooks:
	if !cached {
		cmfShopAddressInsertCacheMut.Lock()
		cmfShopAddressInsertCache[key] = cache
		cmfShopAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFShopAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFShopAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfShopAddressUpdateCacheMut.RLock()
	cache, cached := cmfShopAddressUpdateCache[key]
	cmfShopAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfShopAddressAllColumns,
			cmfShopAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_shop_address, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_shop_address` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfShopAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfShopAddressType, cmfShopAddressMapping, append(wl, cmfShopAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_shop_address row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_shop_address")
	}

	if !cached {
		cmfShopAddressUpdateCacheMut.Lock()
		cmfShopAddressUpdateCache[key] = cache
		cmfShopAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfShopAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_shop_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_shop_address")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFShopAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_shop_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfShopAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfShopAddress")
	}
	return rowsAff, nil
}

var mySQLCMFShopAddressUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFShopAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_shop_address provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfShopAddressColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFShopAddressUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfShopAddressUpsertCacheMut.RLock()
	cache, cached := cmfShopAddressUpsertCache[key]
	cmfShopAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfShopAddressAllColumns,
			cmfShopAddressColumnsWithDefault,
			cmfShopAddressColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfShopAddressAllColumns,
			cmfShopAddressPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_shop_address, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_shop_address`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_shop_address` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfShopAddressType, cmfShopAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfShopAddressType, cmfShopAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_shop_address")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfShopAddressMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfShopAddressType, cmfShopAddressMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_shop_address")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_shop_address")
	}

CacheNoHooks:
	if !cached {
		cmfShopAddressUpsertCacheMut.Lock()
		cmfShopAddressUpsertCache[key] = cache
		cmfShopAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFShopAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFShopAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFShopAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfShopAddressPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_shop_address` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_shop_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_shop_address")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfShopAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfShopAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_shop_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_shop_address")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFShopAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfShopAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_shop_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfShopAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_shop_address")
	}

	if len(cmfShopAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFShopAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFShopAddress(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFShopAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFShopAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_shop_address`.* FROM `cmf_shop_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFShopAddressSlice")
	}

	*o = slice

	return nil
}

// CMFShopAddressExists checks if the CMFShopAddress row exists.
func CMFShopAddressExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_shop_address` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_shop_address exists")
	}

	return exists, nil
}
