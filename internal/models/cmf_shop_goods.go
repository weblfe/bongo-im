// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CMFShopGood is an object representing the database table.
type CMFShopGood struct {
	ID            uint64        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID           int64         `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Name          string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	OneClassid    int           `boil:"one_classid" json:"one_classid" toml:"one_classid" yaml:"one_classid"`
	TwoClassid    int           `boil:"two_classid" json:"two_classid" toml:"two_classid" yaml:"two_classid"`
	ThreeClassid  int           `boil:"three_classid" json:"three_classid" toml:"three_classid" yaml:"three_classid"`
	VideoURL      string        `boil:"video_url" json:"video_url" toml:"video_url" yaml:"video_url"`
	VideoThumb    string        `boil:"video_thumb" json:"video_thumb" toml:"video_thumb" yaml:"video_thumb"`
	Thumbs        string        `boil:"thumbs" json:"thumbs" toml:"thumbs" yaml:"thumbs"`
	Content       string        `boil:"content" json:"content" toml:"content" yaml:"content"`
	Pictures      string        `boil:"pictures" json:"pictures" toml:"pictures" yaml:"pictures"`
	Specs         string        `boil:"specs" json:"specs" toml:"specs" yaml:"specs"`
	Postage       int           `boil:"postage" json:"postage" toml:"postage" yaml:"postage"`
	Addtime       int64         `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Uptime        int64         `boil:"uptime" json:"uptime" toml:"uptime" yaml:"uptime"`
	Hits          int           `boil:"hits" json:"hits" toml:"hits" yaml:"hits"`
	Status        bool          `boil:"status" json:"status" toml:"status" yaml:"status"`
	Isrecom       bool          `boil:"isrecom" json:"isrecom" toml:"isrecom" yaml:"isrecom"`
	SaleNums      int           `boil:"sale_nums" json:"sale_nums" toml:"sale_nums" yaml:"sale_nums"`
	RefuseReason  string        `boil:"refuse_reason" json:"refuse_reason" toml:"refuse_reason" yaml:"refuse_reason"`
	Issale        bool          `boil:"issale" json:"issale" toml:"issale" yaml:"issale"`
	Type          bool          `boil:"type" json:"type" toml:"type" yaml:"type"`
	OriginalPrice types.Decimal `boil:"original_price" json:"original_price" toml:"original_price" yaml:"original_price"`
	PresentPrice  types.Decimal `boil:"present_price" json:"present_price" toml:"present_price" yaml:"present_price"`
	GoodsDesc     string        `boil:"goods_desc" json:"goods_desc" toml:"goods_desc" yaml:"goods_desc"`
	Href          string        `boil:"href" json:"href" toml:"href" yaml:"href"`
	LiveIsshow    bool          `boil:"live_isshow" json:"live_isshow" toml:"live_isshow" yaml:"live_isshow"`
	LowPrice      types.Decimal `boil:"low_price" json:"low_price" toml:"low_price" yaml:"low_price"`
	AdminID       int64         `boil:"admin_id" json:"admin_id" toml:"admin_id" yaml:"admin_id"`
	Commission    types.Decimal `boil:"commission" json:"commission" toml:"commission" yaml:"commission"`

	R *cmfShopGoodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfShopGoodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFShopGoodColumns = struct {
	ID            string
	UID           string
	Name          string
	OneClassid    string
	TwoClassid    string
	ThreeClassid  string
	VideoURL      string
	VideoThumb    string
	Thumbs        string
	Content       string
	Pictures      string
	Specs         string
	Postage       string
	Addtime       string
	Uptime        string
	Hits          string
	Status        string
	Isrecom       string
	SaleNums      string
	RefuseReason  string
	Issale        string
	Type          string
	OriginalPrice string
	PresentPrice  string
	GoodsDesc     string
	Href          string
	LiveIsshow    string
	LowPrice      string
	AdminID       string
	Commission    string
}{
	ID:            "id",
	UID:           "uid",
	Name:          "name",
	OneClassid:    "one_classid",
	TwoClassid:    "two_classid",
	ThreeClassid:  "three_classid",
	VideoURL:      "video_url",
	VideoThumb:    "video_thumb",
	Thumbs:        "thumbs",
	Content:       "content",
	Pictures:      "pictures",
	Specs:         "specs",
	Postage:       "postage",
	Addtime:       "addtime",
	Uptime:        "uptime",
	Hits:          "hits",
	Status:        "status",
	Isrecom:       "isrecom",
	SaleNums:      "sale_nums",
	RefuseReason:  "refuse_reason",
	Issale:        "issale",
	Type:          "type",
	OriginalPrice: "original_price",
	PresentPrice:  "present_price",
	GoodsDesc:     "goods_desc",
	Href:          "href",
	LiveIsshow:    "live_isshow",
	LowPrice:      "low_price",
	AdminID:       "admin_id",
	Commission:    "commission",
}

// Generated where

var CMFShopGoodWhere = struct {
	ID            whereHelperuint64
	UID           whereHelperint64
	Name          whereHelperstring
	OneClassid    whereHelperint
	TwoClassid    whereHelperint
	ThreeClassid  whereHelperint
	VideoURL      whereHelperstring
	VideoThumb    whereHelperstring
	Thumbs        whereHelperstring
	Content       whereHelperstring
	Pictures      whereHelperstring
	Specs         whereHelperstring
	Postage       whereHelperint
	Addtime       whereHelperint64
	Uptime        whereHelperint64
	Hits          whereHelperint
	Status        whereHelperbool
	Isrecom       whereHelperbool
	SaleNums      whereHelperint
	RefuseReason  whereHelperstring
	Issale        whereHelperbool
	Type          whereHelperbool
	OriginalPrice whereHelpertypes_Decimal
	PresentPrice  whereHelpertypes_Decimal
	GoodsDesc     whereHelperstring
	Href          whereHelperstring
	LiveIsshow    whereHelperbool
	LowPrice      whereHelpertypes_Decimal
	AdminID       whereHelperint64
	Commission    whereHelpertypes_Decimal
}{
	ID:            whereHelperuint64{field: "`cmf_shop_goods`.`id`"},
	UID:           whereHelperint64{field: "`cmf_shop_goods`.`uid`"},
	Name:          whereHelperstring{field: "`cmf_shop_goods`.`name`"},
	OneClassid:    whereHelperint{field: "`cmf_shop_goods`.`one_classid`"},
	TwoClassid:    whereHelperint{field: "`cmf_shop_goods`.`two_classid`"},
	ThreeClassid:  whereHelperint{field: "`cmf_shop_goods`.`three_classid`"},
	VideoURL:      whereHelperstring{field: "`cmf_shop_goods`.`video_url`"},
	VideoThumb:    whereHelperstring{field: "`cmf_shop_goods`.`video_thumb`"},
	Thumbs:        whereHelperstring{field: "`cmf_shop_goods`.`thumbs`"},
	Content:       whereHelperstring{field: "`cmf_shop_goods`.`content`"},
	Pictures:      whereHelperstring{field: "`cmf_shop_goods`.`pictures`"},
	Specs:         whereHelperstring{field: "`cmf_shop_goods`.`specs`"},
	Postage:       whereHelperint{field: "`cmf_shop_goods`.`postage`"},
	Addtime:       whereHelperint64{field: "`cmf_shop_goods`.`addtime`"},
	Uptime:        whereHelperint64{field: "`cmf_shop_goods`.`uptime`"},
	Hits:          whereHelperint{field: "`cmf_shop_goods`.`hits`"},
	Status:        whereHelperbool{field: "`cmf_shop_goods`.`status`"},
	Isrecom:       whereHelperbool{field: "`cmf_shop_goods`.`isrecom`"},
	SaleNums:      whereHelperint{field: "`cmf_shop_goods`.`sale_nums`"},
	RefuseReason:  whereHelperstring{field: "`cmf_shop_goods`.`refuse_reason`"},
	Issale:        whereHelperbool{field: "`cmf_shop_goods`.`issale`"},
	Type:          whereHelperbool{field: "`cmf_shop_goods`.`type`"},
	OriginalPrice: whereHelpertypes_Decimal{field: "`cmf_shop_goods`.`original_price`"},
	PresentPrice:  whereHelpertypes_Decimal{field: "`cmf_shop_goods`.`present_price`"},
	GoodsDesc:     whereHelperstring{field: "`cmf_shop_goods`.`goods_desc`"},
	Href:          whereHelperstring{field: "`cmf_shop_goods`.`href`"},
	LiveIsshow:    whereHelperbool{field: "`cmf_shop_goods`.`live_isshow`"},
	LowPrice:      whereHelpertypes_Decimal{field: "`cmf_shop_goods`.`low_price`"},
	AdminID:       whereHelperint64{field: "`cmf_shop_goods`.`admin_id`"},
	Commission:    whereHelpertypes_Decimal{field: "`cmf_shop_goods`.`commission`"},
}

// CMFShopGoodRels is where relationship names are stored.
var CMFShopGoodRels = struct {
}{}

// cmfShopGoodR is where relationships are stored.
type cmfShopGoodR struct {
}

// NewStruct creates a new relationship struct
func (*cmfShopGoodR) NewStruct() *cmfShopGoodR {
	return &cmfShopGoodR{}
}

// cmfShopGoodL is where Load methods for each relationship are stored.
type cmfShopGoodL struct{}

var (
	cmfShopGoodAllColumns            = []string{"id", "uid", "name", "one_classid", "two_classid", "three_classid", "video_url", "video_thumb", "thumbs", "content", "pictures", "specs", "postage", "addtime", "uptime", "hits", "status", "isrecom", "sale_nums", "refuse_reason", "issale", "type", "original_price", "present_price", "goods_desc", "href", "live_isshow", "low_price", "admin_id", "commission"}
	cmfShopGoodColumnsWithoutDefault = []string{"name", "video_url", "video_thumb", "thumbs", "content", "pictures", "specs", "refuse_reason", "goods_desc", "href"}
	cmfShopGoodColumnsWithDefault    = []string{"id", "uid", "one_classid", "two_classid", "three_classid", "postage", "addtime", "uptime", "hits", "status", "isrecom", "sale_nums", "issale", "type", "original_price", "present_price", "live_isshow", "low_price", "admin_id", "commission"}
	cmfShopGoodPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFShopGoodSlice is an alias for a slice of pointers to CMFShopGood.
	// This should generally be used opposed to []CMFShopGood.
	CMFShopGoodSlice []*CMFShopGood
	// CMFShopGoodHook is the signature for custom CMFShopGood hook methods
	CMFShopGoodHook func(context.Context, boil.ContextExecutor, *CMFShopGood) error

	cmfShopGoodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfShopGoodType                 = reflect.TypeOf(&CMFShopGood{})
	cmfShopGoodMapping              = queries.MakeStructMapping(cmfShopGoodType)
	cmfShopGoodPrimaryKeyMapping, _ = queries.BindMapping(cmfShopGoodType, cmfShopGoodMapping, cmfShopGoodPrimaryKeyColumns)
	cmfShopGoodInsertCacheMut       sync.RWMutex
	cmfShopGoodInsertCache          = make(map[string]insertCache)
	cmfShopGoodUpdateCacheMut       sync.RWMutex
	cmfShopGoodUpdateCache          = make(map[string]updateCache)
	cmfShopGoodUpsertCacheMut       sync.RWMutex
	cmfShopGoodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfShopGoodBeforeInsertHooks []CMFShopGoodHook
var cmfShopGoodBeforeUpdateHooks []CMFShopGoodHook
var cmfShopGoodBeforeDeleteHooks []CMFShopGoodHook
var cmfShopGoodBeforeUpsertHooks []CMFShopGoodHook

var cmfShopGoodAfterInsertHooks []CMFShopGoodHook
var cmfShopGoodAfterSelectHooks []CMFShopGoodHook
var cmfShopGoodAfterUpdateHooks []CMFShopGoodHook
var cmfShopGoodAfterDeleteHooks []CMFShopGoodHook
var cmfShopGoodAfterUpsertHooks []CMFShopGoodHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFShopGood) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFShopGood) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFShopGood) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFShopGood) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFShopGood) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFShopGood) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFShopGood) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFShopGood) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFShopGood) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFShopGoodHook registers your hook function for all future operations.
func AddCMFShopGoodHook(hookPoint boil.HookPoint, cmfShopGoodHook CMFShopGoodHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfShopGoodBeforeInsertHooks = append(cmfShopGoodBeforeInsertHooks, cmfShopGoodHook)
	case boil.BeforeUpdateHook:
		cmfShopGoodBeforeUpdateHooks = append(cmfShopGoodBeforeUpdateHooks, cmfShopGoodHook)
	case boil.BeforeDeleteHook:
		cmfShopGoodBeforeDeleteHooks = append(cmfShopGoodBeforeDeleteHooks, cmfShopGoodHook)
	case boil.BeforeUpsertHook:
		cmfShopGoodBeforeUpsertHooks = append(cmfShopGoodBeforeUpsertHooks, cmfShopGoodHook)
	case boil.AfterInsertHook:
		cmfShopGoodAfterInsertHooks = append(cmfShopGoodAfterInsertHooks, cmfShopGoodHook)
	case boil.AfterSelectHook:
		cmfShopGoodAfterSelectHooks = append(cmfShopGoodAfterSelectHooks, cmfShopGoodHook)
	case boil.AfterUpdateHook:
		cmfShopGoodAfterUpdateHooks = append(cmfShopGoodAfterUpdateHooks, cmfShopGoodHook)
	case boil.AfterDeleteHook:
		cmfShopGoodAfterDeleteHooks = append(cmfShopGoodAfterDeleteHooks, cmfShopGoodHook)
	case boil.AfterUpsertHook:
		cmfShopGoodAfterUpsertHooks = append(cmfShopGoodAfterUpsertHooks, cmfShopGoodHook)
	}
}

// One returns a single cmfShopGood record from the query.
func (q cmfShopGoodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFShopGood, error) {
	o := &CMFShopGood{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_shop_goods")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFShopGood records from the query.
func (q cmfShopGoodQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFShopGoodSlice, error) {
	var o []*CMFShopGood

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFShopGood slice")
	}

	if len(cmfShopGoodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFShopGood records in the query.
func (q cmfShopGoodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_shop_goods rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfShopGoodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_shop_goods exists")
	}

	return count > 0, nil
}

// CMFShopGoods retrieves all the records using an executor.
func CMFShopGoods(mods ...qm.QueryMod) cmfShopGoodQuery {
	mods = append(mods, qm.From("`cmf_shop_goods`"))
	return cmfShopGoodQuery{NewQuery(mods...)}
}

// FindCMFShopGood retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFShopGood(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*CMFShopGood, error) {
	cmfShopGoodObj := &CMFShopGood{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_shop_goods` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfShopGoodObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_shop_goods")
	}

	return cmfShopGoodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFShopGood) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_shop_goods provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfShopGoodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfShopGoodInsertCacheMut.RLock()
	cache, cached := cmfShopGoodInsertCache[key]
	cmfShopGoodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfShopGoodAllColumns,
			cmfShopGoodColumnsWithDefault,
			cmfShopGoodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfShopGoodType, cmfShopGoodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfShopGoodType, cmfShopGoodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_shop_goods` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_shop_goods` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_shop_goods` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfShopGoodPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_shop_goods")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfShopGoodMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_shop_goods")
	}

CacheNoHooks:
	if !cached {
		cmfShopGoodInsertCacheMut.Lock()
		cmfShopGoodInsertCache[key] = cache
		cmfShopGoodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFShopGood.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFShopGood) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfShopGoodUpdateCacheMut.RLock()
	cache, cached := cmfShopGoodUpdateCache[key]
	cmfShopGoodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfShopGoodAllColumns,
			cmfShopGoodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_shop_goods, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_shop_goods` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfShopGoodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfShopGoodType, cmfShopGoodMapping, append(wl, cmfShopGoodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_shop_goods row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_shop_goods")
	}

	if !cached {
		cmfShopGoodUpdateCacheMut.Lock()
		cmfShopGoodUpdateCache[key] = cache
		cmfShopGoodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfShopGoodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_shop_goods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_shop_goods")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFShopGoodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopGoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_shop_goods` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopGoodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfShopGood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfShopGood")
	}
	return rowsAff, nil
}

var mySQLCMFShopGoodUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFShopGood) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_shop_goods provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfShopGoodColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFShopGoodUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfShopGoodUpsertCacheMut.RLock()
	cache, cached := cmfShopGoodUpsertCache[key]
	cmfShopGoodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfShopGoodAllColumns,
			cmfShopGoodColumnsWithDefault,
			cmfShopGoodColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfShopGoodAllColumns,
			cmfShopGoodPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_shop_goods, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_shop_goods`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_shop_goods` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfShopGoodType, cmfShopGoodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfShopGoodType, cmfShopGoodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_shop_goods")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfShopGoodMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfShopGoodType, cmfShopGoodMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_shop_goods")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_shop_goods")
	}

CacheNoHooks:
	if !cached {
		cmfShopGoodUpsertCacheMut.Lock()
		cmfShopGoodUpsertCache[key] = cache
		cmfShopGoodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFShopGood record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFShopGood) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFShopGood provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfShopGoodPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_shop_goods` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_shop_goods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_shop_goods")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfShopGoodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfShopGoodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_shop_goods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_shop_goods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFShopGoodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfShopGoodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopGoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_shop_goods` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopGoodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfShopGood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_shop_goods")
	}

	if len(cmfShopGoodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFShopGood) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFShopGood(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFShopGoodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFShopGoodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopGoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_shop_goods`.* FROM `cmf_shop_goods` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopGoodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFShopGoodSlice")
	}

	*o = slice

	return nil
}

// CMFShopGoodExists checks if the CMFShopGood row exists.
func CMFShopGoodExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_shop_goods` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_shop_goods exists")
	}

	return exists, nil
}
