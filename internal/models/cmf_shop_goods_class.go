// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFShopGoodsClass is an object representing the database table.
type CMFShopGoodsClass struct {
	GCID       uint   `boil:"gc_id" json:"gc_id" toml:"gc_id" yaml:"gc_id"`
	GCName     string `boil:"gc_name" json:"gc_name" toml:"gc_name" yaml:"gc_name"`
	GCParentid int    `boil:"gc_parentid" json:"gc_parentid" toml:"gc_parentid" yaml:"gc_parentid"`
	GCOneID    int    `boil:"gc_one_id" json:"gc_one_id" toml:"gc_one_id" yaml:"gc_one_id"`
	GCSort     int    `boil:"gc_sort" json:"gc_sort" toml:"gc_sort" yaml:"gc_sort"`
	GCIsshow   bool   `boil:"gc_isshow" json:"gc_isshow" toml:"gc_isshow" yaml:"gc_isshow"`
	GCAddtime  int    `boil:"gc_addtime" json:"gc_addtime" toml:"gc_addtime" yaml:"gc_addtime"`
	GCEdittime int    `boil:"gc_edittime" json:"gc_edittime" toml:"gc_edittime" yaml:"gc_edittime"`
	GCGrade    bool   `boil:"gc_grade" json:"gc_grade" toml:"gc_grade" yaml:"gc_grade"`
	GCIcon     string `boil:"gc_icon" json:"gc_icon" toml:"gc_icon" yaml:"gc_icon"`

	R *cmfShopGoodsClassR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfShopGoodsClassL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFShopGoodsClassColumns = struct {
	GCID       string
	GCName     string
	GCParentid string
	GCOneID    string
	GCSort     string
	GCIsshow   string
	GCAddtime  string
	GCEdittime string
	GCGrade    string
	GCIcon     string
}{
	GCID:       "gc_id",
	GCName:     "gc_name",
	GCParentid: "gc_parentid",
	GCOneID:    "gc_one_id",
	GCSort:     "gc_sort",
	GCIsshow:   "gc_isshow",
	GCAddtime:  "gc_addtime",
	GCEdittime: "gc_edittime",
	GCGrade:    "gc_grade",
	GCIcon:     "gc_icon",
}

// Generated where

var CMFShopGoodsClassWhere = struct {
	GCID       whereHelperuint
	GCName     whereHelperstring
	GCParentid whereHelperint
	GCOneID    whereHelperint
	GCSort     whereHelperint
	GCIsshow   whereHelperbool
	GCAddtime  whereHelperint
	GCEdittime whereHelperint
	GCGrade    whereHelperbool
	GCIcon     whereHelperstring
}{
	GCID:       whereHelperuint{field: "`cmf_shop_goods_class`.`gc_id`"},
	GCName:     whereHelperstring{field: "`cmf_shop_goods_class`.`gc_name`"},
	GCParentid: whereHelperint{field: "`cmf_shop_goods_class`.`gc_parentid`"},
	GCOneID:    whereHelperint{field: "`cmf_shop_goods_class`.`gc_one_id`"},
	GCSort:     whereHelperint{field: "`cmf_shop_goods_class`.`gc_sort`"},
	GCIsshow:   whereHelperbool{field: "`cmf_shop_goods_class`.`gc_isshow`"},
	GCAddtime:  whereHelperint{field: "`cmf_shop_goods_class`.`gc_addtime`"},
	GCEdittime: whereHelperint{field: "`cmf_shop_goods_class`.`gc_edittime`"},
	GCGrade:    whereHelperbool{field: "`cmf_shop_goods_class`.`gc_grade`"},
	GCIcon:     whereHelperstring{field: "`cmf_shop_goods_class`.`gc_icon`"},
}

// CMFShopGoodsClassRels is where relationship names are stored.
var CMFShopGoodsClassRels = struct {
}{}

// cmfShopGoodsClassR is where relationships are stored.
type cmfShopGoodsClassR struct {
}

// NewStruct creates a new relationship struct
func (*cmfShopGoodsClassR) NewStruct() *cmfShopGoodsClassR {
	return &cmfShopGoodsClassR{}
}

// cmfShopGoodsClassL is where Load methods for each relationship are stored.
type cmfShopGoodsClassL struct{}

var (
	cmfShopGoodsClassAllColumns            = []string{"gc_id", "gc_name", "gc_parentid", "gc_one_id", "gc_sort", "gc_isshow", "gc_addtime", "gc_edittime", "gc_grade", "gc_icon"}
	cmfShopGoodsClassColumnsWithoutDefault = []string{"gc_name", "gc_one_id", "gc_isshow", "gc_icon"}
	cmfShopGoodsClassColumnsWithDefault    = []string{"gc_id", "gc_parentid", "gc_sort", "gc_addtime", "gc_edittime", "gc_grade"}
	cmfShopGoodsClassPrimaryKeyColumns     = []string{"gc_id"}
)

type (
	// CMFShopGoodsClassSlice is an alias for a slice of pointers to CMFShopGoodsClass.
	// This should generally be used opposed to []CMFShopGoodsClass.
	CMFShopGoodsClassSlice []*CMFShopGoodsClass
	// CMFShopGoodsClassHook is the signature for custom CMFShopGoodsClass hook methods
	CMFShopGoodsClassHook func(context.Context, boil.ContextExecutor, *CMFShopGoodsClass) error

	cmfShopGoodsClassQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfShopGoodsClassType                 = reflect.TypeOf(&CMFShopGoodsClass{})
	cmfShopGoodsClassMapping              = queries.MakeStructMapping(cmfShopGoodsClassType)
	cmfShopGoodsClassPrimaryKeyMapping, _ = queries.BindMapping(cmfShopGoodsClassType, cmfShopGoodsClassMapping, cmfShopGoodsClassPrimaryKeyColumns)
	cmfShopGoodsClassInsertCacheMut       sync.RWMutex
	cmfShopGoodsClassInsertCache          = make(map[string]insertCache)
	cmfShopGoodsClassUpdateCacheMut       sync.RWMutex
	cmfShopGoodsClassUpdateCache          = make(map[string]updateCache)
	cmfShopGoodsClassUpsertCacheMut       sync.RWMutex
	cmfShopGoodsClassUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfShopGoodsClassBeforeInsertHooks []CMFShopGoodsClassHook
var cmfShopGoodsClassBeforeUpdateHooks []CMFShopGoodsClassHook
var cmfShopGoodsClassBeforeDeleteHooks []CMFShopGoodsClassHook
var cmfShopGoodsClassBeforeUpsertHooks []CMFShopGoodsClassHook

var cmfShopGoodsClassAfterInsertHooks []CMFShopGoodsClassHook
var cmfShopGoodsClassAfterSelectHooks []CMFShopGoodsClassHook
var cmfShopGoodsClassAfterUpdateHooks []CMFShopGoodsClassHook
var cmfShopGoodsClassAfterDeleteHooks []CMFShopGoodsClassHook
var cmfShopGoodsClassAfterUpsertHooks []CMFShopGoodsClassHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFShopGoodsClass) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodsClassBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFShopGoodsClass) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodsClassBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFShopGoodsClass) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodsClassBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFShopGoodsClass) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodsClassBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFShopGoodsClass) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodsClassAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFShopGoodsClass) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodsClassAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFShopGoodsClass) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodsClassAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFShopGoodsClass) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodsClassAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFShopGoodsClass) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopGoodsClassAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFShopGoodsClassHook registers your hook function for all future operations.
func AddCMFShopGoodsClassHook(hookPoint boil.HookPoint, cmfShopGoodsClassHook CMFShopGoodsClassHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfShopGoodsClassBeforeInsertHooks = append(cmfShopGoodsClassBeforeInsertHooks, cmfShopGoodsClassHook)
	case boil.BeforeUpdateHook:
		cmfShopGoodsClassBeforeUpdateHooks = append(cmfShopGoodsClassBeforeUpdateHooks, cmfShopGoodsClassHook)
	case boil.BeforeDeleteHook:
		cmfShopGoodsClassBeforeDeleteHooks = append(cmfShopGoodsClassBeforeDeleteHooks, cmfShopGoodsClassHook)
	case boil.BeforeUpsertHook:
		cmfShopGoodsClassBeforeUpsertHooks = append(cmfShopGoodsClassBeforeUpsertHooks, cmfShopGoodsClassHook)
	case boil.AfterInsertHook:
		cmfShopGoodsClassAfterInsertHooks = append(cmfShopGoodsClassAfterInsertHooks, cmfShopGoodsClassHook)
	case boil.AfterSelectHook:
		cmfShopGoodsClassAfterSelectHooks = append(cmfShopGoodsClassAfterSelectHooks, cmfShopGoodsClassHook)
	case boil.AfterUpdateHook:
		cmfShopGoodsClassAfterUpdateHooks = append(cmfShopGoodsClassAfterUpdateHooks, cmfShopGoodsClassHook)
	case boil.AfterDeleteHook:
		cmfShopGoodsClassAfterDeleteHooks = append(cmfShopGoodsClassAfterDeleteHooks, cmfShopGoodsClassHook)
	case boil.AfterUpsertHook:
		cmfShopGoodsClassAfterUpsertHooks = append(cmfShopGoodsClassAfterUpsertHooks, cmfShopGoodsClassHook)
	}
}

// One returns a single cmfShopGoodsClass record from the query.
func (q cmfShopGoodsClassQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFShopGoodsClass, error) {
	o := &CMFShopGoodsClass{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_shop_goods_class")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFShopGoodsClass records from the query.
func (q cmfShopGoodsClassQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFShopGoodsClassSlice, error) {
	var o []*CMFShopGoodsClass

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFShopGoodsClass slice")
	}

	if len(cmfShopGoodsClassAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFShopGoodsClass records in the query.
func (q cmfShopGoodsClassQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_shop_goods_class rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfShopGoodsClassQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_shop_goods_class exists")
	}

	return count > 0, nil
}

// CMFShopGoodsClasses retrieves all the records using an executor.
func CMFShopGoodsClasses(mods ...qm.QueryMod) cmfShopGoodsClassQuery {
	mods = append(mods, qm.From("`cmf_shop_goods_class`"))
	return cmfShopGoodsClassQuery{NewQuery(mods...)}
}

// FindCMFShopGoodsClass retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFShopGoodsClass(ctx context.Context, exec boil.ContextExecutor, gCID uint, selectCols ...string) (*CMFShopGoodsClass, error) {
	cmfShopGoodsClassObj := &CMFShopGoodsClass{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_shop_goods_class` where `gc_id`=?", sel,
	)

	q := queries.Raw(query, gCID)

	err := q.Bind(ctx, exec, cmfShopGoodsClassObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_shop_goods_class")
	}

	return cmfShopGoodsClassObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFShopGoodsClass) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_shop_goods_class provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfShopGoodsClassColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfShopGoodsClassInsertCacheMut.RLock()
	cache, cached := cmfShopGoodsClassInsertCache[key]
	cmfShopGoodsClassInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfShopGoodsClassAllColumns,
			cmfShopGoodsClassColumnsWithDefault,
			cmfShopGoodsClassColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfShopGoodsClassType, cmfShopGoodsClassMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfShopGoodsClassType, cmfShopGoodsClassMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_shop_goods_class` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_shop_goods_class` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_shop_goods_class` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfShopGoodsClassPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_shop_goods_class")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.GCID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfShopGoodsClassMapping["gc_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.GCID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_shop_goods_class")
	}

CacheNoHooks:
	if !cached {
		cmfShopGoodsClassInsertCacheMut.Lock()
		cmfShopGoodsClassInsertCache[key] = cache
		cmfShopGoodsClassInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFShopGoodsClass.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFShopGoodsClass) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfShopGoodsClassUpdateCacheMut.RLock()
	cache, cached := cmfShopGoodsClassUpdateCache[key]
	cmfShopGoodsClassUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfShopGoodsClassAllColumns,
			cmfShopGoodsClassPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_shop_goods_class, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_shop_goods_class` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfShopGoodsClassPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfShopGoodsClassType, cmfShopGoodsClassMapping, append(wl, cmfShopGoodsClassPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_shop_goods_class row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_shop_goods_class")
	}

	if !cached {
		cmfShopGoodsClassUpdateCacheMut.Lock()
		cmfShopGoodsClassUpdateCache[key] = cache
		cmfShopGoodsClassUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfShopGoodsClassQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_shop_goods_class")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_shop_goods_class")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFShopGoodsClassSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopGoodsClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_shop_goods_class` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopGoodsClassPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfShopGoodsClass slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfShopGoodsClass")
	}
	return rowsAff, nil
}

var mySQLCMFShopGoodsClassUniqueColumns = []string{
	"gc_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFShopGoodsClass) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_shop_goods_class provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfShopGoodsClassColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFShopGoodsClassUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfShopGoodsClassUpsertCacheMut.RLock()
	cache, cached := cmfShopGoodsClassUpsertCache[key]
	cmfShopGoodsClassUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfShopGoodsClassAllColumns,
			cmfShopGoodsClassColumnsWithDefault,
			cmfShopGoodsClassColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfShopGoodsClassAllColumns,
			cmfShopGoodsClassPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_shop_goods_class, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_shop_goods_class`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_shop_goods_class` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfShopGoodsClassType, cmfShopGoodsClassMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfShopGoodsClassType, cmfShopGoodsClassMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_shop_goods_class")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.GCID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfShopGoodsClassMapping["gc_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfShopGoodsClassType, cmfShopGoodsClassMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_shop_goods_class")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_shop_goods_class")
	}

CacheNoHooks:
	if !cached {
		cmfShopGoodsClassUpsertCacheMut.Lock()
		cmfShopGoodsClassUpsertCache[key] = cache
		cmfShopGoodsClassUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFShopGoodsClass record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFShopGoodsClass) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFShopGoodsClass provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfShopGoodsClassPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_shop_goods_class` WHERE `gc_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_shop_goods_class")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_shop_goods_class")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfShopGoodsClassQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfShopGoodsClassQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_shop_goods_class")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_shop_goods_class")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFShopGoodsClassSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfShopGoodsClassBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopGoodsClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_shop_goods_class` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopGoodsClassPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfShopGoodsClass slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_shop_goods_class")
	}

	if len(cmfShopGoodsClassAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFShopGoodsClass) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFShopGoodsClass(ctx, exec, o.GCID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFShopGoodsClassSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFShopGoodsClassSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopGoodsClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_shop_goods_class`.* FROM `cmf_shop_goods_class` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopGoodsClassPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFShopGoodsClassSlice")
	}

	*o = slice

	return nil
}

// CMFShopGoodsClassExists checks if the CMFShopGoodsClass row exists.
func CMFShopGoodsClassExists(ctx context.Context, exec boil.ContextExecutor, gCID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_shop_goods_class` where `gc_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gCID)
	}
	row := exec.QueryRowContext(ctx, sql, gCID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_shop_goods_class exists")
	}

	return exists, nil
}
