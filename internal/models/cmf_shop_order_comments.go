// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFShopOrderComment is an object representing the database table.
type CMFShopOrderComment struct {
	ID            int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID           int64  `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Orderid       int64  `boil:"orderid" json:"orderid" toml:"orderid" yaml:"orderid"`
	Goodsid       int64  `boil:"goodsid" json:"goodsid" toml:"goodsid" yaml:"goodsid"`
	ShopUID       int64  `boil:"shop_uid" json:"shop_uid" toml:"shop_uid" yaml:"shop_uid"`
	Content       string `boil:"content" json:"content" toml:"content" yaml:"content"`
	Thumbs        string `boil:"thumbs" json:"thumbs" toml:"thumbs" yaml:"thumbs"`
	VideoThumb    string `boil:"video_thumb" json:"video_thumb" toml:"video_thumb" yaml:"video_thumb"`
	VideoURL      string `boil:"video_url" json:"video_url" toml:"video_url" yaml:"video_url"`
	IsAnonym      bool   `boil:"is_anonym" json:"is_anonym" toml:"is_anonym" yaml:"is_anonym"`
	QualityPoints bool   `boil:"quality_points" json:"quality_points" toml:"quality_points" yaml:"quality_points"`
	ServicePoints bool   `boil:"service_points" json:"service_points" toml:"service_points" yaml:"service_points"`
	ExpressPoints bool   `boil:"express_points" json:"express_points" toml:"express_points" yaml:"express_points"`
	Addtime       int    `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	IsAppend      bool   `boil:"is_append" json:"is_append" toml:"is_append" yaml:"is_append"`

	R *cmfShopOrderCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfShopOrderCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFShopOrderCommentColumns = struct {
	ID            string
	UID           string
	Orderid       string
	Goodsid       string
	ShopUID       string
	Content       string
	Thumbs        string
	VideoThumb    string
	VideoURL      string
	IsAnonym      string
	QualityPoints string
	ServicePoints string
	ExpressPoints string
	Addtime       string
	IsAppend      string
}{
	ID:            "id",
	UID:           "uid",
	Orderid:       "orderid",
	Goodsid:       "goodsid",
	ShopUID:       "shop_uid",
	Content:       "content",
	Thumbs:        "thumbs",
	VideoThumb:    "video_thumb",
	VideoURL:      "video_url",
	IsAnonym:      "is_anonym",
	QualityPoints: "quality_points",
	ServicePoints: "service_points",
	ExpressPoints: "express_points",
	Addtime:       "addtime",
	IsAppend:      "is_append",
}

// Generated where

var CMFShopOrderCommentWhere = struct {
	ID            whereHelperint64
	UID           whereHelperint64
	Orderid       whereHelperint64
	Goodsid       whereHelperint64
	ShopUID       whereHelperint64
	Content       whereHelperstring
	Thumbs        whereHelperstring
	VideoThumb    whereHelperstring
	VideoURL      whereHelperstring
	IsAnonym      whereHelperbool
	QualityPoints whereHelperbool
	ServicePoints whereHelperbool
	ExpressPoints whereHelperbool
	Addtime       whereHelperint
	IsAppend      whereHelperbool
}{
	ID:            whereHelperint64{field: "`cmf_shop_order_comments`.`id`"},
	UID:           whereHelperint64{field: "`cmf_shop_order_comments`.`uid`"},
	Orderid:       whereHelperint64{field: "`cmf_shop_order_comments`.`orderid`"},
	Goodsid:       whereHelperint64{field: "`cmf_shop_order_comments`.`goodsid`"},
	ShopUID:       whereHelperint64{field: "`cmf_shop_order_comments`.`shop_uid`"},
	Content:       whereHelperstring{field: "`cmf_shop_order_comments`.`content`"},
	Thumbs:        whereHelperstring{field: "`cmf_shop_order_comments`.`thumbs`"},
	VideoThumb:    whereHelperstring{field: "`cmf_shop_order_comments`.`video_thumb`"},
	VideoURL:      whereHelperstring{field: "`cmf_shop_order_comments`.`video_url`"},
	IsAnonym:      whereHelperbool{field: "`cmf_shop_order_comments`.`is_anonym`"},
	QualityPoints: whereHelperbool{field: "`cmf_shop_order_comments`.`quality_points`"},
	ServicePoints: whereHelperbool{field: "`cmf_shop_order_comments`.`service_points`"},
	ExpressPoints: whereHelperbool{field: "`cmf_shop_order_comments`.`express_points`"},
	Addtime:       whereHelperint{field: "`cmf_shop_order_comments`.`addtime`"},
	IsAppend:      whereHelperbool{field: "`cmf_shop_order_comments`.`is_append`"},
}

// CMFShopOrderCommentRels is where relationship names are stored.
var CMFShopOrderCommentRels = struct {
}{}

// cmfShopOrderCommentR is where relationships are stored.
type cmfShopOrderCommentR struct {
}

// NewStruct creates a new relationship struct
func (*cmfShopOrderCommentR) NewStruct() *cmfShopOrderCommentR {
	return &cmfShopOrderCommentR{}
}

// cmfShopOrderCommentL is where Load methods for each relationship are stored.
type cmfShopOrderCommentL struct{}

var (
	cmfShopOrderCommentAllColumns            = []string{"id", "uid", "orderid", "goodsid", "shop_uid", "content", "thumbs", "video_thumb", "video_url", "is_anonym", "quality_points", "service_points", "express_points", "addtime", "is_append"}
	cmfShopOrderCommentColumnsWithoutDefault = []string{"goodsid", "content", "thumbs", "video_thumb", "video_url"}
	cmfShopOrderCommentColumnsWithDefault    = []string{"id", "uid", "orderid", "shop_uid", "is_anonym", "quality_points", "service_points", "express_points", "addtime", "is_append"}
	cmfShopOrderCommentPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFShopOrderCommentSlice is an alias for a slice of pointers to CMFShopOrderComment.
	// This should generally be used opposed to []CMFShopOrderComment.
	CMFShopOrderCommentSlice []*CMFShopOrderComment
	// CMFShopOrderCommentHook is the signature for custom CMFShopOrderComment hook methods
	CMFShopOrderCommentHook func(context.Context, boil.ContextExecutor, *CMFShopOrderComment) error

	cmfShopOrderCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfShopOrderCommentType                 = reflect.TypeOf(&CMFShopOrderComment{})
	cmfShopOrderCommentMapping              = queries.MakeStructMapping(cmfShopOrderCommentType)
	cmfShopOrderCommentPrimaryKeyMapping, _ = queries.BindMapping(cmfShopOrderCommentType, cmfShopOrderCommentMapping, cmfShopOrderCommentPrimaryKeyColumns)
	cmfShopOrderCommentInsertCacheMut       sync.RWMutex
	cmfShopOrderCommentInsertCache          = make(map[string]insertCache)
	cmfShopOrderCommentUpdateCacheMut       sync.RWMutex
	cmfShopOrderCommentUpdateCache          = make(map[string]updateCache)
	cmfShopOrderCommentUpsertCacheMut       sync.RWMutex
	cmfShopOrderCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfShopOrderCommentBeforeInsertHooks []CMFShopOrderCommentHook
var cmfShopOrderCommentBeforeUpdateHooks []CMFShopOrderCommentHook
var cmfShopOrderCommentBeforeDeleteHooks []CMFShopOrderCommentHook
var cmfShopOrderCommentBeforeUpsertHooks []CMFShopOrderCommentHook

var cmfShopOrderCommentAfterInsertHooks []CMFShopOrderCommentHook
var cmfShopOrderCommentAfterSelectHooks []CMFShopOrderCommentHook
var cmfShopOrderCommentAfterUpdateHooks []CMFShopOrderCommentHook
var cmfShopOrderCommentAfterDeleteHooks []CMFShopOrderCommentHook
var cmfShopOrderCommentAfterUpsertHooks []CMFShopOrderCommentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFShopOrderComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopOrderCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFShopOrderComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopOrderCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFShopOrderComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopOrderCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFShopOrderComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopOrderCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFShopOrderComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopOrderCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFShopOrderComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopOrderCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFShopOrderComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopOrderCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFShopOrderComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopOrderCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFShopOrderComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfShopOrderCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFShopOrderCommentHook registers your hook function for all future operations.
func AddCMFShopOrderCommentHook(hookPoint boil.HookPoint, cmfShopOrderCommentHook CMFShopOrderCommentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfShopOrderCommentBeforeInsertHooks = append(cmfShopOrderCommentBeforeInsertHooks, cmfShopOrderCommentHook)
	case boil.BeforeUpdateHook:
		cmfShopOrderCommentBeforeUpdateHooks = append(cmfShopOrderCommentBeforeUpdateHooks, cmfShopOrderCommentHook)
	case boil.BeforeDeleteHook:
		cmfShopOrderCommentBeforeDeleteHooks = append(cmfShopOrderCommentBeforeDeleteHooks, cmfShopOrderCommentHook)
	case boil.BeforeUpsertHook:
		cmfShopOrderCommentBeforeUpsertHooks = append(cmfShopOrderCommentBeforeUpsertHooks, cmfShopOrderCommentHook)
	case boil.AfterInsertHook:
		cmfShopOrderCommentAfterInsertHooks = append(cmfShopOrderCommentAfterInsertHooks, cmfShopOrderCommentHook)
	case boil.AfterSelectHook:
		cmfShopOrderCommentAfterSelectHooks = append(cmfShopOrderCommentAfterSelectHooks, cmfShopOrderCommentHook)
	case boil.AfterUpdateHook:
		cmfShopOrderCommentAfterUpdateHooks = append(cmfShopOrderCommentAfterUpdateHooks, cmfShopOrderCommentHook)
	case boil.AfterDeleteHook:
		cmfShopOrderCommentAfterDeleteHooks = append(cmfShopOrderCommentAfterDeleteHooks, cmfShopOrderCommentHook)
	case boil.AfterUpsertHook:
		cmfShopOrderCommentAfterUpsertHooks = append(cmfShopOrderCommentAfterUpsertHooks, cmfShopOrderCommentHook)
	}
}

// One returns a single cmfShopOrderComment record from the query.
func (q cmfShopOrderCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFShopOrderComment, error) {
	o := &CMFShopOrderComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_shop_order_comments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFShopOrderComment records from the query.
func (q cmfShopOrderCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFShopOrderCommentSlice, error) {
	var o []*CMFShopOrderComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFShopOrderComment slice")
	}

	if len(cmfShopOrderCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFShopOrderComment records in the query.
func (q cmfShopOrderCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_shop_order_comments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfShopOrderCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_shop_order_comments exists")
	}

	return count > 0, nil
}

// CMFShopOrderComments retrieves all the records using an executor.
func CMFShopOrderComments(mods ...qm.QueryMod) cmfShopOrderCommentQuery {
	mods = append(mods, qm.From("`cmf_shop_order_comments`"))
	return cmfShopOrderCommentQuery{NewQuery(mods...)}
}

// FindCMFShopOrderComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFShopOrderComment(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFShopOrderComment, error) {
	cmfShopOrderCommentObj := &CMFShopOrderComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_shop_order_comments` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfShopOrderCommentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_shop_order_comments")
	}

	return cmfShopOrderCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFShopOrderComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_shop_order_comments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfShopOrderCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfShopOrderCommentInsertCacheMut.RLock()
	cache, cached := cmfShopOrderCommentInsertCache[key]
	cmfShopOrderCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfShopOrderCommentAllColumns,
			cmfShopOrderCommentColumnsWithDefault,
			cmfShopOrderCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfShopOrderCommentType, cmfShopOrderCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfShopOrderCommentType, cmfShopOrderCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_shop_order_comments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_shop_order_comments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_shop_order_comments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfShopOrderCommentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_shop_order_comments")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfShopOrderCommentMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_shop_order_comments")
	}

CacheNoHooks:
	if !cached {
		cmfShopOrderCommentInsertCacheMut.Lock()
		cmfShopOrderCommentInsertCache[key] = cache
		cmfShopOrderCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFShopOrderComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFShopOrderComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfShopOrderCommentUpdateCacheMut.RLock()
	cache, cached := cmfShopOrderCommentUpdateCache[key]
	cmfShopOrderCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfShopOrderCommentAllColumns,
			cmfShopOrderCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_shop_order_comments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_shop_order_comments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfShopOrderCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfShopOrderCommentType, cmfShopOrderCommentMapping, append(wl, cmfShopOrderCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_shop_order_comments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_shop_order_comments")
	}

	if !cached {
		cmfShopOrderCommentUpdateCacheMut.Lock()
		cmfShopOrderCommentUpdateCache[key] = cache
		cmfShopOrderCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfShopOrderCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_shop_order_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_shop_order_comments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFShopOrderCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopOrderCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_shop_order_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopOrderCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfShopOrderComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfShopOrderComment")
	}
	return rowsAff, nil
}

var mySQLCMFShopOrderCommentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFShopOrderComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_shop_order_comments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfShopOrderCommentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFShopOrderCommentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfShopOrderCommentUpsertCacheMut.RLock()
	cache, cached := cmfShopOrderCommentUpsertCache[key]
	cmfShopOrderCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfShopOrderCommentAllColumns,
			cmfShopOrderCommentColumnsWithDefault,
			cmfShopOrderCommentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfShopOrderCommentAllColumns,
			cmfShopOrderCommentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_shop_order_comments, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_shop_order_comments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_shop_order_comments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfShopOrderCommentType, cmfShopOrderCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfShopOrderCommentType, cmfShopOrderCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_shop_order_comments")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfShopOrderCommentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfShopOrderCommentType, cmfShopOrderCommentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_shop_order_comments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_shop_order_comments")
	}

CacheNoHooks:
	if !cached {
		cmfShopOrderCommentUpsertCacheMut.Lock()
		cmfShopOrderCommentUpsertCache[key] = cache
		cmfShopOrderCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFShopOrderComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFShopOrderComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFShopOrderComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfShopOrderCommentPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_shop_order_comments` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_shop_order_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_shop_order_comments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfShopOrderCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfShopOrderCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_shop_order_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_shop_order_comments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFShopOrderCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfShopOrderCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopOrderCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_shop_order_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopOrderCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfShopOrderComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_shop_order_comments")
	}

	if len(cmfShopOrderCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFShopOrderComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFShopOrderComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFShopOrderCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFShopOrderCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfShopOrderCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_shop_order_comments`.* FROM `cmf_shop_order_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfShopOrderCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFShopOrderCommentSlice")
	}

	*o = slice

	return nil
}

// CMFShopOrderCommentExists checks if the CMFShopOrderComment row exists.
func CMFShopOrderCommentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_shop_order_comments` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_shop_order_comments exists")
	}

	return exists, nil
}
