// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFThemeFile is an object representing the database table.
type CMFThemeFile struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IsPublic    int8        `boil:"is_public" json:"is_public" toml:"is_public" yaml:"is_public"`
	ListOrder   float32     `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`
	Theme       string      `boil:"theme" json:"theme" toml:"theme" yaml:"theme"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Action      string      `boil:"action" json:"action" toml:"action" yaml:"action"`
	File        string      `boil:"file" json:"file" toml:"file" yaml:"file"`
	Description string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	More        null.String `boil:"more" json:"more,omitempty" toml:"more" yaml:"more,omitempty"`
	ConfigMore  null.String `boil:"config_more" json:"config_more,omitempty" toml:"config_more" yaml:"config_more,omitempty"`
	DraftMore   null.String `boil:"draft_more" json:"draft_more,omitempty" toml:"draft_more" yaml:"draft_more,omitempty"`

	R *cmfThemeFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfThemeFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFThemeFileColumns = struct {
	ID          string
	IsPublic    string
	ListOrder   string
	Theme       string
	Name        string
	Action      string
	File        string
	Description string
	More        string
	ConfigMore  string
	DraftMore   string
}{
	ID:          "id",
	IsPublic:    "is_public",
	ListOrder:   "list_order",
	Theme:       "theme",
	Name:        "name",
	Action:      "action",
	File:        "file",
	Description: "description",
	More:        "more",
	ConfigMore:  "config_more",
	DraftMore:   "draft_more",
}

// Generated where

var CMFThemeFileWhere = struct {
	ID          whereHelperint
	IsPublic    whereHelperint8
	ListOrder   whereHelperfloat32
	Theme       whereHelperstring
	Name        whereHelperstring
	Action      whereHelperstring
	File        whereHelperstring
	Description whereHelperstring
	More        whereHelpernull_String
	ConfigMore  whereHelpernull_String
	DraftMore   whereHelpernull_String
}{
	ID:          whereHelperint{field: "`cmf_theme_file`.`id`"},
	IsPublic:    whereHelperint8{field: "`cmf_theme_file`.`is_public`"},
	ListOrder:   whereHelperfloat32{field: "`cmf_theme_file`.`list_order`"},
	Theme:       whereHelperstring{field: "`cmf_theme_file`.`theme`"},
	Name:        whereHelperstring{field: "`cmf_theme_file`.`name`"},
	Action:      whereHelperstring{field: "`cmf_theme_file`.`action`"},
	File:        whereHelperstring{field: "`cmf_theme_file`.`file`"},
	Description: whereHelperstring{field: "`cmf_theme_file`.`description`"},
	More:        whereHelpernull_String{field: "`cmf_theme_file`.`more`"},
	ConfigMore:  whereHelpernull_String{field: "`cmf_theme_file`.`config_more`"},
	DraftMore:   whereHelpernull_String{field: "`cmf_theme_file`.`draft_more`"},
}

// CMFThemeFileRels is where relationship names are stored.
var CMFThemeFileRels = struct {
}{}

// cmfThemeFileR is where relationships are stored.
type cmfThemeFileR struct {
}

// NewStruct creates a new relationship struct
func (*cmfThemeFileR) NewStruct() *cmfThemeFileR {
	return &cmfThemeFileR{}
}

// cmfThemeFileL is where Load methods for each relationship are stored.
type cmfThemeFileL struct{}

var (
	cmfThemeFileAllColumns            = []string{"id", "is_public", "list_order", "theme", "name", "action", "file", "description", "more", "config_more", "draft_more"}
	cmfThemeFileColumnsWithoutDefault = []string{"theme", "name", "action", "file", "description", "more", "config_more", "draft_more"}
	cmfThemeFileColumnsWithDefault    = []string{"id", "is_public", "list_order"}
	cmfThemeFilePrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFThemeFileSlice is an alias for a slice of pointers to CMFThemeFile.
	// This should generally be used opposed to []CMFThemeFile.
	CMFThemeFileSlice []*CMFThemeFile
	// CMFThemeFileHook is the signature for custom CMFThemeFile hook methods
	CMFThemeFileHook func(context.Context, boil.ContextExecutor, *CMFThemeFile) error

	cmfThemeFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfThemeFileType                 = reflect.TypeOf(&CMFThemeFile{})
	cmfThemeFileMapping              = queries.MakeStructMapping(cmfThemeFileType)
	cmfThemeFilePrimaryKeyMapping, _ = queries.BindMapping(cmfThemeFileType, cmfThemeFileMapping, cmfThemeFilePrimaryKeyColumns)
	cmfThemeFileInsertCacheMut       sync.RWMutex
	cmfThemeFileInsertCache          = make(map[string]insertCache)
	cmfThemeFileUpdateCacheMut       sync.RWMutex
	cmfThemeFileUpdateCache          = make(map[string]updateCache)
	cmfThemeFileUpsertCacheMut       sync.RWMutex
	cmfThemeFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfThemeFileBeforeInsertHooks []CMFThemeFileHook
var cmfThemeFileBeforeUpdateHooks []CMFThemeFileHook
var cmfThemeFileBeforeDeleteHooks []CMFThemeFileHook
var cmfThemeFileBeforeUpsertHooks []CMFThemeFileHook

var cmfThemeFileAfterInsertHooks []CMFThemeFileHook
var cmfThemeFileAfterSelectHooks []CMFThemeFileHook
var cmfThemeFileAfterUpdateHooks []CMFThemeFileHook
var cmfThemeFileAfterDeleteHooks []CMFThemeFileHook
var cmfThemeFileAfterUpsertHooks []CMFThemeFileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFThemeFile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfThemeFileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFThemeFile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfThemeFileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFThemeFile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfThemeFileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFThemeFile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfThemeFileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFThemeFile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfThemeFileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFThemeFile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfThemeFileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFThemeFile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfThemeFileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFThemeFile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfThemeFileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFThemeFile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfThemeFileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFThemeFileHook registers your hook function for all future operations.
func AddCMFThemeFileHook(hookPoint boil.HookPoint, cmfThemeFileHook CMFThemeFileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfThemeFileBeforeInsertHooks = append(cmfThemeFileBeforeInsertHooks, cmfThemeFileHook)
	case boil.BeforeUpdateHook:
		cmfThemeFileBeforeUpdateHooks = append(cmfThemeFileBeforeUpdateHooks, cmfThemeFileHook)
	case boil.BeforeDeleteHook:
		cmfThemeFileBeforeDeleteHooks = append(cmfThemeFileBeforeDeleteHooks, cmfThemeFileHook)
	case boil.BeforeUpsertHook:
		cmfThemeFileBeforeUpsertHooks = append(cmfThemeFileBeforeUpsertHooks, cmfThemeFileHook)
	case boil.AfterInsertHook:
		cmfThemeFileAfterInsertHooks = append(cmfThemeFileAfterInsertHooks, cmfThemeFileHook)
	case boil.AfterSelectHook:
		cmfThemeFileAfterSelectHooks = append(cmfThemeFileAfterSelectHooks, cmfThemeFileHook)
	case boil.AfterUpdateHook:
		cmfThemeFileAfterUpdateHooks = append(cmfThemeFileAfterUpdateHooks, cmfThemeFileHook)
	case boil.AfterDeleteHook:
		cmfThemeFileAfterDeleteHooks = append(cmfThemeFileAfterDeleteHooks, cmfThemeFileHook)
	case boil.AfterUpsertHook:
		cmfThemeFileAfterUpsertHooks = append(cmfThemeFileAfterUpsertHooks, cmfThemeFileHook)
	}
}

// One returns a single cmfThemeFile record from the query.
func (q cmfThemeFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFThemeFile, error) {
	o := &CMFThemeFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_theme_file")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFThemeFile records from the query.
func (q cmfThemeFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFThemeFileSlice, error) {
	var o []*CMFThemeFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFThemeFile slice")
	}

	if len(cmfThemeFileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFThemeFile records in the query.
func (q cmfThemeFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_theme_file rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfThemeFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_theme_file exists")
	}

	return count > 0, nil
}

// CMFThemeFiles retrieves all the records using an executor.
func CMFThemeFiles(mods ...qm.QueryMod) cmfThemeFileQuery {
	mods = append(mods, qm.From("`cmf_theme_file`"))
	return cmfThemeFileQuery{NewQuery(mods...)}
}

// FindCMFThemeFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFThemeFile(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CMFThemeFile, error) {
	cmfThemeFileObj := &CMFThemeFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_theme_file` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfThemeFileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_theme_file")
	}

	return cmfThemeFileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFThemeFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_theme_file provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfThemeFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfThemeFileInsertCacheMut.RLock()
	cache, cached := cmfThemeFileInsertCache[key]
	cmfThemeFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfThemeFileAllColumns,
			cmfThemeFileColumnsWithDefault,
			cmfThemeFileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfThemeFileType, cmfThemeFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfThemeFileType, cmfThemeFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_theme_file` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_theme_file` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_theme_file` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfThemeFilePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_theme_file")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfThemeFileMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_theme_file")
	}

CacheNoHooks:
	if !cached {
		cmfThemeFileInsertCacheMut.Lock()
		cmfThemeFileInsertCache[key] = cache
		cmfThemeFileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFThemeFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFThemeFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfThemeFileUpdateCacheMut.RLock()
	cache, cached := cmfThemeFileUpdateCache[key]
	cmfThemeFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfThemeFileAllColumns,
			cmfThemeFilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_theme_file, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_theme_file` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfThemeFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfThemeFileType, cmfThemeFileMapping, append(wl, cmfThemeFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_theme_file row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_theme_file")
	}

	if !cached {
		cmfThemeFileUpdateCacheMut.Lock()
		cmfThemeFileUpdateCache[key] = cache
		cmfThemeFileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfThemeFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_theme_file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_theme_file")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFThemeFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfThemeFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_theme_file` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfThemeFilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfThemeFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfThemeFile")
	}
	return rowsAff, nil
}

var mySQLCMFThemeFileUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFThemeFile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_theme_file provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfThemeFileColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFThemeFileUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfThemeFileUpsertCacheMut.RLock()
	cache, cached := cmfThemeFileUpsertCache[key]
	cmfThemeFileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfThemeFileAllColumns,
			cmfThemeFileColumnsWithDefault,
			cmfThemeFileColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfThemeFileAllColumns,
			cmfThemeFilePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_theme_file, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_theme_file`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_theme_file` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfThemeFileType, cmfThemeFileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfThemeFileType, cmfThemeFileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_theme_file")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfThemeFileMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfThemeFileType, cmfThemeFileMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_theme_file")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_theme_file")
	}

CacheNoHooks:
	if !cached {
		cmfThemeFileUpsertCacheMut.Lock()
		cmfThemeFileUpsertCache[key] = cache
		cmfThemeFileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFThemeFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFThemeFile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFThemeFile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfThemeFilePrimaryKeyMapping)
	sql := "DELETE FROM `cmf_theme_file` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_theme_file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_theme_file")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfThemeFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfThemeFileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_theme_file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_theme_file")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFThemeFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfThemeFileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfThemeFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_theme_file` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfThemeFilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfThemeFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_theme_file")
	}

	if len(cmfThemeFileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFThemeFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFThemeFile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFThemeFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFThemeFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfThemeFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_theme_file`.* FROM `cmf_theme_file` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfThemeFilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFThemeFileSlice")
	}

	*o = slice

	return nil
}

// CMFThemeFileExists checks if the CMFThemeFile row exists.
func CMFThemeFileExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_theme_file` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_theme_file exists")
	}

	return exists, nil
}
