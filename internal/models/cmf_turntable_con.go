// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFTurntableCon is an object representing the database table.
type CMFTurntableCon struct {
	ID        uint `boil:"id" json:"id" toml:"id" yaml:"id"`
	Times     int  `boil:"times" json:"times" toml:"times" yaml:"times"`
	Coin      int  `boil:"coin" json:"coin" toml:"coin" yaml:"coin"`
	ListOrder int  `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`

	R *cmfTurntableConR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfTurntableConL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFTurntableConColumns = struct {
	ID        string
	Times     string
	Coin      string
	ListOrder string
}{
	ID:        "id",
	Times:     "times",
	Coin:      "coin",
	ListOrder: "list_order",
}

// Generated where

var CMFTurntableConWhere = struct {
	ID        whereHelperuint
	Times     whereHelperint
	Coin      whereHelperint
	ListOrder whereHelperint
}{
	ID:        whereHelperuint{field: "`cmf_turntable_con`.`id`"},
	Times:     whereHelperint{field: "`cmf_turntable_con`.`times`"},
	Coin:      whereHelperint{field: "`cmf_turntable_con`.`coin`"},
	ListOrder: whereHelperint{field: "`cmf_turntable_con`.`list_order`"},
}

// CMFTurntableConRels is where relationship names are stored.
var CMFTurntableConRels = struct {
}{}

// cmfTurntableConR is where relationships are stored.
type cmfTurntableConR struct {
}

// NewStruct creates a new relationship struct
func (*cmfTurntableConR) NewStruct() *cmfTurntableConR {
	return &cmfTurntableConR{}
}

// cmfTurntableConL is where Load methods for each relationship are stored.
type cmfTurntableConL struct{}

var (
	cmfTurntableConAllColumns            = []string{"id", "times", "coin", "list_order"}
	cmfTurntableConColumnsWithoutDefault = []string{}
	cmfTurntableConColumnsWithDefault    = []string{"id", "times", "coin", "list_order"}
	cmfTurntableConPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFTurntableConSlice is an alias for a slice of pointers to CMFTurntableCon.
	// This should generally be used opposed to []CMFTurntableCon.
	CMFTurntableConSlice []*CMFTurntableCon
	// CMFTurntableConHook is the signature for custom CMFTurntableCon hook methods
	CMFTurntableConHook func(context.Context, boil.ContextExecutor, *CMFTurntableCon) error

	cmfTurntableConQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfTurntableConType                 = reflect.TypeOf(&CMFTurntableCon{})
	cmfTurntableConMapping              = queries.MakeStructMapping(cmfTurntableConType)
	cmfTurntableConPrimaryKeyMapping, _ = queries.BindMapping(cmfTurntableConType, cmfTurntableConMapping, cmfTurntableConPrimaryKeyColumns)
	cmfTurntableConInsertCacheMut       sync.RWMutex
	cmfTurntableConInsertCache          = make(map[string]insertCache)
	cmfTurntableConUpdateCacheMut       sync.RWMutex
	cmfTurntableConUpdateCache          = make(map[string]updateCache)
	cmfTurntableConUpsertCacheMut       sync.RWMutex
	cmfTurntableConUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfTurntableConBeforeInsertHooks []CMFTurntableConHook
var cmfTurntableConBeforeUpdateHooks []CMFTurntableConHook
var cmfTurntableConBeforeDeleteHooks []CMFTurntableConHook
var cmfTurntableConBeforeUpsertHooks []CMFTurntableConHook

var cmfTurntableConAfterInsertHooks []CMFTurntableConHook
var cmfTurntableConAfterSelectHooks []CMFTurntableConHook
var cmfTurntableConAfterUpdateHooks []CMFTurntableConHook
var cmfTurntableConAfterDeleteHooks []CMFTurntableConHook
var cmfTurntableConAfterUpsertHooks []CMFTurntableConHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFTurntableCon) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfTurntableConBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFTurntableCon) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfTurntableConBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFTurntableCon) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfTurntableConBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFTurntableCon) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfTurntableConBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFTurntableCon) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfTurntableConAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFTurntableCon) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfTurntableConAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFTurntableCon) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfTurntableConAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFTurntableCon) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfTurntableConAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFTurntableCon) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfTurntableConAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFTurntableConHook registers your hook function for all future operations.
func AddCMFTurntableConHook(hookPoint boil.HookPoint, cmfTurntableConHook CMFTurntableConHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfTurntableConBeforeInsertHooks = append(cmfTurntableConBeforeInsertHooks, cmfTurntableConHook)
	case boil.BeforeUpdateHook:
		cmfTurntableConBeforeUpdateHooks = append(cmfTurntableConBeforeUpdateHooks, cmfTurntableConHook)
	case boil.BeforeDeleteHook:
		cmfTurntableConBeforeDeleteHooks = append(cmfTurntableConBeforeDeleteHooks, cmfTurntableConHook)
	case boil.BeforeUpsertHook:
		cmfTurntableConBeforeUpsertHooks = append(cmfTurntableConBeforeUpsertHooks, cmfTurntableConHook)
	case boil.AfterInsertHook:
		cmfTurntableConAfterInsertHooks = append(cmfTurntableConAfterInsertHooks, cmfTurntableConHook)
	case boil.AfterSelectHook:
		cmfTurntableConAfterSelectHooks = append(cmfTurntableConAfterSelectHooks, cmfTurntableConHook)
	case boil.AfterUpdateHook:
		cmfTurntableConAfterUpdateHooks = append(cmfTurntableConAfterUpdateHooks, cmfTurntableConHook)
	case boil.AfterDeleteHook:
		cmfTurntableConAfterDeleteHooks = append(cmfTurntableConAfterDeleteHooks, cmfTurntableConHook)
	case boil.AfterUpsertHook:
		cmfTurntableConAfterUpsertHooks = append(cmfTurntableConAfterUpsertHooks, cmfTurntableConHook)
	}
}

// One returns a single cmfTurntableCon record from the query.
func (q cmfTurntableConQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFTurntableCon, error) {
	o := &CMFTurntableCon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_turntable_con")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFTurntableCon records from the query.
func (q cmfTurntableConQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFTurntableConSlice, error) {
	var o []*CMFTurntableCon

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFTurntableCon slice")
	}

	if len(cmfTurntableConAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFTurntableCon records in the query.
func (q cmfTurntableConQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_turntable_con rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfTurntableConQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_turntable_con exists")
	}

	return count > 0, nil
}

// CMFTurntableCons retrieves all the records using an executor.
func CMFTurntableCons(mods ...qm.QueryMod) cmfTurntableConQuery {
	mods = append(mods, qm.From("`cmf_turntable_con`"))
	return cmfTurntableConQuery{NewQuery(mods...)}
}

// FindCMFTurntableCon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFTurntableCon(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFTurntableCon, error) {
	cmfTurntableConObj := &CMFTurntableCon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_turntable_con` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfTurntableConObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_turntable_con")
	}

	return cmfTurntableConObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFTurntableCon) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_turntable_con provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfTurntableConColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfTurntableConInsertCacheMut.RLock()
	cache, cached := cmfTurntableConInsertCache[key]
	cmfTurntableConInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfTurntableConAllColumns,
			cmfTurntableConColumnsWithDefault,
			cmfTurntableConColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfTurntableConType, cmfTurntableConMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfTurntableConType, cmfTurntableConMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_turntable_con` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_turntable_con` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_turntable_con` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfTurntableConPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_turntable_con")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfTurntableConMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_turntable_con")
	}

CacheNoHooks:
	if !cached {
		cmfTurntableConInsertCacheMut.Lock()
		cmfTurntableConInsertCache[key] = cache
		cmfTurntableConInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFTurntableCon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFTurntableCon) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfTurntableConUpdateCacheMut.RLock()
	cache, cached := cmfTurntableConUpdateCache[key]
	cmfTurntableConUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfTurntableConAllColumns,
			cmfTurntableConPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_turntable_con, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_turntable_con` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfTurntableConPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfTurntableConType, cmfTurntableConMapping, append(wl, cmfTurntableConPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_turntable_con row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_turntable_con")
	}

	if !cached {
		cmfTurntableConUpdateCacheMut.Lock()
		cmfTurntableConUpdateCache[key] = cache
		cmfTurntableConUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfTurntableConQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_turntable_con")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_turntable_con")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFTurntableConSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfTurntableConPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_turntable_con` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfTurntableConPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfTurntableCon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfTurntableCon")
	}
	return rowsAff, nil
}

var mySQLCMFTurntableConUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFTurntableCon) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_turntable_con provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfTurntableConColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFTurntableConUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfTurntableConUpsertCacheMut.RLock()
	cache, cached := cmfTurntableConUpsertCache[key]
	cmfTurntableConUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfTurntableConAllColumns,
			cmfTurntableConColumnsWithDefault,
			cmfTurntableConColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfTurntableConAllColumns,
			cmfTurntableConPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_turntable_con, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_turntable_con`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_turntable_con` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfTurntableConType, cmfTurntableConMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfTurntableConType, cmfTurntableConMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_turntable_con")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfTurntableConMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfTurntableConType, cmfTurntableConMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_turntable_con")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_turntable_con")
	}

CacheNoHooks:
	if !cached {
		cmfTurntableConUpsertCacheMut.Lock()
		cmfTurntableConUpsertCache[key] = cache
		cmfTurntableConUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFTurntableCon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFTurntableCon) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFTurntableCon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfTurntableConPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_turntable_con` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_turntable_con")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_turntable_con")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfTurntableConQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfTurntableConQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_turntable_con")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_turntable_con")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFTurntableConSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfTurntableConBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfTurntableConPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_turntable_con` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfTurntableConPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfTurntableCon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_turntable_con")
	}

	if len(cmfTurntableConAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFTurntableCon) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFTurntableCon(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFTurntableConSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFTurntableConSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfTurntableConPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_turntable_con`.* FROM `cmf_turntable_con` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfTurntableConPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFTurntableConSlice")
	}

	*o = slice

	return nil
}

// CMFTurntableConExists checks if the CMFTurntableCon row exists.
func CMFTurntableConExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_turntable_con` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_turntable_con exists")
	}

	return exists, nil
}
