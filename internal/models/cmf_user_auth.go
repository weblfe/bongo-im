// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFUserAuth is an object representing the database table.
type CMFUserAuth struct {
	UID         uint        `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	RealName    string      `boil:"real_name" json:"real_name" toml:"real_name" yaml:"real_name"`
	Mobile      string      `boil:"mobile" json:"mobile" toml:"mobile" yaml:"mobile"`
	CerNo       string      `boil:"cer_no" json:"cer_no" toml:"cer_no" yaml:"cer_no"`
	FrontView   string      `boil:"front_view" json:"front_view" toml:"front_view" yaml:"front_view"`
	BackView    string      `boil:"back_view" json:"back_view" toml:"back_view" yaml:"back_view"`
	HandsetView string      `boil:"handset_view" json:"handset_view" toml:"handset_view" yaml:"handset_view"`
	Reason      null.String `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	Addtime     int         `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Uptime      int         `boil:"uptime" json:"uptime" toml:"uptime" yaml:"uptime"`
	Status      bool        `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *cmfUserAuthR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfUserAuthL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFUserAuthColumns = struct {
	UID         string
	RealName    string
	Mobile      string
	CerNo       string
	FrontView   string
	BackView    string
	HandsetView string
	Reason      string
	Addtime     string
	Uptime      string
	Status      string
}{
	UID:         "uid",
	RealName:    "real_name",
	Mobile:      "mobile",
	CerNo:       "cer_no",
	FrontView:   "front_view",
	BackView:    "back_view",
	HandsetView: "handset_view",
	Reason:      "reason",
	Addtime:     "addtime",
	Uptime:      "uptime",
	Status:      "status",
}

// Generated where

var CMFUserAuthWhere = struct {
	UID         whereHelperuint
	RealName    whereHelperstring
	Mobile      whereHelperstring
	CerNo       whereHelperstring
	FrontView   whereHelperstring
	BackView    whereHelperstring
	HandsetView whereHelperstring
	Reason      whereHelpernull_String
	Addtime     whereHelperint
	Uptime      whereHelperint
	Status      whereHelperbool
}{
	UID:         whereHelperuint{field: "`cmf_user_auth`.`uid`"},
	RealName:    whereHelperstring{field: "`cmf_user_auth`.`real_name`"},
	Mobile:      whereHelperstring{field: "`cmf_user_auth`.`mobile`"},
	CerNo:       whereHelperstring{field: "`cmf_user_auth`.`cer_no`"},
	FrontView:   whereHelperstring{field: "`cmf_user_auth`.`front_view`"},
	BackView:    whereHelperstring{field: "`cmf_user_auth`.`back_view`"},
	HandsetView: whereHelperstring{field: "`cmf_user_auth`.`handset_view`"},
	Reason:      whereHelpernull_String{field: "`cmf_user_auth`.`reason`"},
	Addtime:     whereHelperint{field: "`cmf_user_auth`.`addtime`"},
	Uptime:      whereHelperint{field: "`cmf_user_auth`.`uptime`"},
	Status:      whereHelperbool{field: "`cmf_user_auth`.`status`"},
}

// CMFUserAuthRels is where relationship names are stored.
var CMFUserAuthRels = struct {
}{}

// cmfUserAuthR is where relationships are stored.
type cmfUserAuthR struct {
}

// NewStruct creates a new relationship struct
func (*cmfUserAuthR) NewStruct() *cmfUserAuthR {
	return &cmfUserAuthR{}
}

// cmfUserAuthL is where Load methods for each relationship are stored.
type cmfUserAuthL struct{}

var (
	cmfUserAuthAllColumns            = []string{"uid", "real_name", "mobile", "cer_no", "front_view", "back_view", "handset_view", "reason", "addtime", "uptime", "status"}
	cmfUserAuthColumnsWithoutDefault = []string{"real_name", "mobile", "cer_no", "front_view", "back_view", "handset_view", "reason"}
	cmfUserAuthColumnsWithDefault    = []string{"uid", "addtime", "uptime", "status"}
	cmfUserAuthPrimaryKeyColumns     = []string{"uid"}
)

type (
	// CMFUserAuthSlice is an alias for a slice of pointers to CMFUserAuth.
	// This should generally be used opposed to []CMFUserAuth.
	CMFUserAuthSlice []*CMFUserAuth
	// CMFUserAuthHook is the signature for custom CMFUserAuth hook methods
	CMFUserAuthHook func(context.Context, boil.ContextExecutor, *CMFUserAuth) error

	cmfUserAuthQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfUserAuthType                 = reflect.TypeOf(&CMFUserAuth{})
	cmfUserAuthMapping              = queries.MakeStructMapping(cmfUserAuthType)
	cmfUserAuthPrimaryKeyMapping, _ = queries.BindMapping(cmfUserAuthType, cmfUserAuthMapping, cmfUserAuthPrimaryKeyColumns)
	cmfUserAuthInsertCacheMut       sync.RWMutex
	cmfUserAuthInsertCache          = make(map[string]insertCache)
	cmfUserAuthUpdateCacheMut       sync.RWMutex
	cmfUserAuthUpdateCache          = make(map[string]updateCache)
	cmfUserAuthUpsertCacheMut       sync.RWMutex
	cmfUserAuthUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfUserAuthBeforeInsertHooks []CMFUserAuthHook
var cmfUserAuthBeforeUpdateHooks []CMFUserAuthHook
var cmfUserAuthBeforeDeleteHooks []CMFUserAuthHook
var cmfUserAuthBeforeUpsertHooks []CMFUserAuthHook

var cmfUserAuthAfterInsertHooks []CMFUserAuthHook
var cmfUserAuthAfterSelectHooks []CMFUserAuthHook
var cmfUserAuthAfterUpdateHooks []CMFUserAuthHook
var cmfUserAuthAfterDeleteHooks []CMFUserAuthHook
var cmfUserAuthAfterUpsertHooks []CMFUserAuthHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFUserAuth) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserAuthBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFUserAuth) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserAuthBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFUserAuth) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserAuthBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFUserAuth) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserAuthBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFUserAuth) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserAuthAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFUserAuth) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserAuthAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFUserAuth) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserAuthAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFUserAuth) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserAuthAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFUserAuth) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserAuthAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFUserAuthHook registers your hook function for all future operations.
func AddCMFUserAuthHook(hookPoint boil.HookPoint, cmfUserAuthHook CMFUserAuthHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfUserAuthBeforeInsertHooks = append(cmfUserAuthBeforeInsertHooks, cmfUserAuthHook)
	case boil.BeforeUpdateHook:
		cmfUserAuthBeforeUpdateHooks = append(cmfUserAuthBeforeUpdateHooks, cmfUserAuthHook)
	case boil.BeforeDeleteHook:
		cmfUserAuthBeforeDeleteHooks = append(cmfUserAuthBeforeDeleteHooks, cmfUserAuthHook)
	case boil.BeforeUpsertHook:
		cmfUserAuthBeforeUpsertHooks = append(cmfUserAuthBeforeUpsertHooks, cmfUserAuthHook)
	case boil.AfterInsertHook:
		cmfUserAuthAfterInsertHooks = append(cmfUserAuthAfterInsertHooks, cmfUserAuthHook)
	case boil.AfterSelectHook:
		cmfUserAuthAfterSelectHooks = append(cmfUserAuthAfterSelectHooks, cmfUserAuthHook)
	case boil.AfterUpdateHook:
		cmfUserAuthAfterUpdateHooks = append(cmfUserAuthAfterUpdateHooks, cmfUserAuthHook)
	case boil.AfterDeleteHook:
		cmfUserAuthAfterDeleteHooks = append(cmfUserAuthAfterDeleteHooks, cmfUserAuthHook)
	case boil.AfterUpsertHook:
		cmfUserAuthAfterUpsertHooks = append(cmfUserAuthAfterUpsertHooks, cmfUserAuthHook)
	}
}

// One returns a single cmfUserAuth record from the query.
func (q cmfUserAuthQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFUserAuth, error) {
	o := &CMFUserAuth{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_user_auth")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFUserAuth records from the query.
func (q cmfUserAuthQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFUserAuthSlice, error) {
	var o []*CMFUserAuth

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFUserAuth slice")
	}

	if len(cmfUserAuthAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFUserAuth records in the query.
func (q cmfUserAuthQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_user_auth rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfUserAuthQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_user_auth exists")
	}

	return count > 0, nil
}

// CMFUserAuths retrieves all the records using an executor.
func CMFUserAuths(mods ...qm.QueryMod) cmfUserAuthQuery {
	mods = append(mods, qm.From("`cmf_user_auth`"))
	return cmfUserAuthQuery{NewQuery(mods...)}
}

// FindCMFUserAuth retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFUserAuth(ctx context.Context, exec boil.ContextExecutor, uID uint, selectCols ...string) (*CMFUserAuth, error) {
	cmfUserAuthObj := &CMFUserAuth{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_user_auth` where `uid`=?", sel,
	)

	q := queries.Raw(query, uID)

	err := q.Bind(ctx, exec, cmfUserAuthObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_user_auth")
	}

	return cmfUserAuthObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFUserAuth) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_user_auth provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfUserAuthColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfUserAuthInsertCacheMut.RLock()
	cache, cached := cmfUserAuthInsertCache[key]
	cmfUserAuthInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfUserAuthAllColumns,
			cmfUserAuthColumnsWithDefault,
			cmfUserAuthColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfUserAuthType, cmfUserAuthMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfUserAuthType, cmfUserAuthMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_user_auth` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_user_auth` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_user_auth` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfUserAuthPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_user_auth")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.UID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfUserAuthMapping["uid"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_user_auth")
	}

CacheNoHooks:
	if !cached {
		cmfUserAuthInsertCacheMut.Lock()
		cmfUserAuthInsertCache[key] = cache
		cmfUserAuthInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFUserAuth.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFUserAuth) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfUserAuthUpdateCacheMut.RLock()
	cache, cached := cmfUserAuthUpdateCache[key]
	cmfUserAuthUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfUserAuthAllColumns,
			cmfUserAuthPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_user_auth, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_user_auth` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfUserAuthPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfUserAuthType, cmfUserAuthMapping, append(wl, cmfUserAuthPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_user_auth row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_user_auth")
	}

	if !cached {
		cmfUserAuthUpdateCacheMut.Lock()
		cmfUserAuthUpdateCache[key] = cache
		cmfUserAuthUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfUserAuthQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_user_auth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_user_auth")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFUserAuthSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfUserAuthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_user_auth` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfUserAuthPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfUserAuth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfUserAuth")
	}
	return rowsAff, nil
}

var mySQLCMFUserAuthUniqueColumns = []string{
	"uid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFUserAuth) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_user_auth provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfUserAuthColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFUserAuthUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfUserAuthUpsertCacheMut.RLock()
	cache, cached := cmfUserAuthUpsertCache[key]
	cmfUserAuthUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfUserAuthAllColumns,
			cmfUserAuthColumnsWithDefault,
			cmfUserAuthColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfUserAuthAllColumns,
			cmfUserAuthPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_user_auth, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_user_auth`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_user_auth` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfUserAuthType, cmfUserAuthMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfUserAuthType, cmfUserAuthMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_user_auth")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.UID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfUserAuthMapping["uid"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfUserAuthType, cmfUserAuthMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_user_auth")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_user_auth")
	}

CacheNoHooks:
	if !cached {
		cmfUserAuthUpsertCacheMut.Lock()
		cmfUserAuthUpsertCache[key] = cache
		cmfUserAuthUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFUserAuth record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFUserAuth) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFUserAuth provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfUserAuthPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_user_auth` WHERE `uid`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_user_auth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_user_auth")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfUserAuthQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfUserAuthQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_user_auth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_user_auth")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFUserAuthSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfUserAuthBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfUserAuthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_user_auth` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfUserAuthPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfUserAuth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_user_auth")
	}

	if len(cmfUserAuthAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFUserAuth) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFUserAuth(ctx, exec, o.UID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFUserAuthSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFUserAuthSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfUserAuthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_user_auth`.* FROM `cmf_user_auth` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfUserAuthPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFUserAuthSlice")
	}

	*o = slice

	return nil
}

// CMFUserAuthExists checks if the CMFUserAuth row exists.
func CMFUserAuthExists(ctx context.Context, exec boil.ContextExecutor, uID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_user_auth` where `uid`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uID)
	}
	row := exec.QueryRowContext(ctx, sql, uID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_user_auth exists")
	}

	return exists, nil
}
