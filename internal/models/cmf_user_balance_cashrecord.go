// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CMFUserBalanceCashrecord is an object representing the database table.
type CMFUserBalanceCashrecord struct {
	ID          uint          `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID         int           `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Money       types.Decimal `boil:"money" json:"money" toml:"money" yaml:"money"`
	Orderno     string        `boil:"orderno" json:"orderno" toml:"orderno" yaml:"orderno"`
	TradeNo     string        `boil:"trade_no" json:"trade_no" toml:"trade_no" yaml:"trade_no"`
	Status      bool          `boil:"status" json:"status" toml:"status" yaml:"status"`
	Addtime     int           `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	Uptime      int           `boil:"uptime" json:"uptime" toml:"uptime" yaml:"uptime"`
	Type        bool          `boil:"type" json:"type" toml:"type" yaml:"type"`
	AccountBank string        `boil:"account_bank" json:"account_bank" toml:"account_bank" yaml:"account_bank"`
	Account     string        `boil:"account" json:"account" toml:"account" yaml:"account"`
	Name        string        `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *cmfUserBalanceCashrecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfUserBalanceCashrecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFUserBalanceCashrecordColumns = struct {
	ID          string
	UID         string
	Money       string
	Orderno     string
	TradeNo     string
	Status      string
	Addtime     string
	Uptime      string
	Type        string
	AccountBank string
	Account     string
	Name        string
}{
	ID:          "id",
	UID:         "uid",
	Money:       "money",
	Orderno:     "orderno",
	TradeNo:     "trade_no",
	Status:      "status",
	Addtime:     "addtime",
	Uptime:      "uptime",
	Type:        "type",
	AccountBank: "account_bank",
	Account:     "account",
	Name:        "name",
}

// Generated where

var CMFUserBalanceCashrecordWhere = struct {
	ID          whereHelperuint
	UID         whereHelperint
	Money       whereHelpertypes_Decimal
	Orderno     whereHelperstring
	TradeNo     whereHelperstring
	Status      whereHelperbool
	Addtime     whereHelperint
	Uptime      whereHelperint
	Type        whereHelperbool
	AccountBank whereHelperstring
	Account     whereHelperstring
	Name        whereHelperstring
}{
	ID:          whereHelperuint{field: "`cmf_user_balance_cashrecord`.`id`"},
	UID:         whereHelperint{field: "`cmf_user_balance_cashrecord`.`uid`"},
	Money:       whereHelpertypes_Decimal{field: "`cmf_user_balance_cashrecord`.`money`"},
	Orderno:     whereHelperstring{field: "`cmf_user_balance_cashrecord`.`orderno`"},
	TradeNo:     whereHelperstring{field: "`cmf_user_balance_cashrecord`.`trade_no`"},
	Status:      whereHelperbool{field: "`cmf_user_balance_cashrecord`.`status`"},
	Addtime:     whereHelperint{field: "`cmf_user_balance_cashrecord`.`addtime`"},
	Uptime:      whereHelperint{field: "`cmf_user_balance_cashrecord`.`uptime`"},
	Type:        whereHelperbool{field: "`cmf_user_balance_cashrecord`.`type`"},
	AccountBank: whereHelperstring{field: "`cmf_user_balance_cashrecord`.`account_bank`"},
	Account:     whereHelperstring{field: "`cmf_user_balance_cashrecord`.`account`"},
	Name:        whereHelperstring{field: "`cmf_user_balance_cashrecord`.`name`"},
}

// CMFUserBalanceCashrecordRels is where relationship names are stored.
var CMFUserBalanceCashrecordRels = struct {
}{}

// cmfUserBalanceCashrecordR is where relationships are stored.
type cmfUserBalanceCashrecordR struct {
}

// NewStruct creates a new relationship struct
func (*cmfUserBalanceCashrecordR) NewStruct() *cmfUserBalanceCashrecordR {
	return &cmfUserBalanceCashrecordR{}
}

// cmfUserBalanceCashrecordL is where Load methods for each relationship are stored.
type cmfUserBalanceCashrecordL struct{}

var (
	cmfUserBalanceCashrecordAllColumns            = []string{"id", "uid", "money", "orderno", "trade_no", "status", "addtime", "uptime", "type", "account_bank", "account", "name"}
	cmfUserBalanceCashrecordColumnsWithoutDefault = []string{"orderno", "trade_no", "account_bank", "account", "name"}
	cmfUserBalanceCashrecordColumnsWithDefault    = []string{"id", "uid", "money", "status", "addtime", "uptime", "type"}
	cmfUserBalanceCashrecordPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFUserBalanceCashrecordSlice is an alias for a slice of pointers to CMFUserBalanceCashrecord.
	// This should generally be used opposed to []CMFUserBalanceCashrecord.
	CMFUserBalanceCashrecordSlice []*CMFUserBalanceCashrecord
	// CMFUserBalanceCashrecordHook is the signature for custom CMFUserBalanceCashrecord hook methods
	CMFUserBalanceCashrecordHook func(context.Context, boil.ContextExecutor, *CMFUserBalanceCashrecord) error

	cmfUserBalanceCashrecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfUserBalanceCashrecordType                 = reflect.TypeOf(&CMFUserBalanceCashrecord{})
	cmfUserBalanceCashrecordMapping              = queries.MakeStructMapping(cmfUserBalanceCashrecordType)
	cmfUserBalanceCashrecordPrimaryKeyMapping, _ = queries.BindMapping(cmfUserBalanceCashrecordType, cmfUserBalanceCashrecordMapping, cmfUserBalanceCashrecordPrimaryKeyColumns)
	cmfUserBalanceCashrecordInsertCacheMut       sync.RWMutex
	cmfUserBalanceCashrecordInsertCache          = make(map[string]insertCache)
	cmfUserBalanceCashrecordUpdateCacheMut       sync.RWMutex
	cmfUserBalanceCashrecordUpdateCache          = make(map[string]updateCache)
	cmfUserBalanceCashrecordUpsertCacheMut       sync.RWMutex
	cmfUserBalanceCashrecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfUserBalanceCashrecordBeforeInsertHooks []CMFUserBalanceCashrecordHook
var cmfUserBalanceCashrecordBeforeUpdateHooks []CMFUserBalanceCashrecordHook
var cmfUserBalanceCashrecordBeforeDeleteHooks []CMFUserBalanceCashrecordHook
var cmfUserBalanceCashrecordBeforeUpsertHooks []CMFUserBalanceCashrecordHook

var cmfUserBalanceCashrecordAfterInsertHooks []CMFUserBalanceCashrecordHook
var cmfUserBalanceCashrecordAfterSelectHooks []CMFUserBalanceCashrecordHook
var cmfUserBalanceCashrecordAfterUpdateHooks []CMFUserBalanceCashrecordHook
var cmfUserBalanceCashrecordAfterDeleteHooks []CMFUserBalanceCashrecordHook
var cmfUserBalanceCashrecordAfterUpsertHooks []CMFUserBalanceCashrecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFUserBalanceCashrecord) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserBalanceCashrecordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFUserBalanceCashrecord) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserBalanceCashrecordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFUserBalanceCashrecord) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserBalanceCashrecordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFUserBalanceCashrecord) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserBalanceCashrecordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFUserBalanceCashrecord) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserBalanceCashrecordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFUserBalanceCashrecord) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserBalanceCashrecordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFUserBalanceCashrecord) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserBalanceCashrecordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFUserBalanceCashrecord) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserBalanceCashrecordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFUserBalanceCashrecord) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserBalanceCashrecordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFUserBalanceCashrecordHook registers your hook function for all future operations.
func AddCMFUserBalanceCashrecordHook(hookPoint boil.HookPoint, cmfUserBalanceCashrecordHook CMFUserBalanceCashrecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfUserBalanceCashrecordBeforeInsertHooks = append(cmfUserBalanceCashrecordBeforeInsertHooks, cmfUserBalanceCashrecordHook)
	case boil.BeforeUpdateHook:
		cmfUserBalanceCashrecordBeforeUpdateHooks = append(cmfUserBalanceCashrecordBeforeUpdateHooks, cmfUserBalanceCashrecordHook)
	case boil.BeforeDeleteHook:
		cmfUserBalanceCashrecordBeforeDeleteHooks = append(cmfUserBalanceCashrecordBeforeDeleteHooks, cmfUserBalanceCashrecordHook)
	case boil.BeforeUpsertHook:
		cmfUserBalanceCashrecordBeforeUpsertHooks = append(cmfUserBalanceCashrecordBeforeUpsertHooks, cmfUserBalanceCashrecordHook)
	case boil.AfterInsertHook:
		cmfUserBalanceCashrecordAfterInsertHooks = append(cmfUserBalanceCashrecordAfterInsertHooks, cmfUserBalanceCashrecordHook)
	case boil.AfterSelectHook:
		cmfUserBalanceCashrecordAfterSelectHooks = append(cmfUserBalanceCashrecordAfterSelectHooks, cmfUserBalanceCashrecordHook)
	case boil.AfterUpdateHook:
		cmfUserBalanceCashrecordAfterUpdateHooks = append(cmfUserBalanceCashrecordAfterUpdateHooks, cmfUserBalanceCashrecordHook)
	case boil.AfterDeleteHook:
		cmfUserBalanceCashrecordAfterDeleteHooks = append(cmfUserBalanceCashrecordAfterDeleteHooks, cmfUserBalanceCashrecordHook)
	case boil.AfterUpsertHook:
		cmfUserBalanceCashrecordAfterUpsertHooks = append(cmfUserBalanceCashrecordAfterUpsertHooks, cmfUserBalanceCashrecordHook)
	}
}

// One returns a single cmfUserBalanceCashrecord record from the query.
func (q cmfUserBalanceCashrecordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFUserBalanceCashrecord, error) {
	o := &CMFUserBalanceCashrecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_user_balance_cashrecord")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFUserBalanceCashrecord records from the query.
func (q cmfUserBalanceCashrecordQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFUserBalanceCashrecordSlice, error) {
	var o []*CMFUserBalanceCashrecord

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFUserBalanceCashrecord slice")
	}

	if len(cmfUserBalanceCashrecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFUserBalanceCashrecord records in the query.
func (q cmfUserBalanceCashrecordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_user_balance_cashrecord rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfUserBalanceCashrecordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_user_balance_cashrecord exists")
	}

	return count > 0, nil
}

// CMFUserBalanceCashrecords retrieves all the records using an executor.
func CMFUserBalanceCashrecords(mods ...qm.QueryMod) cmfUserBalanceCashrecordQuery {
	mods = append(mods, qm.From("`cmf_user_balance_cashrecord`"))
	return cmfUserBalanceCashrecordQuery{NewQuery(mods...)}
}

// FindCMFUserBalanceCashrecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFUserBalanceCashrecord(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CMFUserBalanceCashrecord, error) {
	cmfUserBalanceCashrecordObj := &CMFUserBalanceCashrecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_user_balance_cashrecord` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfUserBalanceCashrecordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_user_balance_cashrecord")
	}

	return cmfUserBalanceCashrecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFUserBalanceCashrecord) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_user_balance_cashrecord provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfUserBalanceCashrecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfUserBalanceCashrecordInsertCacheMut.RLock()
	cache, cached := cmfUserBalanceCashrecordInsertCache[key]
	cmfUserBalanceCashrecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfUserBalanceCashrecordAllColumns,
			cmfUserBalanceCashrecordColumnsWithDefault,
			cmfUserBalanceCashrecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfUserBalanceCashrecordType, cmfUserBalanceCashrecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfUserBalanceCashrecordType, cmfUserBalanceCashrecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_user_balance_cashrecord` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_user_balance_cashrecord` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_user_balance_cashrecord` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfUserBalanceCashrecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_user_balance_cashrecord")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfUserBalanceCashrecordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_user_balance_cashrecord")
	}

CacheNoHooks:
	if !cached {
		cmfUserBalanceCashrecordInsertCacheMut.Lock()
		cmfUserBalanceCashrecordInsertCache[key] = cache
		cmfUserBalanceCashrecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFUserBalanceCashrecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFUserBalanceCashrecord) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfUserBalanceCashrecordUpdateCacheMut.RLock()
	cache, cached := cmfUserBalanceCashrecordUpdateCache[key]
	cmfUserBalanceCashrecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfUserBalanceCashrecordAllColumns,
			cmfUserBalanceCashrecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_user_balance_cashrecord, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_user_balance_cashrecord` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfUserBalanceCashrecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfUserBalanceCashrecordType, cmfUserBalanceCashrecordMapping, append(wl, cmfUserBalanceCashrecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_user_balance_cashrecord row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_user_balance_cashrecord")
	}

	if !cached {
		cmfUserBalanceCashrecordUpdateCacheMut.Lock()
		cmfUserBalanceCashrecordUpdateCache[key] = cache
		cmfUserBalanceCashrecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfUserBalanceCashrecordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_user_balance_cashrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_user_balance_cashrecord")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFUserBalanceCashrecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfUserBalanceCashrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_user_balance_cashrecord` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfUserBalanceCashrecordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfUserBalanceCashrecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfUserBalanceCashrecord")
	}
	return rowsAff, nil
}

var mySQLCMFUserBalanceCashrecordUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFUserBalanceCashrecord) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_user_balance_cashrecord provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfUserBalanceCashrecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFUserBalanceCashrecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfUserBalanceCashrecordUpsertCacheMut.RLock()
	cache, cached := cmfUserBalanceCashrecordUpsertCache[key]
	cmfUserBalanceCashrecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfUserBalanceCashrecordAllColumns,
			cmfUserBalanceCashrecordColumnsWithDefault,
			cmfUserBalanceCashrecordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfUserBalanceCashrecordAllColumns,
			cmfUserBalanceCashrecordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_user_balance_cashrecord, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_user_balance_cashrecord`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_user_balance_cashrecord` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfUserBalanceCashrecordType, cmfUserBalanceCashrecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfUserBalanceCashrecordType, cmfUserBalanceCashrecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_user_balance_cashrecord")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfUserBalanceCashrecordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfUserBalanceCashrecordType, cmfUserBalanceCashrecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_user_balance_cashrecord")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_user_balance_cashrecord")
	}

CacheNoHooks:
	if !cached {
		cmfUserBalanceCashrecordUpsertCacheMut.Lock()
		cmfUserBalanceCashrecordUpsertCache[key] = cache
		cmfUserBalanceCashrecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFUserBalanceCashrecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFUserBalanceCashrecord) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFUserBalanceCashrecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfUserBalanceCashrecordPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_user_balance_cashrecord` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_user_balance_cashrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_user_balance_cashrecord")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfUserBalanceCashrecordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfUserBalanceCashrecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_user_balance_cashrecord")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_user_balance_cashrecord")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFUserBalanceCashrecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfUserBalanceCashrecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfUserBalanceCashrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_user_balance_cashrecord` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfUserBalanceCashrecordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfUserBalanceCashrecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_user_balance_cashrecord")
	}

	if len(cmfUserBalanceCashrecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFUserBalanceCashrecord) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFUserBalanceCashrecord(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFUserBalanceCashrecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFUserBalanceCashrecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfUserBalanceCashrecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_user_balance_cashrecord`.* FROM `cmf_user_balance_cashrecord` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfUserBalanceCashrecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFUserBalanceCashrecordSlice")
	}

	*o = slice

	return nil
}

// CMFUserBalanceCashrecordExists checks if the CMFUserBalanceCashrecord row exists.
func CMFUserBalanceCashrecordExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_user_balance_cashrecord` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_user_balance_cashrecord exists")
	}

	return exists, nil
}
