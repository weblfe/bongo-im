// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFUserExperience is an object representing the database table.
type CMFUserExperience struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Type       string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Total      int64     `boil:"total" json:"total" toml:"total" yaml:"total"`
	CreateTime time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime null.Time `boil:"update_time" json:"update_time,omitempty" toml:"update_time" yaml:"update_time,omitempty"`

	R *cmfUserExperienceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfUserExperienceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFUserExperienceColumns = struct {
	ID         string
	UserID     string
	Type       string
	Total      string
	CreateTime string
	UpdateTime string
}{
	ID:         "id",
	UserID:     "user_id",
	Type:       "type",
	Total:      "total",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

// Generated where

var CMFUserExperienceWhere = struct {
	ID         whereHelperint64
	UserID     whereHelperint64
	Type       whereHelperstring
	Total      whereHelperint64
	CreateTime whereHelpertime_Time
	UpdateTime whereHelpernull_Time
}{
	ID:         whereHelperint64{field: "`cmf_user_experience`.`id`"},
	UserID:     whereHelperint64{field: "`cmf_user_experience`.`user_id`"},
	Type:       whereHelperstring{field: "`cmf_user_experience`.`type`"},
	Total:      whereHelperint64{field: "`cmf_user_experience`.`total`"},
	CreateTime: whereHelpertime_Time{field: "`cmf_user_experience`.`create_time`"},
	UpdateTime: whereHelpernull_Time{field: "`cmf_user_experience`.`update_time`"},
}

// CMFUserExperienceRels is where relationship names are stored.
var CMFUserExperienceRels = struct {
}{}

// cmfUserExperienceR is where relationships are stored.
type cmfUserExperienceR struct {
}

// NewStruct creates a new relationship struct
func (*cmfUserExperienceR) NewStruct() *cmfUserExperienceR {
	return &cmfUserExperienceR{}
}

// cmfUserExperienceL is where Load methods for each relationship are stored.
type cmfUserExperienceL struct{}

var (
	cmfUserExperienceAllColumns            = []string{"id", "user_id", "type", "total", "create_time", "update_time"}
	cmfUserExperienceColumnsWithoutDefault = []string{"user_id", "type", "total", "create_time", "update_time"}
	cmfUserExperienceColumnsWithDefault    = []string{"id"}
	cmfUserExperiencePrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFUserExperienceSlice is an alias for a slice of pointers to CMFUserExperience.
	// This should generally be used opposed to []CMFUserExperience.
	CMFUserExperienceSlice []*CMFUserExperience
	// CMFUserExperienceHook is the signature for custom CMFUserExperience hook methods
	CMFUserExperienceHook func(context.Context, boil.ContextExecutor, *CMFUserExperience) error

	cmfUserExperienceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfUserExperienceType                 = reflect.TypeOf(&CMFUserExperience{})
	cmfUserExperienceMapping              = queries.MakeStructMapping(cmfUserExperienceType)
	cmfUserExperiencePrimaryKeyMapping, _ = queries.BindMapping(cmfUserExperienceType, cmfUserExperienceMapping, cmfUserExperiencePrimaryKeyColumns)
	cmfUserExperienceInsertCacheMut       sync.RWMutex
	cmfUserExperienceInsertCache          = make(map[string]insertCache)
	cmfUserExperienceUpdateCacheMut       sync.RWMutex
	cmfUserExperienceUpdateCache          = make(map[string]updateCache)
	cmfUserExperienceUpsertCacheMut       sync.RWMutex
	cmfUserExperienceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfUserExperienceBeforeInsertHooks []CMFUserExperienceHook
var cmfUserExperienceBeforeUpdateHooks []CMFUserExperienceHook
var cmfUserExperienceBeforeDeleteHooks []CMFUserExperienceHook
var cmfUserExperienceBeforeUpsertHooks []CMFUserExperienceHook

var cmfUserExperienceAfterInsertHooks []CMFUserExperienceHook
var cmfUserExperienceAfterSelectHooks []CMFUserExperienceHook
var cmfUserExperienceAfterUpdateHooks []CMFUserExperienceHook
var cmfUserExperienceAfterDeleteHooks []CMFUserExperienceHook
var cmfUserExperienceAfterUpsertHooks []CMFUserExperienceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFUserExperience) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserExperienceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFUserExperience) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserExperienceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFUserExperience) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserExperienceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFUserExperience) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserExperienceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFUserExperience) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserExperienceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFUserExperience) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserExperienceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFUserExperience) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserExperienceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFUserExperience) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserExperienceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFUserExperience) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfUserExperienceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFUserExperienceHook registers your hook function for all future operations.
func AddCMFUserExperienceHook(hookPoint boil.HookPoint, cmfUserExperienceHook CMFUserExperienceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfUserExperienceBeforeInsertHooks = append(cmfUserExperienceBeforeInsertHooks, cmfUserExperienceHook)
	case boil.BeforeUpdateHook:
		cmfUserExperienceBeforeUpdateHooks = append(cmfUserExperienceBeforeUpdateHooks, cmfUserExperienceHook)
	case boil.BeforeDeleteHook:
		cmfUserExperienceBeforeDeleteHooks = append(cmfUserExperienceBeforeDeleteHooks, cmfUserExperienceHook)
	case boil.BeforeUpsertHook:
		cmfUserExperienceBeforeUpsertHooks = append(cmfUserExperienceBeforeUpsertHooks, cmfUserExperienceHook)
	case boil.AfterInsertHook:
		cmfUserExperienceAfterInsertHooks = append(cmfUserExperienceAfterInsertHooks, cmfUserExperienceHook)
	case boil.AfterSelectHook:
		cmfUserExperienceAfterSelectHooks = append(cmfUserExperienceAfterSelectHooks, cmfUserExperienceHook)
	case boil.AfterUpdateHook:
		cmfUserExperienceAfterUpdateHooks = append(cmfUserExperienceAfterUpdateHooks, cmfUserExperienceHook)
	case boil.AfterDeleteHook:
		cmfUserExperienceAfterDeleteHooks = append(cmfUserExperienceAfterDeleteHooks, cmfUserExperienceHook)
	case boil.AfterUpsertHook:
		cmfUserExperienceAfterUpsertHooks = append(cmfUserExperienceAfterUpsertHooks, cmfUserExperienceHook)
	}
}

// One returns a single cmfUserExperience record from the query.
func (q cmfUserExperienceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFUserExperience, error) {
	o := &CMFUserExperience{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_user_experience")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFUserExperience records from the query.
func (q cmfUserExperienceQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFUserExperienceSlice, error) {
	var o []*CMFUserExperience

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFUserExperience slice")
	}

	if len(cmfUserExperienceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFUserExperience records in the query.
func (q cmfUserExperienceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_user_experience rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfUserExperienceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_user_experience exists")
	}

	return count > 0, nil
}

// CMFUserExperiences retrieves all the records using an executor.
func CMFUserExperiences(mods ...qm.QueryMod) cmfUserExperienceQuery {
	mods = append(mods, qm.From("`cmf_user_experience`"))
	return cmfUserExperienceQuery{NewQuery(mods...)}
}

// FindCMFUserExperience retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFUserExperience(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CMFUserExperience, error) {
	cmfUserExperienceObj := &CMFUserExperience{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_user_experience` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfUserExperienceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_user_experience")
	}

	return cmfUserExperienceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFUserExperience) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_user_experience provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfUserExperienceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfUserExperienceInsertCacheMut.RLock()
	cache, cached := cmfUserExperienceInsertCache[key]
	cmfUserExperienceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfUserExperienceAllColumns,
			cmfUserExperienceColumnsWithDefault,
			cmfUserExperienceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfUserExperienceType, cmfUserExperienceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfUserExperienceType, cmfUserExperienceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_user_experience` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_user_experience` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_user_experience` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfUserExperiencePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_user_experience")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfUserExperienceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_user_experience")
	}

CacheNoHooks:
	if !cached {
		cmfUserExperienceInsertCacheMut.Lock()
		cmfUserExperienceInsertCache[key] = cache
		cmfUserExperienceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFUserExperience.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFUserExperience) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfUserExperienceUpdateCacheMut.RLock()
	cache, cached := cmfUserExperienceUpdateCache[key]
	cmfUserExperienceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfUserExperienceAllColumns,
			cmfUserExperiencePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_user_experience, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_user_experience` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfUserExperiencePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfUserExperienceType, cmfUserExperienceMapping, append(wl, cmfUserExperiencePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_user_experience row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_user_experience")
	}

	if !cached {
		cmfUserExperienceUpdateCacheMut.Lock()
		cmfUserExperienceUpdateCache[key] = cache
		cmfUserExperienceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfUserExperienceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_user_experience")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_user_experience")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFUserExperienceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfUserExperiencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_user_experience` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfUserExperiencePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfUserExperience slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfUserExperience")
	}
	return rowsAff, nil
}

var mySQLCMFUserExperienceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFUserExperience) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_user_experience provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfUserExperienceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFUserExperienceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfUserExperienceUpsertCacheMut.RLock()
	cache, cached := cmfUserExperienceUpsertCache[key]
	cmfUserExperienceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfUserExperienceAllColumns,
			cmfUserExperienceColumnsWithDefault,
			cmfUserExperienceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfUserExperienceAllColumns,
			cmfUserExperiencePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_user_experience, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_user_experience`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_user_experience` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfUserExperienceType, cmfUserExperienceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfUserExperienceType, cmfUserExperienceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_user_experience")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfUserExperienceMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfUserExperienceType, cmfUserExperienceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_user_experience")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_user_experience")
	}

CacheNoHooks:
	if !cached {
		cmfUserExperienceUpsertCacheMut.Lock()
		cmfUserExperienceUpsertCache[key] = cache
		cmfUserExperienceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFUserExperience record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFUserExperience) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFUserExperience provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfUserExperiencePrimaryKeyMapping)
	sql := "DELETE FROM `cmf_user_experience` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_user_experience")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_user_experience")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfUserExperienceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfUserExperienceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_user_experience")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_user_experience")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFUserExperienceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfUserExperienceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfUserExperiencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_user_experience` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfUserExperiencePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfUserExperience slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_user_experience")
	}

	if len(cmfUserExperienceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFUserExperience) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFUserExperience(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFUserExperienceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFUserExperienceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfUserExperiencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_user_experience`.* FROM `cmf_user_experience` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfUserExperiencePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFUserExperienceSlice")
	}

	*o = slice

	return nil
}

// CMFUserExperienceExists checks if the CMFUserExperience row exists.
func CMFUserExperienceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_user_experience` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_user_experience exists")
	}

	return exists, nil
}
