// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFVerificationCode is an object representing the database table.
type CMFVerificationCode struct {
	ID         uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Count      uint   `boil:"count" json:"count" toml:"count" yaml:"count"`
	SendTime   uint   `boil:"send_time" json:"send_time" toml:"send_time" yaml:"send_time"`
	ExpireTime uint   `boil:"expire_time" json:"expire_time" toml:"expire_time" yaml:"expire_time"`
	Code       string `boil:"code" json:"code" toml:"code" yaml:"code"`
	Account    string `boil:"account" json:"account" toml:"account" yaml:"account"`

	R *cmfVerificationCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfVerificationCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFVerificationCodeColumns = struct {
	ID         string
	Count      string
	SendTime   string
	ExpireTime string
	Code       string
	Account    string
}{
	ID:         "id",
	Count:      "count",
	SendTime:   "send_time",
	ExpireTime: "expire_time",
	Code:       "code",
	Account:    "account",
}

// Generated where

var CMFVerificationCodeWhere = struct {
	ID         whereHelperuint64
	Count      whereHelperuint
	SendTime   whereHelperuint
	ExpireTime whereHelperuint
	Code       whereHelperstring
	Account    whereHelperstring
}{
	ID:         whereHelperuint64{field: "`cmf_verification_code`.`id`"},
	Count:      whereHelperuint{field: "`cmf_verification_code`.`count`"},
	SendTime:   whereHelperuint{field: "`cmf_verification_code`.`send_time`"},
	ExpireTime: whereHelperuint{field: "`cmf_verification_code`.`expire_time`"},
	Code:       whereHelperstring{field: "`cmf_verification_code`.`code`"},
	Account:    whereHelperstring{field: "`cmf_verification_code`.`account`"},
}

// CMFVerificationCodeRels is where relationship names are stored.
var CMFVerificationCodeRels = struct {
}{}

// cmfVerificationCodeR is where relationships are stored.
type cmfVerificationCodeR struct {
}

// NewStruct creates a new relationship struct
func (*cmfVerificationCodeR) NewStruct() *cmfVerificationCodeR {
	return &cmfVerificationCodeR{}
}

// cmfVerificationCodeL is where Load methods for each relationship are stored.
type cmfVerificationCodeL struct{}

var (
	cmfVerificationCodeAllColumns            = []string{"id", "count", "send_time", "expire_time", "code", "account"}
	cmfVerificationCodeColumnsWithoutDefault = []string{"code", "account"}
	cmfVerificationCodeColumnsWithDefault    = []string{"id", "count", "send_time", "expire_time"}
	cmfVerificationCodePrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFVerificationCodeSlice is an alias for a slice of pointers to CMFVerificationCode.
	// This should generally be used opposed to []CMFVerificationCode.
	CMFVerificationCodeSlice []*CMFVerificationCode
	// CMFVerificationCodeHook is the signature for custom CMFVerificationCode hook methods
	CMFVerificationCodeHook func(context.Context, boil.ContextExecutor, *CMFVerificationCode) error

	cmfVerificationCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfVerificationCodeType                 = reflect.TypeOf(&CMFVerificationCode{})
	cmfVerificationCodeMapping              = queries.MakeStructMapping(cmfVerificationCodeType)
	cmfVerificationCodePrimaryKeyMapping, _ = queries.BindMapping(cmfVerificationCodeType, cmfVerificationCodeMapping, cmfVerificationCodePrimaryKeyColumns)
	cmfVerificationCodeInsertCacheMut       sync.RWMutex
	cmfVerificationCodeInsertCache          = make(map[string]insertCache)
	cmfVerificationCodeUpdateCacheMut       sync.RWMutex
	cmfVerificationCodeUpdateCache          = make(map[string]updateCache)
	cmfVerificationCodeUpsertCacheMut       sync.RWMutex
	cmfVerificationCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfVerificationCodeBeforeInsertHooks []CMFVerificationCodeHook
var cmfVerificationCodeBeforeUpdateHooks []CMFVerificationCodeHook
var cmfVerificationCodeBeforeDeleteHooks []CMFVerificationCodeHook
var cmfVerificationCodeBeforeUpsertHooks []CMFVerificationCodeHook

var cmfVerificationCodeAfterInsertHooks []CMFVerificationCodeHook
var cmfVerificationCodeAfterSelectHooks []CMFVerificationCodeHook
var cmfVerificationCodeAfterUpdateHooks []CMFVerificationCodeHook
var cmfVerificationCodeAfterDeleteHooks []CMFVerificationCodeHook
var cmfVerificationCodeAfterUpsertHooks []CMFVerificationCodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFVerificationCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVerificationCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFVerificationCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVerificationCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFVerificationCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVerificationCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFVerificationCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVerificationCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFVerificationCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVerificationCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFVerificationCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVerificationCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFVerificationCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVerificationCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFVerificationCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVerificationCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFVerificationCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVerificationCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFVerificationCodeHook registers your hook function for all future operations.
func AddCMFVerificationCodeHook(hookPoint boil.HookPoint, cmfVerificationCodeHook CMFVerificationCodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfVerificationCodeBeforeInsertHooks = append(cmfVerificationCodeBeforeInsertHooks, cmfVerificationCodeHook)
	case boil.BeforeUpdateHook:
		cmfVerificationCodeBeforeUpdateHooks = append(cmfVerificationCodeBeforeUpdateHooks, cmfVerificationCodeHook)
	case boil.BeforeDeleteHook:
		cmfVerificationCodeBeforeDeleteHooks = append(cmfVerificationCodeBeforeDeleteHooks, cmfVerificationCodeHook)
	case boil.BeforeUpsertHook:
		cmfVerificationCodeBeforeUpsertHooks = append(cmfVerificationCodeBeforeUpsertHooks, cmfVerificationCodeHook)
	case boil.AfterInsertHook:
		cmfVerificationCodeAfterInsertHooks = append(cmfVerificationCodeAfterInsertHooks, cmfVerificationCodeHook)
	case boil.AfterSelectHook:
		cmfVerificationCodeAfterSelectHooks = append(cmfVerificationCodeAfterSelectHooks, cmfVerificationCodeHook)
	case boil.AfterUpdateHook:
		cmfVerificationCodeAfterUpdateHooks = append(cmfVerificationCodeAfterUpdateHooks, cmfVerificationCodeHook)
	case boil.AfterDeleteHook:
		cmfVerificationCodeAfterDeleteHooks = append(cmfVerificationCodeAfterDeleteHooks, cmfVerificationCodeHook)
	case boil.AfterUpsertHook:
		cmfVerificationCodeAfterUpsertHooks = append(cmfVerificationCodeAfterUpsertHooks, cmfVerificationCodeHook)
	}
}

// One returns a single cmfVerificationCode record from the query.
func (q cmfVerificationCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFVerificationCode, error) {
	o := &CMFVerificationCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_verification_code")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFVerificationCode records from the query.
func (q cmfVerificationCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFVerificationCodeSlice, error) {
	var o []*CMFVerificationCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFVerificationCode slice")
	}

	if len(cmfVerificationCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFVerificationCode records in the query.
func (q cmfVerificationCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_verification_code rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfVerificationCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_verification_code exists")
	}

	return count > 0, nil
}

// CMFVerificationCodes retrieves all the records using an executor.
func CMFVerificationCodes(mods ...qm.QueryMod) cmfVerificationCodeQuery {
	mods = append(mods, qm.From("`cmf_verification_code`"))
	return cmfVerificationCodeQuery{NewQuery(mods...)}
}

// FindCMFVerificationCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFVerificationCode(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*CMFVerificationCode, error) {
	cmfVerificationCodeObj := &CMFVerificationCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_verification_code` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfVerificationCodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_verification_code")
	}

	return cmfVerificationCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFVerificationCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_verification_code provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfVerificationCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfVerificationCodeInsertCacheMut.RLock()
	cache, cached := cmfVerificationCodeInsertCache[key]
	cmfVerificationCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfVerificationCodeAllColumns,
			cmfVerificationCodeColumnsWithDefault,
			cmfVerificationCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfVerificationCodeType, cmfVerificationCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfVerificationCodeType, cmfVerificationCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_verification_code` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_verification_code` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_verification_code` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfVerificationCodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_verification_code")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfVerificationCodeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_verification_code")
	}

CacheNoHooks:
	if !cached {
		cmfVerificationCodeInsertCacheMut.Lock()
		cmfVerificationCodeInsertCache[key] = cache
		cmfVerificationCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFVerificationCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFVerificationCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfVerificationCodeUpdateCacheMut.RLock()
	cache, cached := cmfVerificationCodeUpdateCache[key]
	cmfVerificationCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfVerificationCodeAllColumns,
			cmfVerificationCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_verification_code, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_verification_code` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfVerificationCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfVerificationCodeType, cmfVerificationCodeMapping, append(wl, cmfVerificationCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_verification_code row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_verification_code")
	}

	if !cached {
		cmfVerificationCodeUpdateCacheMut.Lock()
		cmfVerificationCodeUpdateCache[key] = cache
		cmfVerificationCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfVerificationCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_verification_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_verification_code")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFVerificationCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfVerificationCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_verification_code` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfVerificationCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfVerificationCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfVerificationCode")
	}
	return rowsAff, nil
}

var mySQLCMFVerificationCodeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFVerificationCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_verification_code provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfVerificationCodeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFVerificationCodeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfVerificationCodeUpsertCacheMut.RLock()
	cache, cached := cmfVerificationCodeUpsertCache[key]
	cmfVerificationCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfVerificationCodeAllColumns,
			cmfVerificationCodeColumnsWithDefault,
			cmfVerificationCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfVerificationCodeAllColumns,
			cmfVerificationCodePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_verification_code, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_verification_code`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_verification_code` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfVerificationCodeType, cmfVerificationCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfVerificationCodeType, cmfVerificationCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_verification_code")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfVerificationCodeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfVerificationCodeType, cmfVerificationCodeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_verification_code")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_verification_code")
	}

CacheNoHooks:
	if !cached {
		cmfVerificationCodeUpsertCacheMut.Lock()
		cmfVerificationCodeUpsertCache[key] = cache
		cmfVerificationCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFVerificationCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFVerificationCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFVerificationCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfVerificationCodePrimaryKeyMapping)
	sql := "DELETE FROM `cmf_verification_code` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_verification_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_verification_code")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfVerificationCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfVerificationCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_verification_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_verification_code")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFVerificationCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfVerificationCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfVerificationCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_verification_code` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfVerificationCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfVerificationCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_verification_code")
	}

	if len(cmfVerificationCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFVerificationCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFVerificationCode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFVerificationCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFVerificationCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfVerificationCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_verification_code`.* FROM `cmf_verification_code` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfVerificationCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFVerificationCodeSlice")
	}

	*o = slice

	return nil
}

// CMFVerificationCodeExists checks if the CMFVerificationCode row exists.
func CMFVerificationCodeExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_verification_code` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_verification_code exists")
	}

	return exists, nil
}
