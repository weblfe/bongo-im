// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CMFVideoComment is an object representing the database table.
type CMFVideoComment struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID       int         `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	Touid     int         `boil:"touid" json:"touid" toml:"touid" yaml:"touid"`
	Videoid   int         `boil:"videoid" json:"videoid" toml:"videoid" yaml:"videoid"`
	Commentid int         `boil:"commentid" json:"commentid" toml:"commentid" yaml:"commentid"`
	Parentid  int         `boil:"parentid" json:"parentid" toml:"parentid" yaml:"parentid"`
	Content   null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	Likes     int         `boil:"likes" json:"likes" toml:"likes" yaml:"likes"`
	Addtime   int         `boil:"addtime" json:"addtime" toml:"addtime" yaml:"addtime"`
	AtInfo    string      `boil:"at_info" json:"at_info" toml:"at_info" yaml:"at_info"`

	R *cmfVideoCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cmfVideoCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CMFVideoCommentColumns = struct {
	ID        string
	UID       string
	Touid     string
	Videoid   string
	Commentid string
	Parentid  string
	Content   string
	Likes     string
	Addtime   string
	AtInfo    string
}{
	ID:        "id",
	UID:       "uid",
	Touid:     "touid",
	Videoid:   "videoid",
	Commentid: "commentid",
	Parentid:  "parentid",
	Content:   "content",
	Likes:     "likes",
	Addtime:   "addtime",
	AtInfo:    "at_info",
}

// Generated where

var CMFVideoCommentWhere = struct {
	ID        whereHelperint
	UID       whereHelperint
	Touid     whereHelperint
	Videoid   whereHelperint
	Commentid whereHelperint
	Parentid  whereHelperint
	Content   whereHelpernull_String
	Likes     whereHelperint
	Addtime   whereHelperint
	AtInfo    whereHelperstring
}{
	ID:        whereHelperint{field: "`cmf_video_comments`.`id`"},
	UID:       whereHelperint{field: "`cmf_video_comments`.`uid`"},
	Touid:     whereHelperint{field: "`cmf_video_comments`.`touid`"},
	Videoid:   whereHelperint{field: "`cmf_video_comments`.`videoid`"},
	Commentid: whereHelperint{field: "`cmf_video_comments`.`commentid`"},
	Parentid:  whereHelperint{field: "`cmf_video_comments`.`parentid`"},
	Content:   whereHelpernull_String{field: "`cmf_video_comments`.`content`"},
	Likes:     whereHelperint{field: "`cmf_video_comments`.`likes`"},
	Addtime:   whereHelperint{field: "`cmf_video_comments`.`addtime`"},
	AtInfo:    whereHelperstring{field: "`cmf_video_comments`.`at_info`"},
}

// CMFVideoCommentRels is where relationship names are stored.
var CMFVideoCommentRels = struct {
}{}

// cmfVideoCommentR is where relationships are stored.
type cmfVideoCommentR struct {
}

// NewStruct creates a new relationship struct
func (*cmfVideoCommentR) NewStruct() *cmfVideoCommentR {
	return &cmfVideoCommentR{}
}

// cmfVideoCommentL is where Load methods for each relationship are stored.
type cmfVideoCommentL struct{}

var (
	cmfVideoCommentAllColumns            = []string{"id", "uid", "touid", "videoid", "commentid", "parentid", "content", "likes", "addtime", "at_info"}
	cmfVideoCommentColumnsWithoutDefault = []string{"content", "at_info"}
	cmfVideoCommentColumnsWithDefault    = []string{"id", "uid", "touid", "videoid", "commentid", "parentid", "likes", "addtime"}
	cmfVideoCommentPrimaryKeyColumns     = []string{"id"}
)

type (
	// CMFVideoCommentSlice is an alias for a slice of pointers to CMFVideoComment.
	// This should generally be used opposed to []CMFVideoComment.
	CMFVideoCommentSlice []*CMFVideoComment
	// CMFVideoCommentHook is the signature for custom CMFVideoComment hook methods
	CMFVideoCommentHook func(context.Context, boil.ContextExecutor, *CMFVideoComment) error

	cmfVideoCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cmfVideoCommentType                 = reflect.TypeOf(&CMFVideoComment{})
	cmfVideoCommentMapping              = queries.MakeStructMapping(cmfVideoCommentType)
	cmfVideoCommentPrimaryKeyMapping, _ = queries.BindMapping(cmfVideoCommentType, cmfVideoCommentMapping, cmfVideoCommentPrimaryKeyColumns)
	cmfVideoCommentInsertCacheMut       sync.RWMutex
	cmfVideoCommentInsertCache          = make(map[string]insertCache)
	cmfVideoCommentUpdateCacheMut       sync.RWMutex
	cmfVideoCommentUpdateCache          = make(map[string]updateCache)
	cmfVideoCommentUpsertCacheMut       sync.RWMutex
	cmfVideoCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cmfVideoCommentBeforeInsertHooks []CMFVideoCommentHook
var cmfVideoCommentBeforeUpdateHooks []CMFVideoCommentHook
var cmfVideoCommentBeforeDeleteHooks []CMFVideoCommentHook
var cmfVideoCommentBeforeUpsertHooks []CMFVideoCommentHook

var cmfVideoCommentAfterInsertHooks []CMFVideoCommentHook
var cmfVideoCommentAfterSelectHooks []CMFVideoCommentHook
var cmfVideoCommentAfterUpdateHooks []CMFVideoCommentHook
var cmfVideoCommentAfterDeleteHooks []CMFVideoCommentHook
var cmfVideoCommentAfterUpsertHooks []CMFVideoCommentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CMFVideoComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVideoCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CMFVideoComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVideoCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CMFVideoComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVideoCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CMFVideoComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVideoCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CMFVideoComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVideoCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CMFVideoComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVideoCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CMFVideoComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVideoCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CMFVideoComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVideoCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CMFVideoComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cmfVideoCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCMFVideoCommentHook registers your hook function for all future operations.
func AddCMFVideoCommentHook(hookPoint boil.HookPoint, cmfVideoCommentHook CMFVideoCommentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cmfVideoCommentBeforeInsertHooks = append(cmfVideoCommentBeforeInsertHooks, cmfVideoCommentHook)
	case boil.BeforeUpdateHook:
		cmfVideoCommentBeforeUpdateHooks = append(cmfVideoCommentBeforeUpdateHooks, cmfVideoCommentHook)
	case boil.BeforeDeleteHook:
		cmfVideoCommentBeforeDeleteHooks = append(cmfVideoCommentBeforeDeleteHooks, cmfVideoCommentHook)
	case boil.BeforeUpsertHook:
		cmfVideoCommentBeforeUpsertHooks = append(cmfVideoCommentBeforeUpsertHooks, cmfVideoCommentHook)
	case boil.AfterInsertHook:
		cmfVideoCommentAfterInsertHooks = append(cmfVideoCommentAfterInsertHooks, cmfVideoCommentHook)
	case boil.AfterSelectHook:
		cmfVideoCommentAfterSelectHooks = append(cmfVideoCommentAfterSelectHooks, cmfVideoCommentHook)
	case boil.AfterUpdateHook:
		cmfVideoCommentAfterUpdateHooks = append(cmfVideoCommentAfterUpdateHooks, cmfVideoCommentHook)
	case boil.AfterDeleteHook:
		cmfVideoCommentAfterDeleteHooks = append(cmfVideoCommentAfterDeleteHooks, cmfVideoCommentHook)
	case boil.AfterUpsertHook:
		cmfVideoCommentAfterUpsertHooks = append(cmfVideoCommentAfterUpsertHooks, cmfVideoCommentHook)
	}
}

// One returns a single cmfVideoComment record from the query.
func (q cmfVideoCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CMFVideoComment, error) {
	o := &CMFVideoComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cmf_video_comments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CMFVideoComment records from the query.
func (q cmfVideoCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (CMFVideoCommentSlice, error) {
	var o []*CMFVideoComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CMFVideoComment slice")
	}

	if len(cmfVideoCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CMFVideoComment records in the query.
func (q cmfVideoCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cmf_video_comments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cmfVideoCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cmf_video_comments exists")
	}

	return count > 0, nil
}

// CMFVideoComments retrieves all the records using an executor.
func CMFVideoComments(mods ...qm.QueryMod) cmfVideoCommentQuery {
	mods = append(mods, qm.From("`cmf_video_comments`"))
	return cmfVideoCommentQuery{NewQuery(mods...)}
}

// FindCMFVideoComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCMFVideoComment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CMFVideoComment, error) {
	cmfVideoCommentObj := &CMFVideoComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cmf_video_comments` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cmfVideoCommentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cmf_video_comments")
	}

	return cmfVideoCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CMFVideoComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_video_comments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfVideoCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cmfVideoCommentInsertCacheMut.RLock()
	cache, cached := cmfVideoCommentInsertCache[key]
	cmfVideoCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cmfVideoCommentAllColumns,
			cmfVideoCommentColumnsWithDefault,
			cmfVideoCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cmfVideoCommentType, cmfVideoCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cmfVideoCommentType, cmfVideoCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cmf_video_comments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cmf_video_comments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cmf_video_comments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cmfVideoCommentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cmf_video_comments")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfVideoCommentMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_video_comments")
	}

CacheNoHooks:
	if !cached {
		cmfVideoCommentInsertCacheMut.Lock()
		cmfVideoCommentInsertCache[key] = cache
		cmfVideoCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CMFVideoComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CMFVideoComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cmfVideoCommentUpdateCacheMut.RLock()
	cache, cached := cmfVideoCommentUpdateCache[key]
	cmfVideoCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cmfVideoCommentAllColumns,
			cmfVideoCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cmf_video_comments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cmf_video_comments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cmfVideoCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cmfVideoCommentType, cmfVideoCommentMapping, append(wl, cmfVideoCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cmf_video_comments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cmf_video_comments")
	}

	if !cached {
		cmfVideoCommentUpdateCacheMut.Lock()
		cmfVideoCommentUpdateCache[key] = cache
		cmfVideoCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cmfVideoCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cmf_video_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cmf_video_comments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CMFVideoCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfVideoCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cmf_video_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfVideoCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cmfVideoComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cmfVideoComment")
	}
	return rowsAff, nil
}

var mySQLCMFVideoCommentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CMFVideoComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cmf_video_comments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cmfVideoCommentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCMFVideoCommentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cmfVideoCommentUpsertCacheMut.RLock()
	cache, cached := cmfVideoCommentUpsertCache[key]
	cmfVideoCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cmfVideoCommentAllColumns,
			cmfVideoCommentColumnsWithDefault,
			cmfVideoCommentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cmfVideoCommentAllColumns,
			cmfVideoCommentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cmf_video_comments, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cmf_video_comments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cmf_video_comments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cmfVideoCommentType, cmfVideoCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cmfVideoCommentType, cmfVideoCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cmf_video_comments")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cmfVideoCommentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cmfVideoCommentType, cmfVideoCommentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cmf_video_comments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cmf_video_comments")
	}

CacheNoHooks:
	if !cached {
		cmfVideoCommentUpsertCacheMut.Lock()
		cmfVideoCommentUpsertCache[key] = cache
		cmfVideoCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CMFVideoComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CMFVideoComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CMFVideoComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cmfVideoCommentPrimaryKeyMapping)
	sql := "DELETE FROM `cmf_video_comments` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cmf_video_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cmf_video_comments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cmfVideoCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cmfVideoCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmf_video_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_video_comments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CMFVideoCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cmfVideoCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfVideoCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cmf_video_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfVideoCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cmfVideoComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cmf_video_comments")
	}

	if len(cmfVideoCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CMFVideoComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCMFVideoComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CMFVideoCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CMFVideoCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cmfVideoCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cmf_video_comments`.* FROM `cmf_video_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cmfVideoCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CMFVideoCommentSlice")
	}

	*o = slice

	return nil
}

// CMFVideoCommentExists checks if the CMFVideoComment row exists.
func CMFVideoCommentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cmf_video_comments` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cmf_video_comments exists")
	}

	return exists, nil
}
